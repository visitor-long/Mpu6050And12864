
Mpu6050And12864.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c6dc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001208  0800c7f0  0800c7f0  0001c7f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d9f8  0800d9f8  00020220  2**0
                  CONTENTS
  4 .ARM          00000008  0800d9f8  0800d9f8  0001d9f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800da00  0800da00  00020220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800da00  0800da00  0001da00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800da04  0800da04  0001da04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  0800da08  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  20000220  0800dc28  00020220  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000480  0800dc28  00020480  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020249  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e253  00000000  00000000  0002028c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003072  00000000  00000000  0002e4df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f10  00000000  00000000  00031558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bad  00000000  00000000  00032468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001bfab  00000000  00000000  00033015  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000143d1  00000000  00000000  0004efc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000929ec  00000000  00000000  00063391  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005128  00000000  00000000  000f5d80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000faea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000220 	.word	0x20000220
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c7d4 	.word	0x0800c7d4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000224 	.word	0x20000224
 800014c:	0800c7d4 	.word	0x0800c7d4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2iz>:
 80010d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d8:	d30f      	bcc.n	80010fa <__aeabi_f2iz+0x2a>
 80010da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d90d      	bls.n	8001100 <__aeabi_f2iz+0x30>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010ec:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010f0:	fa23 f002 	lsr.w	r0, r3, r2
 80010f4:	bf18      	it	ne
 80010f6:	4240      	negne	r0, r0
 80010f8:	4770      	bx	lr
 80010fa:	f04f 0000 	mov.w	r0, #0
 80010fe:	4770      	bx	lr
 8001100:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001104:	d101      	bne.n	800110a <__aeabi_f2iz+0x3a>
 8001106:	0242      	lsls	r2, r0, #9
 8001108:	d105      	bne.n	8001116 <__aeabi_f2iz+0x46>
 800110a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800110e:	bf08      	it	eq
 8001110:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001114:	4770      	bx	lr
 8001116:	f04f 0000 	mov.w	r0, #0
 800111a:	4770      	bx	lr

0800111c <__aeabi_f2uiz>:
 800111c:	0042      	lsls	r2, r0, #1
 800111e:	d20e      	bcs.n	800113e <__aeabi_f2uiz+0x22>
 8001120:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001124:	d30b      	bcc.n	800113e <__aeabi_f2uiz+0x22>
 8001126:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800112a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800112e:	d409      	bmi.n	8001144 <__aeabi_f2uiz+0x28>
 8001130:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001134:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001138:	fa23 f002 	lsr.w	r0, r3, r2
 800113c:	4770      	bx	lr
 800113e:	f04f 0000 	mov.w	r0, #0
 8001142:	4770      	bx	lr
 8001144:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001148:	d101      	bne.n	800114e <__aeabi_f2uiz+0x32>
 800114a:	0242      	lsls	r2, r0, #9
 800114c:	d102      	bne.n	8001154 <__aeabi_f2uiz+0x38>
 800114e:	f04f 30ff 	mov.w	r0, #4294967295
 8001152:	4770      	bx	lr
 8001154:	f04f 0000 	mov.w	r0, #0
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop

0800115c <__aeabi_ldivmod>:
 800115c:	b97b      	cbnz	r3, 800117e <__aeabi_ldivmod+0x22>
 800115e:	b972      	cbnz	r2, 800117e <__aeabi_ldivmod+0x22>
 8001160:	2900      	cmp	r1, #0
 8001162:	bfbe      	ittt	lt
 8001164:	2000      	movlt	r0, #0
 8001166:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800116a:	e006      	blt.n	800117a <__aeabi_ldivmod+0x1e>
 800116c:	bf08      	it	eq
 800116e:	2800      	cmpeq	r0, #0
 8001170:	bf1c      	itt	ne
 8001172:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8001176:	f04f 30ff 	movne.w	r0, #4294967295
 800117a:	f000 b9a5 	b.w	80014c8 <__aeabi_idiv0>
 800117e:	f1ad 0c08 	sub.w	ip, sp, #8
 8001182:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001186:	2900      	cmp	r1, #0
 8001188:	db09      	blt.n	800119e <__aeabi_ldivmod+0x42>
 800118a:	2b00      	cmp	r3, #0
 800118c:	db1a      	blt.n	80011c4 <__aeabi_ldivmod+0x68>
 800118e:	f000 f835 	bl	80011fc <__udivmoddi4>
 8001192:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001196:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800119a:	b004      	add	sp, #16
 800119c:	4770      	bx	lr
 800119e:	4240      	negs	r0, r0
 80011a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	db1b      	blt.n	80011e0 <__aeabi_ldivmod+0x84>
 80011a8:	f000 f828 	bl	80011fc <__udivmoddi4>
 80011ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011b4:	b004      	add	sp, #16
 80011b6:	4240      	negs	r0, r0
 80011b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011bc:	4252      	negs	r2, r2
 80011be:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80011c2:	4770      	bx	lr
 80011c4:	4252      	negs	r2, r2
 80011c6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80011ca:	f000 f817 	bl	80011fc <__udivmoddi4>
 80011ce:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011d6:	b004      	add	sp, #16
 80011d8:	4240      	negs	r0, r0
 80011da:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011de:	4770      	bx	lr
 80011e0:	4252      	negs	r2, r2
 80011e2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80011e6:	f000 f809 	bl	80011fc <__udivmoddi4>
 80011ea:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011f2:	b004      	add	sp, #16
 80011f4:	4252      	negs	r2, r2
 80011f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80011fa:	4770      	bx	lr

080011fc <__udivmoddi4>:
 80011fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001200:	9e08      	ldr	r6, [sp, #32]
 8001202:	460d      	mov	r5, r1
 8001204:	4604      	mov	r4, r0
 8001206:	468e      	mov	lr, r1
 8001208:	2b00      	cmp	r3, #0
 800120a:	d14c      	bne.n	80012a6 <__udivmoddi4+0xaa>
 800120c:	428a      	cmp	r2, r1
 800120e:	4694      	mov	ip, r2
 8001210:	d967      	bls.n	80012e2 <__udivmoddi4+0xe6>
 8001212:	fab2 f382 	clz	r3, r2
 8001216:	b153      	cbz	r3, 800122e <__udivmoddi4+0x32>
 8001218:	fa02 fc03 	lsl.w	ip, r2, r3
 800121c:	f1c3 0220 	rsb	r2, r3, #32
 8001220:	fa01 fe03 	lsl.w	lr, r1, r3
 8001224:	fa20 f202 	lsr.w	r2, r0, r2
 8001228:	ea42 0e0e 	orr.w	lr, r2, lr
 800122c:	409c      	lsls	r4, r3
 800122e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001232:	fbbe f1f7 	udiv	r1, lr, r7
 8001236:	fa1f f58c 	uxth.w	r5, ip
 800123a:	fb07 ee11 	mls	lr, r7, r1, lr
 800123e:	fb01 f005 	mul.w	r0, r1, r5
 8001242:	0c22      	lsrs	r2, r4, #16
 8001244:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8001248:	4290      	cmp	r0, r2
 800124a:	d90a      	bls.n	8001262 <__udivmoddi4+0x66>
 800124c:	eb1c 0202 	adds.w	r2, ip, r2
 8001250:	f101 3eff 	add.w	lr, r1, #4294967295
 8001254:	f080 8119 	bcs.w	800148a <__udivmoddi4+0x28e>
 8001258:	4290      	cmp	r0, r2
 800125a:	f240 8116 	bls.w	800148a <__udivmoddi4+0x28e>
 800125e:	3902      	subs	r1, #2
 8001260:	4462      	add	r2, ip
 8001262:	1a12      	subs	r2, r2, r0
 8001264:	fbb2 f0f7 	udiv	r0, r2, r7
 8001268:	fb07 2210 	mls	r2, r7, r0, r2
 800126c:	fb00 f505 	mul.w	r5, r0, r5
 8001270:	b2a4      	uxth	r4, r4
 8001272:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001276:	42a5      	cmp	r5, r4
 8001278:	d90a      	bls.n	8001290 <__udivmoddi4+0x94>
 800127a:	eb1c 0404 	adds.w	r4, ip, r4
 800127e:	f100 32ff 	add.w	r2, r0, #4294967295
 8001282:	f080 8104 	bcs.w	800148e <__udivmoddi4+0x292>
 8001286:	42a5      	cmp	r5, r4
 8001288:	f240 8101 	bls.w	800148e <__udivmoddi4+0x292>
 800128c:	4464      	add	r4, ip
 800128e:	3802      	subs	r0, #2
 8001290:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8001294:	2100      	movs	r1, #0
 8001296:	1b64      	subs	r4, r4, r5
 8001298:	b11e      	cbz	r6, 80012a2 <__udivmoddi4+0xa6>
 800129a:	40dc      	lsrs	r4, r3
 800129c:	2300      	movs	r3, #0
 800129e:	e9c6 4300 	strd	r4, r3, [r6]
 80012a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012a6:	428b      	cmp	r3, r1
 80012a8:	d908      	bls.n	80012bc <__udivmoddi4+0xc0>
 80012aa:	2e00      	cmp	r6, #0
 80012ac:	f000 80ea 	beq.w	8001484 <__udivmoddi4+0x288>
 80012b0:	2100      	movs	r1, #0
 80012b2:	e9c6 0500 	strd	r0, r5, [r6]
 80012b6:	4608      	mov	r0, r1
 80012b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012bc:	fab3 f183 	clz	r1, r3
 80012c0:	2900      	cmp	r1, #0
 80012c2:	d148      	bne.n	8001356 <__udivmoddi4+0x15a>
 80012c4:	42ab      	cmp	r3, r5
 80012c6:	d302      	bcc.n	80012ce <__udivmoddi4+0xd2>
 80012c8:	4282      	cmp	r2, r0
 80012ca:	f200 80f8 	bhi.w	80014be <__udivmoddi4+0x2c2>
 80012ce:	1a84      	subs	r4, r0, r2
 80012d0:	eb65 0203 	sbc.w	r2, r5, r3
 80012d4:	2001      	movs	r0, #1
 80012d6:	4696      	mov	lr, r2
 80012d8:	2e00      	cmp	r6, #0
 80012da:	d0e2      	beq.n	80012a2 <__udivmoddi4+0xa6>
 80012dc:	e9c6 4e00 	strd	r4, lr, [r6]
 80012e0:	e7df      	b.n	80012a2 <__udivmoddi4+0xa6>
 80012e2:	b902      	cbnz	r2, 80012e6 <__udivmoddi4+0xea>
 80012e4:	deff      	udf	#255	; 0xff
 80012e6:	fab2 f382 	clz	r3, r2
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	f040 808e 	bne.w	800140c <__udivmoddi4+0x210>
 80012f0:	1a88      	subs	r0, r1, r2
 80012f2:	2101      	movs	r1, #1
 80012f4:	0c17      	lsrs	r7, r2, #16
 80012f6:	fa1f fe82 	uxth.w	lr, r2
 80012fa:	fbb0 f5f7 	udiv	r5, r0, r7
 80012fe:	fb07 0015 	mls	r0, r7, r5, r0
 8001302:	0c22      	lsrs	r2, r4, #16
 8001304:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8001308:	fb0e f005 	mul.w	r0, lr, r5
 800130c:	4290      	cmp	r0, r2
 800130e:	d908      	bls.n	8001322 <__udivmoddi4+0x126>
 8001310:	eb1c 0202 	adds.w	r2, ip, r2
 8001314:	f105 38ff 	add.w	r8, r5, #4294967295
 8001318:	d202      	bcs.n	8001320 <__udivmoddi4+0x124>
 800131a:	4290      	cmp	r0, r2
 800131c:	f200 80cc 	bhi.w	80014b8 <__udivmoddi4+0x2bc>
 8001320:	4645      	mov	r5, r8
 8001322:	1a12      	subs	r2, r2, r0
 8001324:	fbb2 f0f7 	udiv	r0, r2, r7
 8001328:	fb07 2210 	mls	r2, r7, r0, r2
 800132c:	fb0e fe00 	mul.w	lr, lr, r0
 8001330:	b2a4      	uxth	r4, r4
 8001332:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001336:	45a6      	cmp	lr, r4
 8001338:	d908      	bls.n	800134c <__udivmoddi4+0x150>
 800133a:	eb1c 0404 	adds.w	r4, ip, r4
 800133e:	f100 32ff 	add.w	r2, r0, #4294967295
 8001342:	d202      	bcs.n	800134a <__udivmoddi4+0x14e>
 8001344:	45a6      	cmp	lr, r4
 8001346:	f200 80b4 	bhi.w	80014b2 <__udivmoddi4+0x2b6>
 800134a:	4610      	mov	r0, r2
 800134c:	eba4 040e 	sub.w	r4, r4, lr
 8001350:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8001354:	e7a0      	b.n	8001298 <__udivmoddi4+0x9c>
 8001356:	f1c1 0720 	rsb	r7, r1, #32
 800135a:	408b      	lsls	r3, r1
 800135c:	fa22 fc07 	lsr.w	ip, r2, r7
 8001360:	ea4c 0c03 	orr.w	ip, ip, r3
 8001364:	fa25 fa07 	lsr.w	sl, r5, r7
 8001368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800136c:	fbba f8f9 	udiv	r8, sl, r9
 8001370:	408d      	lsls	r5, r1
 8001372:	fa20 f307 	lsr.w	r3, r0, r7
 8001376:	fb09 aa18 	mls	sl, r9, r8, sl
 800137a:	fa1f fe8c 	uxth.w	lr, ip
 800137e:	432b      	orrs	r3, r5
 8001380:	fa00 f501 	lsl.w	r5, r0, r1
 8001384:	fb08 f00e 	mul.w	r0, r8, lr
 8001388:	0c1c      	lsrs	r4, r3, #16
 800138a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800138e:	42a0      	cmp	r0, r4
 8001390:	fa02 f201 	lsl.w	r2, r2, r1
 8001394:	d90b      	bls.n	80013ae <__udivmoddi4+0x1b2>
 8001396:	eb1c 0404 	adds.w	r4, ip, r4
 800139a:	f108 3aff 	add.w	sl, r8, #4294967295
 800139e:	f080 8086 	bcs.w	80014ae <__udivmoddi4+0x2b2>
 80013a2:	42a0      	cmp	r0, r4
 80013a4:	f240 8083 	bls.w	80014ae <__udivmoddi4+0x2b2>
 80013a8:	f1a8 0802 	sub.w	r8, r8, #2
 80013ac:	4464      	add	r4, ip
 80013ae:	1a24      	subs	r4, r4, r0
 80013b0:	b298      	uxth	r0, r3
 80013b2:	fbb4 f3f9 	udiv	r3, r4, r9
 80013b6:	fb09 4413 	mls	r4, r9, r3, r4
 80013ba:	fb03 fe0e 	mul.w	lr, r3, lr
 80013be:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 80013c2:	45a6      	cmp	lr, r4
 80013c4:	d908      	bls.n	80013d8 <__udivmoddi4+0x1dc>
 80013c6:	eb1c 0404 	adds.w	r4, ip, r4
 80013ca:	f103 30ff 	add.w	r0, r3, #4294967295
 80013ce:	d26a      	bcs.n	80014a6 <__udivmoddi4+0x2aa>
 80013d0:	45a6      	cmp	lr, r4
 80013d2:	d968      	bls.n	80014a6 <__udivmoddi4+0x2aa>
 80013d4:	3b02      	subs	r3, #2
 80013d6:	4464      	add	r4, ip
 80013d8:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80013dc:	fba0 9302 	umull	r9, r3, r0, r2
 80013e0:	eba4 040e 	sub.w	r4, r4, lr
 80013e4:	429c      	cmp	r4, r3
 80013e6:	46c8      	mov	r8, r9
 80013e8:	469e      	mov	lr, r3
 80013ea:	d354      	bcc.n	8001496 <__udivmoddi4+0x29a>
 80013ec:	d051      	beq.n	8001492 <__udivmoddi4+0x296>
 80013ee:	2e00      	cmp	r6, #0
 80013f0:	d067      	beq.n	80014c2 <__udivmoddi4+0x2c6>
 80013f2:	ebb5 0308 	subs.w	r3, r5, r8
 80013f6:	eb64 040e 	sbc.w	r4, r4, lr
 80013fa:	40cb      	lsrs	r3, r1
 80013fc:	fa04 f707 	lsl.w	r7, r4, r7
 8001400:	431f      	orrs	r7, r3
 8001402:	40cc      	lsrs	r4, r1
 8001404:	e9c6 7400 	strd	r7, r4, [r6]
 8001408:	2100      	movs	r1, #0
 800140a:	e74a      	b.n	80012a2 <__udivmoddi4+0xa6>
 800140c:	fa02 fc03 	lsl.w	ip, r2, r3
 8001410:	f1c3 0020 	rsb	r0, r3, #32
 8001414:	40c1      	lsrs	r1, r0
 8001416:	409d      	lsls	r5, r3
 8001418:	fa24 f000 	lsr.w	r0, r4, r0
 800141c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001420:	4328      	orrs	r0, r5
 8001422:	fbb1 f5f7 	udiv	r5, r1, r7
 8001426:	fb07 1115 	mls	r1, r7, r5, r1
 800142a:	fa1f fe8c 	uxth.w	lr, ip
 800142e:	0c02      	lsrs	r2, r0, #16
 8001430:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001434:	fb05 f10e 	mul.w	r1, r5, lr
 8001438:	4291      	cmp	r1, r2
 800143a:	fa04 f403 	lsl.w	r4, r4, r3
 800143e:	d908      	bls.n	8001452 <__udivmoddi4+0x256>
 8001440:	eb1c 0202 	adds.w	r2, ip, r2
 8001444:	f105 38ff 	add.w	r8, r5, #4294967295
 8001448:	d22f      	bcs.n	80014aa <__udivmoddi4+0x2ae>
 800144a:	4291      	cmp	r1, r2
 800144c:	d92d      	bls.n	80014aa <__udivmoddi4+0x2ae>
 800144e:	3d02      	subs	r5, #2
 8001450:	4462      	add	r2, ip
 8001452:	1a52      	subs	r2, r2, r1
 8001454:	fbb2 f1f7 	udiv	r1, r2, r7
 8001458:	fb07 2211 	mls	r2, r7, r1, r2
 800145c:	b280      	uxth	r0, r0
 800145e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8001462:	fb01 f20e 	mul.w	r2, r1, lr
 8001466:	4282      	cmp	r2, r0
 8001468:	d908      	bls.n	800147c <__udivmoddi4+0x280>
 800146a:	eb1c 0000 	adds.w	r0, ip, r0
 800146e:	f101 38ff 	add.w	r8, r1, #4294967295
 8001472:	d216      	bcs.n	80014a2 <__udivmoddi4+0x2a6>
 8001474:	4282      	cmp	r2, r0
 8001476:	d914      	bls.n	80014a2 <__udivmoddi4+0x2a6>
 8001478:	3902      	subs	r1, #2
 800147a:	4460      	add	r0, ip
 800147c:	1a80      	subs	r0, r0, r2
 800147e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8001482:	e73a      	b.n	80012fa <__udivmoddi4+0xfe>
 8001484:	4631      	mov	r1, r6
 8001486:	4630      	mov	r0, r6
 8001488:	e70b      	b.n	80012a2 <__udivmoddi4+0xa6>
 800148a:	4671      	mov	r1, lr
 800148c:	e6e9      	b.n	8001262 <__udivmoddi4+0x66>
 800148e:	4610      	mov	r0, r2
 8001490:	e6fe      	b.n	8001290 <__udivmoddi4+0x94>
 8001492:	454d      	cmp	r5, r9
 8001494:	d2ab      	bcs.n	80013ee <__udivmoddi4+0x1f2>
 8001496:	ebb9 0802 	subs.w	r8, r9, r2
 800149a:	eb63 0e0c 	sbc.w	lr, r3, ip
 800149e:	3801      	subs	r0, #1
 80014a0:	e7a5      	b.n	80013ee <__udivmoddi4+0x1f2>
 80014a2:	4641      	mov	r1, r8
 80014a4:	e7ea      	b.n	800147c <__udivmoddi4+0x280>
 80014a6:	4603      	mov	r3, r0
 80014a8:	e796      	b.n	80013d8 <__udivmoddi4+0x1dc>
 80014aa:	4645      	mov	r5, r8
 80014ac:	e7d1      	b.n	8001452 <__udivmoddi4+0x256>
 80014ae:	46d0      	mov	r8, sl
 80014b0:	e77d      	b.n	80013ae <__udivmoddi4+0x1b2>
 80014b2:	4464      	add	r4, ip
 80014b4:	3802      	subs	r0, #2
 80014b6:	e749      	b.n	800134c <__udivmoddi4+0x150>
 80014b8:	3d02      	subs	r5, #2
 80014ba:	4462      	add	r2, ip
 80014bc:	e731      	b.n	8001322 <__udivmoddi4+0x126>
 80014be:	4608      	mov	r0, r1
 80014c0:	e70a      	b.n	80012d8 <__udivmoddi4+0xdc>
 80014c2:	4631      	mov	r1, r6
 80014c4:	e6ed      	b.n	80012a2 <__udivmoddi4+0xa6>
 80014c6:	bf00      	nop

080014c8 <__aeabi_idiv0>:
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop

080014cc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014d2:	1d3b      	adds	r3, r7, #4
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80014dc:	4b18      	ldr	r3, [pc, #96]	; (8001540 <MX_ADC1_Init+0x74>)
 80014de:	4a19      	ldr	r2, [pc, #100]	; (8001544 <MX_ADC1_Init+0x78>)
 80014e0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80014e2:	4b17      	ldr	r3, [pc, #92]	; (8001540 <MX_ADC1_Init+0x74>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80014e8:	4b15      	ldr	r3, [pc, #84]	; (8001540 <MX_ADC1_Init+0x74>)
 80014ea:	2201      	movs	r2, #1
 80014ec:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014ee:	4b14      	ldr	r3, [pc, #80]	; (8001540 <MX_ADC1_Init+0x74>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014f4:	4b12      	ldr	r3, [pc, #72]	; (8001540 <MX_ADC1_Init+0x74>)
 80014f6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80014fa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014fc:	4b10      	ldr	r3, [pc, #64]	; (8001540 <MX_ADC1_Init+0x74>)
 80014fe:	2200      	movs	r2, #0
 8001500:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001502:	4b0f      	ldr	r3, [pc, #60]	; (8001540 <MX_ADC1_Init+0x74>)
 8001504:	2201      	movs	r2, #1
 8001506:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001508:	480d      	ldr	r0, [pc, #52]	; (8001540 <MX_ADC1_Init+0x74>)
 800150a:	f001 f839 	bl	8002580 <HAL_ADC_Init>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001514:	f000 fd7f 	bl	8002016 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001518:	2301      	movs	r3, #1
 800151a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800151c:	2301      	movs	r3, #1
 800151e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 8001520:	2304      	movs	r3, #4
 8001522:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001524:	1d3b      	adds	r3, r7, #4
 8001526:	4619      	mov	r1, r3
 8001528:	4805      	ldr	r0, [pc, #20]	; (8001540 <MX_ADC1_Init+0x74>)
 800152a:	f001 f9bb 	bl	80028a4 <HAL_ADC_ConfigChannel>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001534:	f000 fd6f 	bl	8002016 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001538:	bf00      	nop
 800153a:	3710      	adds	r7, #16
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	2000023c 	.word	0x2000023c
 8001544:	40012400 	.word	0x40012400

08001548 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b088      	sub	sp, #32
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001550:	f107 0310 	add.w	r3, r7, #16
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	609a      	str	r2, [r3, #8]
 800155c:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a14      	ldr	r2, [pc, #80]	; (80015b4 <HAL_ADC_MspInit+0x6c>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d121      	bne.n	80015ac <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001568:	4b13      	ldr	r3, [pc, #76]	; (80015b8 <HAL_ADC_MspInit+0x70>)
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	4a12      	ldr	r2, [pc, #72]	; (80015b8 <HAL_ADC_MspInit+0x70>)
 800156e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001572:	6193      	str	r3, [r2, #24]
 8001574:	4b10      	ldr	r3, [pc, #64]	; (80015b8 <HAL_ADC_MspInit+0x70>)
 8001576:	699b      	ldr	r3, [r3, #24]
 8001578:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001580:	4b0d      	ldr	r3, [pc, #52]	; (80015b8 <HAL_ADC_MspInit+0x70>)
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	4a0c      	ldr	r2, [pc, #48]	; (80015b8 <HAL_ADC_MspInit+0x70>)
 8001586:	f043 0304 	orr.w	r3, r3, #4
 800158a:	6193      	str	r3, [r2, #24]
 800158c:	4b0a      	ldr	r3, [pc, #40]	; (80015b8 <HAL_ADC_MspInit+0x70>)
 800158e:	699b      	ldr	r3, [r3, #24]
 8001590:	f003 0304 	and.w	r3, r3, #4
 8001594:	60bb      	str	r3, [r7, #8]
 8001596:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = Key_Pin;
 8001598:	2302      	movs	r3, #2
 800159a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800159c:	2303      	movs	r3, #3
 800159e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(Key_GPIO_Port, &GPIO_InitStruct);
 80015a0:	f107 0310 	add.w	r3, r7, #16
 80015a4:	4619      	mov	r1, r3
 80015a6:	4805      	ldr	r0, [pc, #20]	; (80015bc <HAL_ADC_MspInit+0x74>)
 80015a8:	f001 fc1e 	bl	8002de8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80015ac:	bf00      	nop
 80015ae:	3720      	adds	r7, #32
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	40012400 	.word	0x40012400
 80015b8:	40021000 	.word	0x40021000
 80015bc:	40010800 	.word	0x40010800

080015c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b088      	sub	sp, #32
 80015c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c6:	f107 0310 	add.w	r3, r7, #16
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	605a      	str	r2, [r3, #4]
 80015d0:	609a      	str	r2, [r3, #8]
 80015d2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015d4:	4b2e      	ldr	r3, [pc, #184]	; (8001690 <MX_GPIO_Init+0xd0>)
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	4a2d      	ldr	r2, [pc, #180]	; (8001690 <MX_GPIO_Init+0xd0>)
 80015da:	f043 0310 	orr.w	r3, r3, #16
 80015de:	6193      	str	r3, [r2, #24]
 80015e0:	4b2b      	ldr	r3, [pc, #172]	; (8001690 <MX_GPIO_Init+0xd0>)
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	f003 0310 	and.w	r3, r3, #16
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015ec:	4b28      	ldr	r3, [pc, #160]	; (8001690 <MX_GPIO_Init+0xd0>)
 80015ee:	699b      	ldr	r3, [r3, #24]
 80015f0:	4a27      	ldr	r2, [pc, #156]	; (8001690 <MX_GPIO_Init+0xd0>)
 80015f2:	f043 0320 	orr.w	r3, r3, #32
 80015f6:	6193      	str	r3, [r2, #24]
 80015f8:	4b25      	ldr	r3, [pc, #148]	; (8001690 <MX_GPIO_Init+0xd0>)
 80015fa:	699b      	ldr	r3, [r3, #24]
 80015fc:	f003 0320 	and.w	r3, r3, #32
 8001600:	60bb      	str	r3, [r7, #8]
 8001602:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001604:	4b22      	ldr	r3, [pc, #136]	; (8001690 <MX_GPIO_Init+0xd0>)
 8001606:	699b      	ldr	r3, [r3, #24]
 8001608:	4a21      	ldr	r2, [pc, #132]	; (8001690 <MX_GPIO_Init+0xd0>)
 800160a:	f043 0304 	orr.w	r3, r3, #4
 800160e:	6193      	str	r3, [r2, #24]
 8001610:	4b1f      	ldr	r3, [pc, #124]	; (8001690 <MX_GPIO_Init+0xd0>)
 8001612:	699b      	ldr	r3, [r3, #24]
 8001614:	f003 0304 	and.w	r3, r3, #4
 8001618:	607b      	str	r3, [r7, #4]
 800161a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800161c:	4b1c      	ldr	r3, [pc, #112]	; (8001690 <MX_GPIO_Init+0xd0>)
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	4a1b      	ldr	r2, [pc, #108]	; (8001690 <MX_GPIO_Init+0xd0>)
 8001622:	f043 0308 	orr.w	r3, r3, #8
 8001626:	6193      	str	r3, [r2, #24]
 8001628:	4b19      	ldr	r3, [pc, #100]	; (8001690 <MX_GPIO_Init+0xd0>)
 800162a:	699b      	ldr	r3, [r3, #24]
 800162c:	f003 0308 	and.w	r3, r3, #8
 8001630:	603b      	str	r3, [r7, #0]
 8001632:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MPU_SCL_Pin|MPU_SDA_Pin|ROM_IN_Pin, GPIO_PIN_SET);
 8001634:	2201      	movs	r2, #1
 8001636:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800163a:	4816      	ldr	r0, [pc, #88]	; (8001694 <MX_GPIO_Init+0xd4>)
 800163c:	f001 fd6f 	bl	800311e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TV_CS_Pin|TV_RESET_Pin|TV_RS_Pin|TV_SDA_Pin
 8001640:	2201      	movs	r2, #1
 8001642:	f64e 4107 	movw	r1, #60423	; 0xec07
 8001646:	4814      	ldr	r0, [pc, #80]	; (8001698 <MX_GPIO_Init+0xd8>)
 8001648:	f001 fd69 	bl	800311e <HAL_GPIO_WritePin>
                          |TV_SCLK_Pin|ROM_CS_Pin|ROM_SCK_Pin|ROM_OUT_Pin, GPIO_PIN_SET);

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = MPU_SCL_Pin|MPU_SDA_Pin|ROM_IN_Pin;
 800164c:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001650:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001652:	2301      	movs	r3, #1
 8001654:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001656:	2300      	movs	r3, #0
 8001658:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800165a:	2303      	movs	r3, #3
 800165c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800165e:	f107 0310 	add.w	r3, r7, #16
 8001662:	4619      	mov	r1, r3
 8001664:	480b      	ldr	r0, [pc, #44]	; (8001694 <MX_GPIO_Init+0xd4>)
 8001666:	f001 fbbf 	bl	8002de8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = TV_CS_Pin|TV_RESET_Pin|TV_RS_Pin|TV_SDA_Pin
 800166a:	f64e 4307 	movw	r3, #60423	; 0xec07
 800166e:	613b      	str	r3, [r7, #16]
                          |TV_SCLK_Pin|ROM_CS_Pin|ROM_SCK_Pin|ROM_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001670:	2301      	movs	r3, #1
 8001672:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001674:	2300      	movs	r3, #0
 8001676:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001678:	2303      	movs	r3, #3
 800167a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800167c:	f107 0310 	add.w	r3, r7, #16
 8001680:	4619      	mov	r1, r3
 8001682:	4805      	ldr	r0, [pc, #20]	; (8001698 <MX_GPIO_Init+0xd8>)
 8001684:	f001 fbb0 	bl	8002de8 <HAL_GPIO_Init>

}
 8001688:	bf00      	nop
 800168a:	3720      	adds	r7, #32
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	40021000 	.word	0x40021000
 8001694:	40010800 	.word	0x40010800
 8001698:	40010c00 	.word	0x40010c00

0800169c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800169c:	b5b0      	push	{r4, r5, r7, lr}
 800169e:	b0a2      	sub	sp, #136	; 0x88
 80016a0:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	char PitchData[17] = {0};
 80016a2:	2300      	movs	r3, #0
 80016a4:	667b      	str	r3, [r7, #100]	; 0x64
 80016a6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	605a      	str	r2, [r3, #4]
 80016b0:	609a      	str	r2, [r3, #8]
 80016b2:	731a      	strb	r2, [r3, #12]
	char  RollData[17] = {0};
 80016b4:	2300      	movs	r3, #0
 80016b6:	653b      	str	r3, [r7, #80]	; 0x50
 80016b8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	609a      	str	r2, [r3, #8]
 80016c4:	731a      	strb	r2, [r3, #12]
	char   YawData[17] = {0};
 80016c6:	2300      	movs	r3, #0
 80016c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016ca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	605a      	str	r2, [r3, #4]
 80016d4:	609a      	str	r2, [r3, #8]
 80016d6:	731a      	strb	r2, [r3, #12]
	char CurrentTime[17] = {0};
 80016d8:	2300      	movs	r3, #0
 80016da:	62bb      	str	r3, [r7, #40]	; 0x28
 80016dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	605a      	str	r2, [r3, #4]
 80016e6:	609a      	str	r2, [r3, #8]
 80016e8:	731a      	strb	r2, [r3, #12]
	char Step[17] = {0};
 80016ea:	2300      	movs	r3, #0
 80016ec:	617b      	str	r3, [r7, #20]
 80016ee:	f107 0318 	add.w	r3, r7, #24
 80016f2:	2200      	movs	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]
 80016f6:	605a      	str	r2, [r3, #4]
 80016f8:	609a      	str	r2, [r3, #8]
 80016fa:	731a      	strb	r2, [r3, #12]
	float pitch = 0, roll = 0,yaw = 0;
 80016fc:	f04f 0300 	mov.w	r3, #0
 8001700:	613b      	str	r3, [r7, #16]
 8001702:	f04f 0300 	mov.w	r3, #0
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	f04f 0300 	mov.w	r3, #0
 800170c:	60bb      	str	r3, [r7, #8]
	uint8_t page = 0;
 800170e:	2300      	movs	r3, #0
 8001710:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001714:	f000 fed2 	bl	80024bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001718:	f000 f924 	bl	8001964 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800171c:	f7ff ff50 	bl	80015c0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001720:	f7ff fed4 	bl	80014cc <MX_ADC1_Init>
  MX_RTC_Init();
 8001724:	f000 fc7c 	bl	8002020 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8001728:	f000 fe1a 	bl	8002360 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 800172c:	487d      	ldr	r0, [pc, #500]	; (8001924 <main+0x288>)
 800172e:	f000 ffff 	bl	8002730 <HAL_ADC_Start>
  MPU_Init();
 8001732:	f003 fd89 	bl	8005248 <MPU_Init>

  while(mpu_dmp_init())
 8001736:	e005      	b.n	8001744 <main+0xa8>
  {
	  HAL_msDelay(200);
 8001738:	20c8      	movs	r0, #200	; 0xc8
 800173a:	f000 fc53 	bl	8001fe4 <HAL_msDelay>
	  printf("mpu6050 error\r\n");
 800173e:	487a      	ldr	r0, [pc, #488]	; (8001928 <main+0x28c>)
 8001740:	f008 f97e 	bl	8009a40 <puts>
  while(mpu_dmp_init())
 8001744:	f006 f954 	bl	80079f0 <mpu_dmp_init>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d1f4      	bne.n	8001738 <main+0x9c>
  };
  HAL_msDelay(200);
 800174e:	20c8      	movs	r0, #200	; 0xc8
 8001750:	f000 fc48 	bl	8001fe4 <HAL_msDelay>
  initial_lcd();
 8001754:	f003 fb08 	bl	8004d68 <initial_lcd>

  HAL_msDelay(200);
 8001758:	20c8      	movs	r0, #200	; 0xc8
 800175a:	f000 fc43 	bl	8001fe4 <HAL_msDelay>
  clear_screen();
 800175e:	f003 fb68 	bl	8004e32 <clear_screen>
  {
//	  clear_screen(); //clear all dots
//	  display_128x64(bmp1);
//	  HAL_msDelay(4000);

	  if(HAL_ADC_GetValue(&hadc1) < 200)
 8001762:	4870      	ldr	r0, [pc, #448]	; (8001924 <main+0x288>)
 8001764:	f001 f892 	bl	800288c <HAL_ADC_GetValue>
 8001768:	4603      	mov	r3, r0
 800176a:	2bc7      	cmp	r3, #199	; 0xc7
 800176c:	d80e      	bhi.n	800178c <main+0xf0>
	  {
		  HAL_msDelay(100);
 800176e:	2064      	movs	r0, #100	; 0x64
 8001770:	f000 fc38 	bl	8001fe4 <HAL_msDelay>
		  if(HAL_ADC_GetValue(&hadc1) < 200)
 8001774:	486b      	ldr	r0, [pc, #428]	; (8001924 <main+0x288>)
 8001776:	f001 f889 	bl	800288c <HAL_ADC_GetValue>
 800177a:	4603      	mov	r3, r0
 800177c:	2bc7      	cmp	r3, #199	; 0xc7
 800177e:	d81b      	bhi.n	80017b8 <main+0x11c>
		  {
			  page = 1;
 8001780:	2301      	movs	r3, #1
 8001782:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			  clear_screen();
 8001786:	f003 fb54 	bl	8004e32 <clear_screen>
 800178a:	e015      	b.n	80017b8 <main+0x11c>
		  }
	  }
	  else if(HAL_ADC_GetValue(&hadc1) > 4000)
 800178c:	4865      	ldr	r0, [pc, #404]	; (8001924 <main+0x288>)
 800178e:	f001 f87d 	bl	800288c <HAL_ADC_GetValue>
 8001792:	4603      	mov	r3, r0
 8001794:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001798:	d90e      	bls.n	80017b8 <main+0x11c>
	  {
		  HAL_msDelay(100);
 800179a:	2064      	movs	r0, #100	; 0x64
 800179c:	f000 fc22 	bl	8001fe4 <HAL_msDelay>
		  if(HAL_ADC_GetValue(&hadc1) > 4000)
 80017a0:	4860      	ldr	r0, [pc, #384]	; (8001924 <main+0x288>)
 80017a2:	f001 f873 	bl	800288c <HAL_ADC_GetValue>
 80017a6:	4603      	mov	r3, r0
 80017a8:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80017ac:	d904      	bls.n	80017b8 <main+0x11c>
		  {
			  page = 0;
 80017ae:	2300      	movs	r3, #0
 80017b0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			  clear_screen();
 80017b4:	f003 fb3d 	bl	8004e32 <clear_screen>
		  }
	  }

	  HAL_RTC_GetTime(&hrtc, &RtcTime, RTC_FORMAT_BCD);
 80017b8:	463b      	mov	r3, r7
 80017ba:	2201      	movs	r2, #1
 80017bc:	4619      	mov	r1, r3
 80017be:	485b      	ldr	r0, [pc, #364]	; (800192c <main+0x290>)
 80017c0:	f002 fb72 	bl	8003ea8 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &RtcDate, RTC_FORMAT_BCD);
 80017c4:	1d3b      	adds	r3, r7, #4
 80017c6:	2201      	movs	r2, #1
 80017c8:	4619      	mov	r1, r3
 80017ca:	4858      	ldr	r0, [pc, #352]	; (800192c <main+0x290>)
 80017cc:	f002 fcfa 	bl	80041c4 <HAL_RTC_GetDate>

	  switch(page)
 80017d0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d060      	beq.n	800189a <main+0x1fe>
 80017d8:	2b01      	cmp	r3, #1
 80017da:	f040 8091 	bne.w	8001900 <main+0x264>
	  {
		  case 1:
			  if(mpu_dmp_get_data(&pitch,&roll,&yaw) == 0)
 80017de:	f107 0208 	add.w	r2, r7, #8
 80017e2:	f107 010c 	add.w	r1, r7, #12
 80017e6:	f107 0310 	add.w	r3, r7, #16
 80017ea:	4618      	mov	r0, r3
 80017ec:	f006 f974 	bl	8007ad8 <mpu_dmp_get_data>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	f040 8083 	bne.w	80018fe <main+0x262>
			  {
				  sprintf(PitchData,"PitchData:%5.2lf",pitch);
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7fe fe14 	bl	8000428 <__aeabi_f2d>
 8001800:	4602      	mov	r2, r0
 8001802:	460b      	mov	r3, r1
 8001804:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8001808:	4949      	ldr	r1, [pc, #292]	; (8001930 <main+0x294>)
 800180a:	f008 f921 	bl	8009a50 <siprintf>
				  sprintf(RollData, "Roll Data:%5.1lf",roll);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	4618      	mov	r0, r3
 8001812:	f7fe fe09 	bl	8000428 <__aeabi_f2d>
 8001816:	4602      	mov	r2, r0
 8001818:	460b      	mov	r3, r1
 800181a:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800181e:	4945      	ldr	r1, [pc, #276]	; (8001934 <main+0x298>)
 8001820:	f008 f916 	bl	8009a50 <siprintf>
				  sprintf(YawData,  "Yaw  Data:%5.1lf",yaw);
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	4618      	mov	r0, r3
 8001828:	f7fe fdfe 	bl	8000428 <__aeabi_f2d>
 800182c:	4602      	mov	r2, r0
 800182e:	460b      	mov	r3, r1
 8001830:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8001834:	4940      	ldr	r1, [pc, #256]	; (8001938 <main+0x29c>)
 8001836:	f008 f90b 	bl	8009a50 <siprintf>
				  display_GB2312_string(1,1,(uchar *)"MPU6050 Data:---");
 800183a:	4a40      	ldr	r2, [pc, #256]	; (800193c <main+0x2a0>)
 800183c:	2101      	movs	r1, #1
 800183e:	2001      	movs	r0, #1
 8001840:	f003 fc3c 	bl	80050bc <display_GB2312_string>
				  display_GB2312_string(3,1,(uchar *)PitchData);
 8001844:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001848:	461a      	mov	r2, r3
 800184a:	2101      	movs	r1, #1
 800184c:	2003      	movs	r0, #3
 800184e:	f003 fc35 	bl	80050bc <display_GB2312_string>
				  display_GB2312_string(5,1,(uchar *)RollData);
 8001852:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001856:	461a      	mov	r2, r3
 8001858:	2101      	movs	r1, #1
 800185a:	2005      	movs	r0, #5
 800185c:	f003 fc2e 	bl	80050bc <display_GB2312_string>
				  display_GB2312_string(7,1,(uchar *)YawData);
 8001860:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001864:	461a      	mov	r2, r3
 8001866:	2101      	movs	r1, #1
 8001868:	2007      	movs	r0, #7
 800186a:	f003 fc27 	bl	80050bc <display_GB2312_string>
//				  printf("%lf %lf %lf\r\n",pitch,roll,yaw);
				  memset(PitchData,0,sizeof(PitchData));
 800186e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001872:	2211      	movs	r2, #17
 8001874:	2100      	movs	r1, #0
 8001876:	4618      	mov	r0, r3
 8001878:	f008 f9f2 	bl	8009c60 <memset>
				  memset(RollData,0,sizeof(RollData));
 800187c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001880:	2211      	movs	r2, #17
 8001882:	2100      	movs	r1, #0
 8001884:	4618      	mov	r0, r3
 8001886:	f008 f9eb 	bl	8009c60 <memset>
				  memset(YawData,0,sizeof(YawData));
 800188a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800188e:	2211      	movs	r2, #17
 8001890:	2100      	movs	r1, #0
 8001892:	4618      	mov	r0, r3
 8001894:	f008 f9e4 	bl	8009c60 <memset>
			  }
			  break;
 8001898:	e031      	b.n	80018fe <main+0x262>
		  case 0:
			  sprintf(Step,        "           %5ld",step_cnt);
 800189a:	4b29      	ldr	r3, [pc, #164]	; (8001940 <main+0x2a4>)
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	f107 0314 	add.w	r3, r7, #20
 80018a2:	4928      	ldr	r1, [pc, #160]	; (8001944 <main+0x2a8>)
 80018a4:	4618      	mov	r0, r3
 80018a6:	f008 f8d3 	bl	8009a50 <siprintf>
			  sprintf(CurrentTime, " %2x-%2x  %2x:%2x:%2x",RtcDate.Month,RtcDate.Date,RtcTime.Hours,RtcTime.Minutes,RtcTime.Seconds);
 80018aa:	797b      	ldrb	r3, [r7, #5]
 80018ac:	461c      	mov	r4, r3
 80018ae:	79bb      	ldrb	r3, [r7, #6]
 80018b0:	461d      	mov	r5, r3
 80018b2:	783b      	ldrb	r3, [r7, #0]
 80018b4:	787a      	ldrb	r2, [r7, #1]
 80018b6:	78b9      	ldrb	r1, [r7, #2]
 80018b8:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80018bc:	9102      	str	r1, [sp, #8]
 80018be:	9201      	str	r2, [sp, #4]
 80018c0:	9300      	str	r3, [sp, #0]
 80018c2:	462b      	mov	r3, r5
 80018c4:	4622      	mov	r2, r4
 80018c6:	4920      	ldr	r1, [pc, #128]	; (8001948 <main+0x2ac>)
 80018c8:	f008 f8c2 	bl	8009a50 <siprintf>

			  display_GB2312_string(1,1,(uchar *)"CurrentTime:----");
 80018cc:	4a1f      	ldr	r2, [pc, #124]	; (800194c <main+0x2b0>)
 80018ce:	2101      	movs	r1, #1
 80018d0:	2001      	movs	r0, #1
 80018d2:	f003 fbf3 	bl	80050bc <display_GB2312_string>
			  display_GB2312_string(3,1,(uchar *)CurrentTime);
 80018d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018da:	461a      	mov	r2, r3
 80018dc:	2101      	movs	r1, #1
 80018de:	2003      	movs	r0, #3
 80018e0:	f003 fbec 	bl	80050bc <display_GB2312_string>
			  display_GB2312_string(5,1,(uchar *)"       Step:----");
 80018e4:	4a1a      	ldr	r2, [pc, #104]	; (8001950 <main+0x2b4>)
 80018e6:	2101      	movs	r1, #1
 80018e8:	2005      	movs	r0, #5
 80018ea:	f003 fbe7 	bl	80050bc <display_GB2312_string>
			  display_GB2312_string(7,1,(uchar *)Step);
 80018ee:	f107 0314 	add.w	r3, r7, #20
 80018f2:	461a      	mov	r2, r3
 80018f4:	2101      	movs	r1, #1
 80018f6:	2007      	movs	r0, #7
 80018f8:	f003 fbe0 	bl	80050bc <display_GB2312_string>
 80018fc:	e000      	b.n	8001900 <main+0x264>
			  break;
 80018fe:	bf00      	nop
//			  printf("data : %d\r\n",RtcDate.Date);
	  }

	  filter_calculate(&filter, &sample);
 8001900:	4914      	ldr	r1, [pc, #80]	; (8001954 <main+0x2b8>)
 8001902:	4815      	ldr	r0, [pc, #84]	; (8001958 <main+0x2bc>)
 8001904:	f000 f88e 	bl	8001a24 <filter_calculate>
	  peak_update(&peak, &sample);
 8001908:	4912      	ldr	r1, [pc, #72]	; (8001954 <main+0x2b8>)
 800190a:	4814      	ldr	r0, [pc, #80]	; (800195c <main+0x2c0>)
 800190c:	f000 f918 	bl	8001b40 <peak_update>
	  slid_update(&slid, &sample);
 8001910:	4910      	ldr	r1, [pc, #64]	; (8001954 <main+0x2b8>)
 8001912:	4813      	ldr	r0, [pc, #76]	; (8001960 <main+0x2c4>)
 8001914:	f000 f984 	bl	8001c20 <slid_update>
	  detect_step(&peak, &slid, &sample);
 8001918:	4a0e      	ldr	r2, [pc, #56]	; (8001954 <main+0x2b8>)
 800191a:	4911      	ldr	r1, [pc, #68]	; (8001960 <main+0x2c4>)
 800191c:	480f      	ldr	r0, [pc, #60]	; (800195c <main+0x2c0>)
 800191e:	f000 fa99 	bl	8001e54 <detect_step>
	  if(HAL_ADC_GetValue(&hadc1) < 200)
 8001922:	e71e      	b.n	8001762 <main+0xc6>
 8001924:	2000023c 	.word	0x2000023c
 8001928:	0800c7f0 	.word	0x0800c7f0
 800192c:	200002bc 	.word	0x200002bc
 8001930:	0800c800 	.word	0x0800c800
 8001934:	0800c814 	.word	0x0800c814
 8001938:	0800c828 	.word	0x0800c828
 800193c:	0800c83c 	.word	0x0800c83c
 8001940:	2000026c 	.word	0x2000026c
 8001944:	0800c850 	.word	0x0800c850
 8001948:	0800c860 	.word	0x0800c860
 800194c:	0800c878 	.word	0x0800c878
 8001950:	0800c88c 	.word	0x0800c88c
 8001954:	2000028c 	.word	0x2000028c
 8001958:	20000270 	.word	0x20000270
 800195c:	20000294 	.word	0x20000294
 8001960:	200002ac 	.word	0x200002ac

08001964 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b094      	sub	sp, #80	; 0x50
 8001968:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800196a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800196e:	2228      	movs	r2, #40	; 0x28
 8001970:	2100      	movs	r1, #0
 8001972:	4618      	mov	r0, r3
 8001974:	f008 f974 	bl	8009c60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001978:	f107 0314 	add.w	r3, r7, #20
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	605a      	str	r2, [r3, #4]
 8001982:	609a      	str	r2, [r3, #8]
 8001984:	60da      	str	r2, [r3, #12]
 8001986:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001988:	1d3b      	adds	r3, r7, #4
 800198a:	2200      	movs	r2, #0
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	605a      	str	r2, [r3, #4]
 8001990:	609a      	str	r2, [r3, #8]
 8001992:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001994:	2305      	movs	r3, #5
 8001996:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001998:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800199c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800199e:	2300      	movs	r3, #0
 80019a0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80019a2:	2301      	movs	r3, #1
 80019a4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019a6:	2301      	movs	r3, #1
 80019a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019aa:	2302      	movs	r3, #2
 80019ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80019b4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80019b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019be:	4618      	mov	r0, r3
 80019c0:	f001 fbd2 	bl	8003168 <HAL_RCC_OscConfig>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80019ca:	f000 fb24 	bl	8002016 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019ce:	230f      	movs	r3, #15
 80019d0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019d2:	2302      	movs	r3, #2
 80019d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019d6:	2300      	movs	r3, #0
 80019d8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019de:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019e0:	2300      	movs	r3, #0
 80019e2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019e4:	f107 0314 	add.w	r3, r7, #20
 80019e8:	2102      	movs	r1, #2
 80019ea:	4618      	mov	r0, r3
 80019ec:	f001 fe3e 	bl	800366c <HAL_RCC_ClockConfig>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <SystemClock_Config+0x96>
  {
    Error_Handler();
 80019f6:	f000 fb0e 	bl	8002016 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 80019fa:	2303      	movs	r3, #3
 80019fc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80019fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a02:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8001a04:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001a08:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a0a:	1d3b      	adds	r3, r7, #4
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f001 ffbb 	bl	8003988 <HAL_RCCEx_PeriphCLKConfig>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001a18:	f000 fafd 	bl	8002016 <Error_Handler>
  }
}
 8001a1c:	bf00      	nop
 8001a1e:	3750      	adds	r7, #80	; 0x50
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <filter_calculate>:

/* USER CODE BEGIN 4 */

//读�?�xyz数�?�存入�?�值滤波器，存满进行计算，滤波�?�样本存入sample,如何读�?�存满就�?多说了。
static void filter_calculate(filter_avg_t *filter, axis_info_t *sample)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
	unsigned int i = 0;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	617b      	str	r3, [r7, #20]
	unsigned char j = 0;
 8001a32:	2300      	movs	r3, #0
 8001a34:	74fb      	strb	r3, [r7, #19]
	short x_sum = 0, y_sum = 0, z_sum = 0;
 8001a36:	2300      	movs	r3, #0
 8001a38:	823b      	strh	r3, [r7, #16]
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	81fb      	strh	r3, [r7, #14]
 8001a3e:	2300      	movs	r3, #0
 8001a40:	81bb      	strh	r3, [r7, #12]
	filter->count = FILTER_CNT;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2204      	movs	r2, #4
 8001a46:	761a      	strb	r2, [r3, #24]
	for (i = 0; i < FILTER_CNT; i++) {
 8001a48:	2300      	movs	r3, #0
 8001a4a:	617b      	str	r3, [r7, #20]
 8001a4c:	e056      	b.n	8001afc <filter_calculate+0xd8>
		while(MPU_Get_Accelerometer(&filter->info[i].x,&filter->info[i].y,&filter->info[i].z))
		{
			HAL_usDelay(100);
 8001a4e:	2064      	movs	r0, #100	; 0x64
 8001a50:	f000 fa88 	bl	8001f64 <HAL_usDelay>
			j++;
 8001a54:	7cfb      	ldrb	r3, [r7, #19]
 8001a56:	3301      	adds	r3, #1
 8001a58:	74fb      	strb	r3, [r7, #19]
			if(j > 20)
 8001a5a:	7cfb      	ldrb	r3, [r7, #19]
 8001a5c:	2b14      	cmp	r3, #20
 8001a5e:	d81d      	bhi.n	8001a9c <filter_calculate+0x78>
		while(MPU_Get_Accelerometer(&filter->info[i].x,&filter->info[i].y,&filter->info[i].z))
 8001a60:	697a      	ldr	r2, [r7, #20]
 8001a62:	4613      	mov	r3, r2
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	4413      	add	r3, r2
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	18d0      	adds	r0, r2, r3
 8001a6e:	697a      	ldr	r2, [r7, #20]
 8001a70:	4613      	mov	r3, r2
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	4413      	add	r3, r2
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	1c99      	adds	r1, r3, #2
 8001a7e:	697a      	ldr	r2, [r7, #20]
 8001a80:	4613      	mov	r3, r2
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	4413      	add	r3, r2
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	3304      	adds	r3, #4
 8001a8e:	461a      	mov	r2, r3
 8001a90:	f003 fc9b 	bl	80053ca <MPU_Get_Accelerometer>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d1d9      	bne.n	8001a4e <filter_calculate+0x2a>
 8001a9a:	e000      	b.n	8001a9e <filter_calculate+0x7a>
				break;
 8001a9c:	bf00      	nop
		}
		x_sum += filter->info[i].x;
 8001a9e:	6879      	ldr	r1, [r7, #4]
 8001aa0:	697a      	ldr	r2, [r7, #20]
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	4413      	add	r3, r2
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	440b      	add	r3, r1
 8001aac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ab0:	b29a      	uxth	r2, r3
 8001ab2:	8a3b      	ldrh	r3, [r7, #16]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	823b      	strh	r3, [r7, #16]
		y_sum += filter->info[i].y;
 8001aba:	6879      	ldr	r1, [r7, #4]
 8001abc:	697a      	ldr	r2, [r7, #20]
 8001abe:	4613      	mov	r3, r2
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	4413      	add	r3, r2
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	440b      	add	r3, r1
 8001ac8:	3302      	adds	r3, #2
 8001aca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ace:	b29a      	uxth	r2, r3
 8001ad0:	89fb      	ldrh	r3, [r7, #14]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	81fb      	strh	r3, [r7, #14]
		z_sum += filter->info[i].z;
 8001ad8:	6879      	ldr	r1, [r7, #4]
 8001ada:	697a      	ldr	r2, [r7, #20]
 8001adc:	4613      	mov	r3, r2
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	4413      	add	r3, r2
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	440b      	add	r3, r1
 8001ae6:	3304      	adds	r3, #4
 8001ae8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aec:	b29a      	uxth	r2, r3
 8001aee:	89bb      	ldrh	r3, [r7, #12]
 8001af0:	4413      	add	r3, r2
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < FILTER_CNT; i++) {
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	3301      	adds	r3, #1
 8001afa:	617b      	str	r3, [r7, #20]
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	2b03      	cmp	r3, #3
 8001b00:	d9ae      	bls.n	8001a60 <filter_calculate+0x3c>
	}
	sample->x = x_sum / FILTER_CNT;
 8001b02:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	da00      	bge.n	8001b0c <filter_calculate+0xe8>
 8001b0a:	3303      	adds	r3, #3
 8001b0c:	109b      	asrs	r3, r3, #2
 8001b0e:	b21a      	sxth	r2, r3
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	801a      	strh	r2, [r3, #0]
	sample->y = y_sum / FILTER_CNT;
 8001b14:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	da00      	bge.n	8001b1e <filter_calculate+0xfa>
 8001b1c:	3303      	adds	r3, #3
 8001b1e:	109b      	asrs	r3, r3, #2
 8001b20:	b21a      	sxth	r2, r3
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	805a      	strh	r2, [r3, #2]
	sample->z = z_sum / FILTER_CNT;
 8001b26:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	da00      	bge.n	8001b30 <filter_calculate+0x10c>
 8001b2e:	3303      	adds	r3, #3
 8001b30:	109b      	asrs	r3, r3, #2
 8001b32:	b21a      	sxth	r2, r3
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	809a      	strh	r2, [r3, #4]
}
 8001b38:	bf00      	nop
 8001b3a:	3718      	adds	r7, #24
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <peak_update>:
//	peak->newmin.z = z;
//}

//在动�?阈值结构体�?始化时，一定�?将max的值都赋值为最�?值，min赋值为最大值，这样�?有利于动�?更新。
static void peak_update(peak_value_t *peak, axis_info_t *cur_sample)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
  	static unsigned int sample_size = 0;
    sample_size ++;
 8001b4a:	4b34      	ldr	r3, [pc, #208]	; (8001c1c <peak_update+0xdc>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	3301      	adds	r3, #1
 8001b50:	4a32      	ldr	r2, [pc, #200]	; (8001c1c <peak_update+0xdc>)
 8001b52:	6013      	str	r3, [r2, #0]
	if (sample_size > SAMPLE_SIZE) {
 8001b54:	4b31      	ldr	r3, [pc, #196]	; (8001c1c <peak_update+0xdc>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2b32      	cmp	r3, #50	; 0x32
 8001b5a:	d911      	bls.n	8001b80 <peak_update+0x40>
		/*采样达到50个，更新一次*/
		sample_size = 1;
 8001b5c:	4b2f      	ldr	r3, [pc, #188]	; (8001c1c <peak_update+0xdc>)
 8001b5e:	2201      	movs	r2, #1
 8001b60:	601a      	str	r2, [r3, #0]
		peak->oldmax = peak->newmax;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	330c      	adds	r3, #12
 8001b68:	6811      	ldr	r1, [r2, #0]
 8001b6a:	6019      	str	r1, [r3, #0]
 8001b6c:	8892      	ldrh	r2, [r2, #4]
 8001b6e:	809a      	strh	r2, [r3, #4]
		peak->oldmin = peak->newmin;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	3312      	adds	r3, #18
 8001b76:	3206      	adds	r2, #6
 8001b78:	6811      	ldr	r1, [r2, #0]
 8001b7a:	6019      	str	r1, [r3, #0]
 8001b7c:	8892      	ldrh	r2, [r2, #4]
 8001b7e:	809a      	strh	r2, [r3, #4]
      	//�?始化
//      	peak_value_init(peak);
	}
	peak->newmax.x = MAX(peak->newmax.x, cur_sample->x);
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	bfb8      	it	lt
 8001b90:	4613      	movlt	r3, r2
 8001b92:	b21a      	sxth	r2, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	801a      	strh	r2, [r3, #0]
	peak->newmax.y = MAX(peak->newmax.y, cur_sample->y);
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	bfb8      	it	lt
 8001ba8:	4613      	movlt	r3, r2
 8001baa:	b21a      	sxth	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	805a      	strh	r2, [r3, #2]
	peak->newmax.z = MAX(peak->newmax.z, cur_sample->z);
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	bfb8      	it	lt
 8001bc0:	4613      	movlt	r3, r2
 8001bc2:	b21a      	sxth	r2, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	809a      	strh	r2, [r3, #4]

	peak->newmin.x = MIN(peak->newmin.x, cur_sample->x);
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	bfa8      	it	ge
 8001bd8:	4613      	movge	r3, r2
 8001bda:	b21a      	sxth	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	80da      	strh	r2, [r3, #6]
	peak->newmin.y = MIN(peak->newmin.y, cur_sample->y);
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001bec:	4293      	cmp	r3, r2
 8001bee:	bfa8      	it	ge
 8001bf0:	4613      	movge	r3, r2
 8001bf2:	b21a      	sxth	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	811a      	strh	r2, [r3, #8]
	peak->newmin.z = MIN(peak->newmin.z, cur_sample->z);
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001c04:	4293      	cmp	r3, r2
 8001c06:	bfa8      	it	ge
 8001c08:	4613      	movge	r3, r2
 8001c0a:	b21a      	sxth	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	815a      	strh	r2, [r3, #10]
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bc80      	pop	{r7}
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	200002b8 	.word	0x200002b8

08001c20 <slid_update>:

static char slid_update(slid_reg_t *slid, axis_info_t *cur_sample)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	6039      	str	r1, [r7, #0]
  	char res = 0;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	73fb      	strb	r3, [r7, #15]
  	if (ABS((cur_sample->x - slid->new_sample.x)) > DYNAMIC_PRECISION) {
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c34:	461a      	mov	r2, r3
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	dd0b      	ble.n	8001c5a <slid_update+0x3a>
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	bf14      	ite	ne
 8001c52:	2301      	movne	r3, #1
 8001c54:	2300      	moveq	r3, #0
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	e00c      	b.n	8001c74 <slid_update+0x54>
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c60:	461a      	mov	r2, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b1e      	cmp	r3, #30
 8001c6c:	bfcc      	ite	gt
 8001c6e:	2301      	movgt	r3, #1
 8001c70:	2300      	movle	r3, #0
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d00c      	beq.n	8001c92 <slid_update+0x72>
		slid->old_sample.x = slid->new_sample.x;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	80da      	strh	r2, [r3, #6]
		slid->new_sample.x = cur_sample->x;
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	801a      	strh	r2, [r3, #0]
		res = 1;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	73fb      	strb	r3, [r7, #15]
 8001c90:	e004      	b.n	8001c9c <slid_update+0x7c>
	} else {
		slid->old_sample.x = slid->new_sample.x;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	80da      	strh	r2, [r3, #6]
	}
	if (ABS((cur_sample->y - slid->new_sample.y)) > DYNAMIC_PRECISION) {
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	dd0b      	ble.n	8001cc8 <slid_update+0xa8>
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	bf14      	ite	ne
 8001cc0:	2301      	movne	r3, #1
 8001cc2:	2300      	moveq	r3, #0
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	e00c      	b.n	8001ce2 <slid_update+0xc2>
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001cce:	461a      	mov	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	2b1e      	cmp	r3, #30
 8001cda:	bfcc      	ite	gt
 8001cdc:	2301      	movgt	r3, #1
 8001cde:	2300      	movle	r3, #0
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d00c      	beq.n	8001d00 <slid_update+0xe0>
		slid->old_sample.y = slid->new_sample.y;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	811a      	strh	r2, [r3, #8]
		slid->new_sample.y = cur_sample->y;
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	805a      	strh	r2, [r3, #2]
		res = 1;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	73fb      	strb	r3, [r7, #15]
 8001cfe:	e004      	b.n	8001d0a <slid_update+0xea>
	} else {
		slid->old_sample.y = slid->new_sample.y;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	811a      	strh	r2, [r3, #8]
	}

	if (ABS((cur_sample->z - slid->new_sample.z)) > DYNAMIC_PRECISION) {
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001d10:	461a      	mov	r2, r3
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	dd0b      	ble.n	8001d36 <slid_update+0x116>
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	bf14      	ite	ne
 8001d2e:	2301      	movne	r3, #1
 8001d30:	2300      	moveq	r3, #0
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	e00c      	b.n	8001d50 <slid_update+0x130>
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b1e      	cmp	r3, #30
 8001d48:	bfcc      	ite	gt
 8001d4a:	2301      	movgt	r3, #1
 8001d4c:	2300      	movle	r3, #0
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d00c      	beq.n	8001d6e <slid_update+0x14e>
		slid->old_sample.z = slid->new_sample.z;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	815a      	strh	r2, [r3, #10]
		slid->new_sample.z = cur_sample->z;
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	809a      	strh	r2, [r3, #4]
		res = 1;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	73fb      	strb	r3, [r7, #15]
 8001d6c:	e004      	b.n	8001d78 <slid_update+0x158>
	} else {
		slid->old_sample.z = slid->new_sample.z;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	815a      	strh	r2, [r3, #10]
	}
	return res;
 8001d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3714      	adds	r7, #20
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bc80      	pop	{r7}
 8001d82:	4770      	bx	lr

08001d84 <is_most_active>:

/*判断当�?最活跃轴*/
static char is_most_active(peak_value_t *peak)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
	char res = MOST_ACTIVE_NULL;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	73fb      	strb	r3, [r7, #15]
	short x_change = ABS((peak->newmax.x - peak->newmin.x));
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001d96:	461a      	mov	r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	bfb8      	it	lt
 8001da4:	425b      	neglt	r3, r3
 8001da6:	81bb      	strh	r3, [r7, #12]
	short y_change = ABS((peak->newmax.y - peak->newmin.y));
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001dae:	461a      	mov	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	bfb8      	it	lt
 8001dbc:	425b      	neglt	r3, r3
 8001dbe:	817b      	strh	r3, [r7, #10]
	short z_change = ABS((peak->newmax.z - peak->newmin.z));
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	bfb8      	it	lt
 8001dd4:	425b      	neglt	r3, r3
 8001dd6:	813b      	strh	r3, [r7, #8]

	if (x_change > y_change && x_change > z_change && x_change >= ACTIVE_PRECISION) {
 8001dd8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001ddc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	dd0c      	ble.n	8001dfe <is_most_active+0x7a>
 8001de4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001de8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	dd06      	ble.n	8001dfe <is_most_active+0x7a>
 8001df0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001df4:	2b3b      	cmp	r3, #59	; 0x3b
 8001df6:	dd02      	ble.n	8001dfe <is_most_active+0x7a>
		res = MOST_ACTIVE_X;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	73fb      	strb	r3, [r7, #15]
 8001dfc:	e024      	b.n	8001e48 <is_most_active+0xc4>
	} else if (y_change > x_change && y_change > z_change && y_change >= ACTIVE_PRECISION) {
 8001dfe:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001e02:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	dd0c      	ble.n	8001e24 <is_most_active+0xa0>
 8001e0a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001e0e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	dd06      	ble.n	8001e24 <is_most_active+0xa0>
 8001e16:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001e1a:	2b3b      	cmp	r3, #59	; 0x3b
 8001e1c:	dd02      	ble.n	8001e24 <is_most_active+0xa0>
		res = MOST_ACTIVE_Y;
 8001e1e:	2302      	movs	r3, #2
 8001e20:	73fb      	strb	r3, [r7, #15]
 8001e22:	e011      	b.n	8001e48 <is_most_active+0xc4>
	} else if (z_change > x_change && z_change > y_change && z_change >= ACTIVE_PRECISION) {
 8001e24:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001e28:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	dd0b      	ble.n	8001e48 <is_most_active+0xc4>
 8001e30:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001e34:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	dd05      	ble.n	8001e48 <is_most_active+0xc4>
 8001e3c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001e40:	2b3b      	cmp	r3, #59	; 0x3b
 8001e42:	dd01      	ble.n	8001e48 <is_most_active+0xc4>
		res = MOST_ACTIVE_Z;
 8001e44:	2303      	movs	r3, #3
 8001e46:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 8001e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3714      	adds	r7, #20
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bc80      	pop	{r7}
 8001e52:	4770      	bx	lr

08001e54 <detect_step>:

/*判断是�?�走步*/
static void detect_step(peak_value_t *peak, slid_reg_t *slid, axis_info_t *cur_sample)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	607a      	str	r2, [r7, #4]
	char res = is_most_active(peak);
 8001e60:	68f8      	ldr	r0, [r7, #12]
 8001e62:	f7ff ff8f 	bl	8001d84 <is_most_active>
 8001e66:	4603      	mov	r3, r0
 8001e68:	75fb      	strb	r3, [r7, #23]
	switch (res) {
 8001e6a:	7dfb      	ldrb	r3, [r7, #23]
 8001e6c:	2b03      	cmp	r3, #3
 8001e6e:	d86b      	bhi.n	8001f48 <detect_step+0xf4>
 8001e70:	a201      	add	r2, pc, #4	; (adr r2, 8001e78 <detect_step+0x24>)
 8001e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e76:	bf00      	nop
 8001e78:	08001f49 	.word	0x08001f49
 8001e7c:	08001e89 	.word	0x08001e89
 8001e80:	08001ec9 	.word	0x08001ec9
 8001e84:	08001f09 	.word	0x08001f09
		case MOST_ACTIVE_NULL: {
			//fix
			break;
		}
		case MOST_ACTIVE_X: {
			short threshold_x = (peak->oldmax.x + peak->oldmin.x) / 2;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001e8e:	461a      	mov	r2, r3
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001e96:	4413      	add	r3, r2
 8001e98:	0fda      	lsrs	r2, r3, #31
 8001e9a:	4413      	add	r3, r2
 8001e9c:	105b      	asrs	r3, r3, #1
 8001e9e:	823b      	strh	r3, [r7, #16]
			if (slid->old_sample.x > threshold_x && slid->new_sample.x < threshold_x) {
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001ea6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	da4e      	bge.n	8001f4c <detect_step+0xf8>
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eb4:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	dd47      	ble.n	8001f4c <detect_step+0xf8>
				step_cnt ++;
 8001ebc:	4b28      	ldr	r3, [pc, #160]	; (8001f60 <detect_step+0x10c>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	4a27      	ldr	r2, [pc, #156]	; (8001f60 <detect_step+0x10c>)
 8001ec4:	6013      	str	r3, [r2, #0]
			}
			break;
 8001ec6:	e041      	b.n	8001f4c <detect_step+0xf8>
		}
		case MOST_ACTIVE_Y: {
			short threshold_y = (peak->oldmax.y + peak->oldmin.y) / 2;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001ece:	461a      	mov	r2, r3
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	0fda      	lsrs	r2, r3, #31
 8001eda:	4413      	add	r3, r2
 8001edc:	105b      	asrs	r3, r3, #1
 8001ede:	827b      	strh	r3, [r7, #18]
			if (slid->old_sample.y > threshold_y && slid->new_sample.y < threshold_y) {
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001ee6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	da30      	bge.n	8001f50 <detect_step+0xfc>
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001ef4:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	dd29      	ble.n	8001f50 <detect_step+0xfc>
				step_cnt ++;
 8001efc:	4b18      	ldr	r3, [pc, #96]	; (8001f60 <detect_step+0x10c>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	3301      	adds	r3, #1
 8001f02:	4a17      	ldr	r2, [pc, #92]	; (8001f60 <detect_step+0x10c>)
 8001f04:	6013      	str	r3, [r2, #0]
			}
			break;
 8001f06:	e023      	b.n	8001f50 <detect_step+0xfc>
		}
		case MOST_ACTIVE_Z: {
			short threshold_z = (peak->oldmax.z + peak->oldmin.z) / 2;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001f0e:	461a      	mov	r2, r3
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001f16:	4413      	add	r3, r2
 8001f18:	0fda      	lsrs	r2, r3, #31
 8001f1a:	4413      	add	r3, r2
 8001f1c:	105b      	asrs	r3, r3, #1
 8001f1e:	82bb      	strh	r3, [r7, #20]
			if (slid->old_sample.z > threshold_z && slid->new_sample.z < threshold_z) {
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001f26:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	da12      	bge.n	8001f54 <detect_step+0x100>
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001f34:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	dd0b      	ble.n	8001f54 <detect_step+0x100>
				step_cnt ++;
 8001f3c:	4b08      	ldr	r3, [pc, #32]	; (8001f60 <detect_step+0x10c>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	3301      	adds	r3, #1
 8001f42:	4a07      	ldr	r2, [pc, #28]	; (8001f60 <detect_step+0x10c>)
 8001f44:	6013      	str	r3, [r2, #0]
			}
			break;
 8001f46:	e005      	b.n	8001f54 <detect_step+0x100>
		}
		default:
			break;
 8001f48:	bf00      	nop
 8001f4a:	e004      	b.n	8001f56 <detect_step+0x102>
			break;
 8001f4c:	bf00      	nop
 8001f4e:	e002      	b.n	8001f56 <detect_step+0x102>
			break;
 8001f50:	bf00      	nop
 8001f52:	e000      	b.n	8001f56 <detect_step+0x102>
			break;
 8001f54:	bf00      	nop
	}
}
 8001f56:	bf00      	nop
 8001f58:	3718      	adds	r7, #24
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	2000026c 	.word	0x2000026c

08001f64 <HAL_usDelay>:

void HAL_usDelay(uint32_t udelay)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b086      	sub	sp, #24
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  uint32_t startval,tickn,delays,wait;

  startval = SysTick->VAL;
 8001f6c:	4b1c      	ldr	r3, [pc, #112]	; (8001fe0 <HAL_usDelay+0x7c>)
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	617b      	str	r3, [r7, #20]
  tickn = HAL_GetTick();
 8001f72:	f000 fafb 	bl	800256c <HAL_GetTick>
 8001f76:	6138      	str	r0, [r7, #16]

  delays =udelay * 72;
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	00db      	lsls	r3, r3, #3
 8001f7e:	4413      	add	r3, r2
 8001f80:	00db      	lsls	r3, r3, #3
 8001f82:	60fb      	str	r3, [r7, #12]
  if(delays > startval)
 8001f84:	68fa      	ldr	r2, [r7, #12]
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d915      	bls.n	8001fb8 <HAL_usDelay+0x54>
  {
    while(HAL_GetTick() == tickn);
 8001f8c:	bf00      	nop
 8001f8e:	f000 faed 	bl	800256c <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d0f9      	beq.n	8001f8e <HAL_usDelay+0x2a>
    wait = 72000 + startval - delays;
 8001f9a:	697a      	ldr	r2, [r7, #20]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8001fa4:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8001fa8:	60bb      	str	r3, [r7, #8]
    while(wait < SysTick->VAL);
 8001faa:	bf00      	nop
 8001fac:	4b0c      	ldr	r3, [pc, #48]	; (8001fe0 <HAL_usDelay+0x7c>)
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	68ba      	ldr	r2, [r7, #8]
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d3fa      	bcc.n	8001fac <HAL_usDelay+0x48>
  else
  {
    wait = startval - delays;
    while(wait < SysTick->VAL && HAL_GetTick() == tickn);
  }
}
 8001fb6:	e00f      	b.n	8001fd8 <HAL_usDelay+0x74>
    wait = startval - delays;
 8001fb8:	697a      	ldr	r2, [r7, #20]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	60bb      	str	r3, [r7, #8]
    while(wait < SysTick->VAL && HAL_GetTick() == tickn);
 8001fc0:	bf00      	nop
 8001fc2:	4b07      	ldr	r3, [pc, #28]	; (8001fe0 <HAL_usDelay+0x7c>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	68ba      	ldr	r2, [r7, #8]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d205      	bcs.n	8001fd8 <HAL_usDelay+0x74>
 8001fcc:	f000 face 	bl	800256c <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d0f4      	beq.n	8001fc2 <HAL_usDelay+0x5e>
}
 8001fd8:	bf00      	nop
 8001fda:	3718      	adds	r7, #24
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	e000e010 	.word	0xe000e010

08001fe4 <HAL_msDelay>:

void HAL_msDelay(uint32_t udelay)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
	uint16_t i = 0;
 8001fec:	2300      	movs	r3, #0
 8001fee:	81fb      	strh	r3, [r7, #14]
	for(i = 0;i < udelay;i++)
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	81fb      	strh	r3, [r7, #14]
 8001ff4:	e006      	b.n	8002004 <HAL_msDelay+0x20>
	{
		HAL_usDelay(1000);
 8001ff6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ffa:	f7ff ffb3 	bl	8001f64 <HAL_usDelay>
	for(i = 0;i < udelay;i++)
 8001ffe:	89fb      	ldrh	r3, [r7, #14]
 8002000:	3301      	adds	r3, #1
 8002002:	81fb      	strh	r3, [r7, #14]
 8002004:	89fb      	ldrh	r3, [r7, #14]
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	429a      	cmp	r2, r3
 800200a:	d8f4      	bhi.n	8001ff6 <HAL_msDelay+0x12>
	}
}
 800200c:	bf00      	nop
 800200e:	bf00      	nop
 8002010:	3710      	adds	r7, #16
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002016:	b480      	push	{r7}
 8002018:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800201a:	b672      	cpsid	i
}
 800201c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800201e:	e7fe      	b.n	800201e <Error_Handler+0x8>

08002020 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002026:	1d3b      	adds	r3, r7, #4
 8002028:	2100      	movs	r1, #0
 800202a:	460a      	mov	r2, r1
 800202c:	801a      	strh	r2, [r3, #0]
 800202e:	460a      	mov	r2, r1
 8002030:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8002032:	2300      	movs	r3, #0
 8002034:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002036:	4b1d      	ldr	r3, [pc, #116]	; (80020ac <MX_RTC_Init+0x8c>)
 8002038:	4a1d      	ldr	r2, [pc, #116]	; (80020b0 <MX_RTC_Init+0x90>)
 800203a:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800203c:	4b1b      	ldr	r3, [pc, #108]	; (80020ac <MX_RTC_Init+0x8c>)
 800203e:	f04f 32ff 	mov.w	r2, #4294967295
 8002042:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 8002044:	4b19      	ldr	r3, [pc, #100]	; (80020ac <MX_RTC_Init+0x8c>)
 8002046:	2200      	movs	r2, #0
 8002048:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800204a:	4818      	ldr	r0, [pc, #96]	; (80020ac <MX_RTC_Init+0x8c>)
 800204c:	f001 fe08 	bl	8003c60 <HAL_RTC_Init>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <MX_RTC_Init+0x3a>
  {
    Error_Handler();
 8002056:	f7ff ffde 	bl	8002016 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x20;
 800205a:	2320      	movs	r3, #32
 800205c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800205e:	2300      	movs	r3, #0
 8002060:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x55;
 8002062:	2355      	movs	r3, #85	; 0x55
 8002064:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002066:	1d3b      	adds	r3, r7, #4
 8002068:	2201      	movs	r2, #1
 800206a:	4619      	mov	r1, r3
 800206c:	480f      	ldr	r0, [pc, #60]	; (80020ac <MX_RTC_Init+0x8c>)
 800206e:	f001 fe83 	bl	8003d78 <HAL_RTC_SetTime>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 8002078:	f7ff ffcd 	bl	8002016 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_SUNDAY;
 800207c:	2300      	movs	r3, #0
 800207e:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_FEBRUARY;
 8002080:	2302      	movs	r3, #2
 8002082:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x25;
 8002084:	2325      	movs	r3, #37	; 0x25
 8002086:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x24;
 8002088:	2324      	movs	r3, #36	; 0x24
 800208a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 800208c:	463b      	mov	r3, r7
 800208e:	2201      	movs	r2, #1
 8002090:	4619      	mov	r1, r3
 8002092:	4806      	ldr	r0, [pc, #24]	; (80020ac <MX_RTC_Init+0x8c>)
 8002094:	f001 ffe0 	bl	8004058 <HAL_RTC_SetDate>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 800209e:	f7ff ffba 	bl	8002016 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80020a2:	bf00      	nop
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	200002bc 	.word	0x200002bc
 80020b0:	40002800 	.word	0x40002800

080020b4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a0f      	ldr	r2, [pc, #60]	; (8002100 <HAL_RTC_MspInit+0x4c>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d118      	bne.n	80020f8 <HAL_RTC_MspInit+0x44>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80020c6:	f001 f843 	bl	8003150 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80020ca:	4b0e      	ldr	r3, [pc, #56]	; (8002104 <HAL_RTC_MspInit+0x50>)
 80020cc:	69db      	ldr	r3, [r3, #28]
 80020ce:	4a0d      	ldr	r2, [pc, #52]	; (8002104 <HAL_RTC_MspInit+0x50>)
 80020d0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80020d4:	61d3      	str	r3, [r2, #28]
 80020d6:	4b0b      	ldr	r3, [pc, #44]	; (8002104 <HAL_RTC_MspInit+0x50>)
 80020d8:	69db      	ldr	r3, [r3, #28]
 80020da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80020de:	60fb      	str	r3, [r7, #12]
 80020e0:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80020e2:	4b09      	ldr	r3, [pc, #36]	; (8002108 <HAL_RTC_MspInit+0x54>)
 80020e4:	2201      	movs	r2, #1
 80020e6:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80020e8:	2200      	movs	r2, #0
 80020ea:	2100      	movs	r1, #0
 80020ec:	2003      	movs	r0, #3
 80020ee:	f000 fe44 	bl	8002d7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 80020f2:	2003      	movs	r0, #3
 80020f4:	f000 fe5d 	bl	8002db2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80020f8:	bf00      	nop
 80020fa:	3710      	adds	r7, #16
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	40002800 	.word	0x40002800
 8002104:	40021000 	.word	0x40021000
 8002108:	4242043c 	.word	0x4242043c

0800210c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800210c:	b480      	push	{r7}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002112:	4b15      	ldr	r3, [pc, #84]	; (8002168 <HAL_MspInit+0x5c>)
 8002114:	699b      	ldr	r3, [r3, #24]
 8002116:	4a14      	ldr	r2, [pc, #80]	; (8002168 <HAL_MspInit+0x5c>)
 8002118:	f043 0301 	orr.w	r3, r3, #1
 800211c:	6193      	str	r3, [r2, #24]
 800211e:	4b12      	ldr	r3, [pc, #72]	; (8002168 <HAL_MspInit+0x5c>)
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	60bb      	str	r3, [r7, #8]
 8002128:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800212a:	4b0f      	ldr	r3, [pc, #60]	; (8002168 <HAL_MspInit+0x5c>)
 800212c:	69db      	ldr	r3, [r3, #28]
 800212e:	4a0e      	ldr	r2, [pc, #56]	; (8002168 <HAL_MspInit+0x5c>)
 8002130:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002134:	61d3      	str	r3, [r2, #28]
 8002136:	4b0c      	ldr	r3, [pc, #48]	; (8002168 <HAL_MspInit+0x5c>)
 8002138:	69db      	ldr	r3, [r3, #28]
 800213a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800213e:	607b      	str	r3, [r7, #4]
 8002140:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002142:	4b0a      	ldr	r3, [pc, #40]	; (800216c <HAL_MspInit+0x60>)
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	60fb      	str	r3, [r7, #12]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002156:	60fb      	str	r3, [r7, #12]
 8002158:	4a04      	ldr	r2, [pc, #16]	; (800216c <HAL_MspInit+0x60>)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800215e:	bf00      	nop
 8002160:	3714      	adds	r7, #20
 8002162:	46bd      	mov	sp, r7
 8002164:	bc80      	pop	{r7}
 8002166:	4770      	bx	lr
 8002168:	40021000 	.word	0x40021000
 800216c:	40010000 	.word	0x40010000

08002170 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002174:	e7fe      	b.n	8002174 <NMI_Handler+0x4>

08002176 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002176:	b480      	push	{r7}
 8002178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800217a:	e7fe      	b.n	800217a <HardFault_Handler+0x4>

0800217c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002180:	e7fe      	b.n	8002180 <MemManage_Handler+0x4>

08002182 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002182:	b480      	push	{r7}
 8002184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002186:	e7fe      	b.n	8002186 <BusFault_Handler+0x4>

08002188 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800218c:	e7fe      	b.n	800218c <UsageFault_Handler+0x4>

0800218e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800218e:	b480      	push	{r7}
 8002190:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002192:	bf00      	nop
 8002194:	46bd      	mov	sp, r7
 8002196:	bc80      	pop	{r7}
 8002198:	4770      	bx	lr

0800219a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800219a:	b480      	push	{r7}
 800219c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800219e:	bf00      	nop
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bc80      	pop	{r7}
 80021a4:	4770      	bx	lr

080021a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021a6:	b480      	push	{r7}
 80021a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021aa:	bf00      	nop
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bc80      	pop	{r7}
 80021b0:	4770      	bx	lr

080021b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021b6:	f000 f9c7 	bl	8002548 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021ba:	bf00      	nop
 80021bc:	bd80      	pop	{r7, pc}
	...

080021c0 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt.
  */
void RTC_IRQHandler(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 80021c4:	4802      	ldr	r0, [pc, #8]	; (80021d0 <RTC_IRQHandler+0x10>)
 80021c6:	f002 faf3 	bl	80047b0 <HAL_RTCEx_RTCIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 80021ca:	bf00      	nop
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	200002bc 	.word	0x200002bc

080021d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  return 1;
 80021d8:	2301      	movs	r3, #1
}
 80021da:	4618      	mov	r0, r3
 80021dc:	46bd      	mov	sp, r7
 80021de:	bc80      	pop	{r7}
 80021e0:	4770      	bx	lr

080021e2 <_kill>:

int _kill(int pid, int sig)
{
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b082      	sub	sp, #8
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
 80021ea:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80021ec:	f007 fd8a 	bl	8009d04 <__errno>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2216      	movs	r2, #22
 80021f4:	601a      	str	r2, [r3, #0]
  return -1;
 80021f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <_exit>:

void _exit (int status)
{
 8002202:	b580      	push	{r7, lr}
 8002204:	b082      	sub	sp, #8
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800220a:	f04f 31ff 	mov.w	r1, #4294967295
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f7ff ffe7 	bl	80021e2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002214:	e7fe      	b.n	8002214 <_exit+0x12>

08002216 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002216:	b580      	push	{r7, lr}
 8002218:	b086      	sub	sp, #24
 800221a:	af00      	add	r7, sp, #0
 800221c:	60f8      	str	r0, [r7, #12]
 800221e:	60b9      	str	r1, [r7, #8]
 8002220:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002222:	2300      	movs	r3, #0
 8002224:	617b      	str	r3, [r7, #20]
 8002226:	e00a      	b.n	800223e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002228:	f3af 8000 	nop.w
 800222c:	4601      	mov	r1, r0
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	1c5a      	adds	r2, r3, #1
 8002232:	60ba      	str	r2, [r7, #8]
 8002234:	b2ca      	uxtb	r2, r1
 8002236:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	3301      	adds	r3, #1
 800223c:	617b      	str	r3, [r7, #20]
 800223e:	697a      	ldr	r2, [r7, #20]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	429a      	cmp	r2, r3
 8002244:	dbf0      	blt.n	8002228 <_read+0x12>
  }

  return len;
 8002246:	687b      	ldr	r3, [r7, #4]
}
 8002248:	4618      	mov	r0, r3
 800224a:	3718      	adds	r7, #24
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}

08002250 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b086      	sub	sp, #24
 8002254:	af00      	add	r7, sp, #0
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	60b9      	str	r1, [r7, #8]
 800225a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800225c:	2300      	movs	r3, #0
 800225e:	617b      	str	r3, [r7, #20]
 8002260:	e009      	b.n	8002276 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	1c5a      	adds	r2, r3, #1
 8002266:	60ba      	str	r2, [r7, #8]
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	4618      	mov	r0, r3
 800226c:	f000 f8ee 	bl	800244c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	3301      	adds	r3, #1
 8002274:	617b      	str	r3, [r7, #20]
 8002276:	697a      	ldr	r2, [r7, #20]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	429a      	cmp	r2, r3
 800227c:	dbf1      	blt.n	8002262 <_write+0x12>
  }
  return len;
 800227e:	687b      	ldr	r3, [r7, #4]
}
 8002280:	4618      	mov	r0, r3
 8002282:	3718      	adds	r7, #24
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <_close>:

int _close(int file)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002290:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002294:	4618      	mov	r0, r3
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	bc80      	pop	{r7}
 800229c:	4770      	bx	lr

0800229e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800229e:	b480      	push	{r7}
 80022a0:	b083      	sub	sp, #12
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
 80022a6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022ae:	605a      	str	r2, [r3, #4]
  return 0;
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bc80      	pop	{r7}
 80022ba:	4770      	bx	lr

080022bc <_isatty>:

int _isatty(int file)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80022c4:	2301      	movs	r3, #1
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bc80      	pop	{r7}
 80022ce:	4770      	bx	lr

080022d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	60b9      	str	r1, [r7, #8]
 80022da:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3714      	adds	r7, #20
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bc80      	pop	{r7}
 80022e6:	4770      	bx	lr

080022e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b086      	sub	sp, #24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022f0:	4a14      	ldr	r2, [pc, #80]	; (8002344 <_sbrk+0x5c>)
 80022f2:	4b15      	ldr	r3, [pc, #84]	; (8002348 <_sbrk+0x60>)
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022fc:	4b13      	ldr	r3, [pc, #76]	; (800234c <_sbrk+0x64>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d102      	bne.n	800230a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002304:	4b11      	ldr	r3, [pc, #68]	; (800234c <_sbrk+0x64>)
 8002306:	4a12      	ldr	r2, [pc, #72]	; (8002350 <_sbrk+0x68>)
 8002308:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800230a:	4b10      	ldr	r3, [pc, #64]	; (800234c <_sbrk+0x64>)
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4413      	add	r3, r2
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	429a      	cmp	r2, r3
 8002316:	d207      	bcs.n	8002328 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002318:	f007 fcf4 	bl	8009d04 <__errno>
 800231c:	4603      	mov	r3, r0
 800231e:	220c      	movs	r2, #12
 8002320:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002322:	f04f 33ff 	mov.w	r3, #4294967295
 8002326:	e009      	b.n	800233c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002328:	4b08      	ldr	r3, [pc, #32]	; (800234c <_sbrk+0x64>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800232e:	4b07      	ldr	r3, [pc, #28]	; (800234c <_sbrk+0x64>)
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4413      	add	r3, r2
 8002336:	4a05      	ldr	r2, [pc, #20]	; (800234c <_sbrk+0x64>)
 8002338:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800233a:	68fb      	ldr	r3, [r7, #12]
}
 800233c:	4618      	mov	r0, r3
 800233e:	3718      	adds	r7, #24
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	20005000 	.word	0x20005000
 8002348:	00000400 	.word	0x00000400
 800234c:	200002d0 	.word	0x200002d0
 8002350:	20000480 	.word	0x20000480

08002354 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002358:	bf00      	nop
 800235a:	46bd      	mov	sp, r7
 800235c:	bc80      	pop	{r7}
 800235e:	4770      	bx	lr

08002360 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002364:	4b11      	ldr	r3, [pc, #68]	; (80023ac <MX_USART1_UART_Init+0x4c>)
 8002366:	4a12      	ldr	r2, [pc, #72]	; (80023b0 <MX_USART1_UART_Init+0x50>)
 8002368:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800236a:	4b10      	ldr	r3, [pc, #64]	; (80023ac <MX_USART1_UART_Init+0x4c>)
 800236c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002370:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002372:	4b0e      	ldr	r3, [pc, #56]	; (80023ac <MX_USART1_UART_Init+0x4c>)
 8002374:	2200      	movs	r2, #0
 8002376:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002378:	4b0c      	ldr	r3, [pc, #48]	; (80023ac <MX_USART1_UART_Init+0x4c>)
 800237a:	2200      	movs	r2, #0
 800237c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800237e:	4b0b      	ldr	r3, [pc, #44]	; (80023ac <MX_USART1_UART_Init+0x4c>)
 8002380:	2200      	movs	r2, #0
 8002382:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002384:	4b09      	ldr	r3, [pc, #36]	; (80023ac <MX_USART1_UART_Init+0x4c>)
 8002386:	220c      	movs	r2, #12
 8002388:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800238a:	4b08      	ldr	r3, [pc, #32]	; (80023ac <MX_USART1_UART_Init+0x4c>)
 800238c:	2200      	movs	r2, #0
 800238e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002390:	4b06      	ldr	r3, [pc, #24]	; (80023ac <MX_USART1_UART_Init+0x4c>)
 8002392:	2200      	movs	r2, #0
 8002394:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002396:	4805      	ldr	r0, [pc, #20]	; (80023ac <MX_USART1_UART_Init+0x4c>)
 8002398:	f002 fa53 	bl	8004842 <HAL_UART_Init>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80023a2:	f7ff fe38 	bl	8002016 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80023a6:	bf00      	nop
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	200002d4 	.word	0x200002d4
 80023b0:	40013800 	.word	0x40013800

080023b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b088      	sub	sp, #32
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023bc:	f107 0310 	add.w	r3, r7, #16
 80023c0:	2200      	movs	r2, #0
 80023c2:	601a      	str	r2, [r3, #0]
 80023c4:	605a      	str	r2, [r3, #4]
 80023c6:	609a      	str	r2, [r3, #8]
 80023c8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a1c      	ldr	r2, [pc, #112]	; (8002440 <HAL_UART_MspInit+0x8c>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d131      	bne.n	8002438 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023d4:	4b1b      	ldr	r3, [pc, #108]	; (8002444 <HAL_UART_MspInit+0x90>)
 80023d6:	699b      	ldr	r3, [r3, #24]
 80023d8:	4a1a      	ldr	r2, [pc, #104]	; (8002444 <HAL_UART_MspInit+0x90>)
 80023da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023de:	6193      	str	r3, [r2, #24]
 80023e0:	4b18      	ldr	r3, [pc, #96]	; (8002444 <HAL_UART_MspInit+0x90>)
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023e8:	60fb      	str	r3, [r7, #12]
 80023ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ec:	4b15      	ldr	r3, [pc, #84]	; (8002444 <HAL_UART_MspInit+0x90>)
 80023ee:	699b      	ldr	r3, [r3, #24]
 80023f0:	4a14      	ldr	r2, [pc, #80]	; (8002444 <HAL_UART_MspInit+0x90>)
 80023f2:	f043 0304 	orr.w	r3, r3, #4
 80023f6:	6193      	str	r3, [r2, #24]
 80023f8:	4b12      	ldr	r3, [pc, #72]	; (8002444 <HAL_UART_MspInit+0x90>)
 80023fa:	699b      	ldr	r3, [r3, #24]
 80023fc:	f003 0304 	and.w	r3, r3, #4
 8002400:	60bb      	str	r3, [r7, #8]
 8002402:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002404:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002408:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800240a:	2302      	movs	r3, #2
 800240c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800240e:	2303      	movs	r3, #3
 8002410:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002412:	f107 0310 	add.w	r3, r7, #16
 8002416:	4619      	mov	r1, r3
 8002418:	480b      	ldr	r0, [pc, #44]	; (8002448 <HAL_UART_MspInit+0x94>)
 800241a:	f000 fce5 	bl	8002de8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800241e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002422:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002424:	2300      	movs	r3, #0
 8002426:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002428:	2300      	movs	r3, #0
 800242a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800242c:	f107 0310 	add.w	r3, r7, #16
 8002430:	4619      	mov	r1, r3
 8002432:	4805      	ldr	r0, [pc, #20]	; (8002448 <HAL_UART_MspInit+0x94>)
 8002434:	f000 fcd8 	bl	8002de8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002438:	bf00      	nop
 800243a:	3720      	adds	r7, #32
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	40013800 	.word	0x40013800
 8002444:	40021000 	.word	0x40021000
 8002448:	40010800 	.word	0x40010800

0800244c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1,(uint8_t*)&ch, 1, 0xFFFF);
 8002454:	1d39      	adds	r1, r7, #4
 8002456:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800245a:	2201      	movs	r2, #1
 800245c:	4803      	ldr	r0, [pc, #12]	; (800246c <__io_putchar+0x20>)
 800245e:	f002 fa40 	bl	80048e2 <HAL_UART_Transmit>
	return ch;
 8002462:	687b      	ldr	r3, [r7, #4]
}
 8002464:	4618      	mov	r0, r3
 8002466:	3708      	adds	r7, #8
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	200002d4 	.word	0x200002d4

08002470 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002470:	f7ff ff70 	bl	8002354 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002474:	480b      	ldr	r0, [pc, #44]	; (80024a4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002476:	490c      	ldr	r1, [pc, #48]	; (80024a8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002478:	4a0c      	ldr	r2, [pc, #48]	; (80024ac <LoopFillZerobss+0x16>)
  movs r3, #0
 800247a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800247c:	e002      	b.n	8002484 <LoopCopyDataInit>

0800247e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800247e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002480:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002482:	3304      	adds	r3, #4

08002484 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002484:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002486:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002488:	d3f9      	bcc.n	800247e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800248a:	4a09      	ldr	r2, [pc, #36]	; (80024b0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800248c:	4c09      	ldr	r4, [pc, #36]	; (80024b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800248e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002490:	e001      	b.n	8002496 <LoopFillZerobss>

08002492 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002492:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002494:	3204      	adds	r2, #4

08002496 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002496:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002498:	d3fb      	bcc.n	8002492 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800249a:	f007 fc39 	bl	8009d10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800249e:	f7ff f8fd 	bl	800169c <main>
  bx lr
 80024a2:	4770      	bx	lr
  ldr r0, =_sdata
 80024a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024a8:	20000220 	.word	0x20000220
  ldr r2, =_sidata
 80024ac:	0800da08 	.word	0x0800da08
  ldr r2, =_sbss
 80024b0:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 80024b4:	20000480 	.word	0x20000480

080024b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80024b8:	e7fe      	b.n	80024b8 <ADC1_2_IRQHandler>
	...

080024bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024c0:	4b08      	ldr	r3, [pc, #32]	; (80024e4 <HAL_Init+0x28>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a07      	ldr	r2, [pc, #28]	; (80024e4 <HAL_Init+0x28>)
 80024c6:	f043 0310 	orr.w	r3, r3, #16
 80024ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024cc:	2003      	movs	r0, #3
 80024ce:	f000 fc49 	bl	8002d64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024d2:	200f      	movs	r0, #15
 80024d4:	f000 f808 	bl	80024e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024d8:	f7ff fe18 	bl	800210c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	40022000 	.word	0x40022000

080024e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024f0:	4b12      	ldr	r3, [pc, #72]	; (800253c <HAL_InitTick+0x54>)
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	4b12      	ldr	r3, [pc, #72]	; (8002540 <HAL_InitTick+0x58>)
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	4619      	mov	r1, r3
 80024fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002502:	fbb2 f3f3 	udiv	r3, r2, r3
 8002506:	4618      	mov	r0, r3
 8002508:	f000 fc61 	bl	8002dce <HAL_SYSTICK_Config>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e00e      	b.n	8002534 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2b0f      	cmp	r3, #15
 800251a:	d80a      	bhi.n	8002532 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800251c:	2200      	movs	r2, #0
 800251e:	6879      	ldr	r1, [r7, #4]
 8002520:	f04f 30ff 	mov.w	r0, #4294967295
 8002524:	f000 fc29 	bl	8002d7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002528:	4a06      	ldr	r2, [pc, #24]	; (8002544 <HAL_InitTick+0x5c>)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800252e:	2300      	movs	r3, #0
 8002530:	e000      	b.n	8002534 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
}
 8002534:	4618      	mov	r0, r3
 8002536:	3708      	adds	r7, #8
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	20000000 	.word	0x20000000
 8002540:	20000008 	.word	0x20000008
 8002544:	20000004 	.word	0x20000004

08002548 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800254c:	4b05      	ldr	r3, [pc, #20]	; (8002564 <HAL_IncTick+0x1c>)
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	461a      	mov	r2, r3
 8002552:	4b05      	ldr	r3, [pc, #20]	; (8002568 <HAL_IncTick+0x20>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4413      	add	r3, r2
 8002558:	4a03      	ldr	r2, [pc, #12]	; (8002568 <HAL_IncTick+0x20>)
 800255a:	6013      	str	r3, [r2, #0]
}
 800255c:	bf00      	nop
 800255e:	46bd      	mov	sp, r7
 8002560:	bc80      	pop	{r7}
 8002562:	4770      	bx	lr
 8002564:	20000008 	.word	0x20000008
 8002568:	2000031c 	.word	0x2000031c

0800256c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  return uwTick;
 8002570:	4b02      	ldr	r3, [pc, #8]	; (800257c <HAL_GetTick+0x10>)
 8002572:	681b      	ldr	r3, [r3, #0]
}
 8002574:	4618      	mov	r0, r3
 8002576:	46bd      	mov	sp, r7
 8002578:	bc80      	pop	{r7}
 800257a:	4770      	bx	lr
 800257c:	2000031c 	.word	0x2000031c

08002580 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b086      	sub	sp, #24
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002588:	2300      	movs	r3, #0
 800258a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800258c:	2300      	movs	r3, #0
 800258e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002590:	2300      	movs	r3, #0
 8002592:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002594:	2300      	movs	r3, #0
 8002596:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d101      	bne.n	80025a2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e0be      	b.n	8002720 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d109      	bne.n	80025c4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f7fe ffc2 	bl	8001548 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f000 fabf 	bl	8002b48 <ADC_ConversionStop_Disable>
 80025ca:	4603      	mov	r3, r0
 80025cc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d2:	f003 0310 	and.w	r3, r3, #16
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	f040 8099 	bne.w	800270e <HAL_ADC_Init+0x18e>
 80025dc:	7dfb      	ldrb	r3, [r7, #23]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	f040 8095 	bne.w	800270e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80025ec:	f023 0302 	bic.w	r3, r3, #2
 80025f0:	f043 0202 	orr.w	r2, r3, #2
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002600:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	7b1b      	ldrb	r3, [r3, #12]
 8002606:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002608:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800260a:	68ba      	ldr	r2, [r7, #8]
 800260c:	4313      	orrs	r3, r2
 800260e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002618:	d003      	beq.n	8002622 <HAL_ADC_Init+0xa2>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	2b01      	cmp	r3, #1
 8002620:	d102      	bne.n	8002628 <HAL_ADC_Init+0xa8>
 8002622:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002626:	e000      	b.n	800262a <HAL_ADC_Init+0xaa>
 8002628:	2300      	movs	r3, #0
 800262a:	693a      	ldr	r2, [r7, #16]
 800262c:	4313      	orrs	r3, r2
 800262e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	7d1b      	ldrb	r3, [r3, #20]
 8002634:	2b01      	cmp	r3, #1
 8002636:	d119      	bne.n	800266c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	7b1b      	ldrb	r3, [r3, #12]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d109      	bne.n	8002654 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	3b01      	subs	r3, #1
 8002646:	035a      	lsls	r2, r3, #13
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	4313      	orrs	r3, r2
 800264c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002650:	613b      	str	r3, [r7, #16]
 8002652:	e00b      	b.n	800266c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002658:	f043 0220 	orr.w	r2, r3, #32
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002664:	f043 0201 	orr.w	r2, r3, #1
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	430a      	orrs	r2, r1
 800267e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	689a      	ldr	r2, [r3, #8]
 8002686:	4b28      	ldr	r3, [pc, #160]	; (8002728 <HAL_ADC_Init+0x1a8>)
 8002688:	4013      	ands	r3, r2
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	6812      	ldr	r2, [r2, #0]
 800268e:	68b9      	ldr	r1, [r7, #8]
 8002690:	430b      	orrs	r3, r1
 8002692:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800269c:	d003      	beq.n	80026a6 <HAL_ADC_Init+0x126>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d104      	bne.n	80026b0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	3b01      	subs	r3, #1
 80026ac:	051b      	lsls	r3, r3, #20
 80026ae:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68fa      	ldr	r2, [r7, #12]
 80026c0:	430a      	orrs	r2, r1
 80026c2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	689a      	ldr	r2, [r3, #8]
 80026ca:	4b18      	ldr	r3, [pc, #96]	; (800272c <HAL_ADC_Init+0x1ac>)
 80026cc:	4013      	ands	r3, r2
 80026ce:	68ba      	ldr	r2, [r7, #8]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d10b      	bne.n	80026ec <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026de:	f023 0303 	bic.w	r3, r3, #3
 80026e2:	f043 0201 	orr.w	r2, r3, #1
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80026ea:	e018      	b.n	800271e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f0:	f023 0312 	bic.w	r3, r3, #18
 80026f4:	f043 0210 	orr.w	r2, r3, #16
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002700:	f043 0201 	orr.w	r2, r3, #1
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800270c:	e007      	b.n	800271e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002712:	f043 0210 	orr.w	r2, r3, #16
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800271e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002720:	4618      	mov	r0, r3
 8002722:	3718      	adds	r7, #24
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	ffe1f7fd 	.word	0xffe1f7fd
 800272c:	ff1f0efe 	.word	0xff1f0efe

08002730 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002738:	2300      	movs	r3, #0
 800273a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002742:	2b01      	cmp	r3, #1
 8002744:	d101      	bne.n	800274a <HAL_ADC_Start+0x1a>
 8002746:	2302      	movs	r3, #2
 8002748:	e098      	b.n	800287c <HAL_ADC_Start+0x14c>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2201      	movs	r2, #1
 800274e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f000 f99e 	bl	8002a94 <ADC_Enable>
 8002758:	4603      	mov	r3, r0
 800275a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800275c:	7bfb      	ldrb	r3, [r7, #15]
 800275e:	2b00      	cmp	r3, #0
 8002760:	f040 8087 	bne.w	8002872 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002768:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800276c:	f023 0301 	bic.w	r3, r3, #1
 8002770:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a41      	ldr	r2, [pc, #260]	; (8002884 <HAL_ADC_Start+0x154>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d105      	bne.n	800278e <HAL_ADC_Start+0x5e>
 8002782:	4b41      	ldr	r3, [pc, #260]	; (8002888 <HAL_ADC_Start+0x158>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d115      	bne.n	80027ba <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002792:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d026      	beq.n	80027f6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80027b0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80027b8:	e01d      	b.n	80027f6 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027be:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a2f      	ldr	r2, [pc, #188]	; (8002888 <HAL_ADC_Start+0x158>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d004      	beq.n	80027da <HAL_ADC_Start+0xaa>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a2b      	ldr	r2, [pc, #172]	; (8002884 <HAL_ADC_Start+0x154>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d10d      	bne.n	80027f6 <HAL_ADC_Start+0xc6>
 80027da:	4b2b      	ldr	r3, [pc, #172]	; (8002888 <HAL_ADC_Start+0x158>)
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d007      	beq.n	80027f6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80027ee:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d006      	beq.n	8002810 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002806:	f023 0206 	bic.w	r2, r3, #6
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	62da      	str	r2, [r3, #44]	; 0x2c
 800280e:	e002      	b.n	8002816 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f06f 0202 	mvn.w	r2, #2
 8002826:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002832:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002836:	d113      	bne.n	8002860 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800283c:	4a11      	ldr	r2, [pc, #68]	; (8002884 <HAL_ADC_Start+0x154>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d105      	bne.n	800284e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002842:	4b11      	ldr	r3, [pc, #68]	; (8002888 <HAL_ADC_Start+0x158>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800284a:	2b00      	cmp	r3, #0
 800284c:	d108      	bne.n	8002860 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	689a      	ldr	r2, [r3, #8]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800285c:	609a      	str	r2, [r3, #8]
 800285e:	e00c      	b.n	800287a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	689a      	ldr	r2, [r3, #8]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800286e:	609a      	str	r2, [r3, #8]
 8002870:	e003      	b.n	800287a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800287a:	7bfb      	ldrb	r3, [r7, #15]
}
 800287c:	4618      	mov	r0, r3
 800287e:	3710      	adds	r7, #16
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	40012800 	.word	0x40012800
 8002888:	40012400 	.word	0x40012400

0800288c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800289a:	4618      	mov	r0, r3
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	bc80      	pop	{r7}
 80028a2:	4770      	bx	lr

080028a4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028ae:	2300      	movs	r3, #0
 80028b0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80028b2:	2300      	movs	r3, #0
 80028b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d101      	bne.n	80028c4 <HAL_ADC_ConfigChannel+0x20>
 80028c0:	2302      	movs	r3, #2
 80028c2:	e0dc      	b.n	8002a7e <HAL_ADC_ConfigChannel+0x1da>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	2b06      	cmp	r3, #6
 80028d2:	d81c      	bhi.n	800290e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	685a      	ldr	r2, [r3, #4]
 80028de:	4613      	mov	r3, r2
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	4413      	add	r3, r2
 80028e4:	3b05      	subs	r3, #5
 80028e6:	221f      	movs	r2, #31
 80028e8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ec:	43db      	mvns	r3, r3
 80028ee:	4019      	ands	r1, r3
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	6818      	ldr	r0, [r3, #0]
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685a      	ldr	r2, [r3, #4]
 80028f8:	4613      	mov	r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	4413      	add	r3, r2
 80028fe:	3b05      	subs	r3, #5
 8002900:	fa00 f203 	lsl.w	r2, r0, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	430a      	orrs	r2, r1
 800290a:	635a      	str	r2, [r3, #52]	; 0x34
 800290c:	e03c      	b.n	8002988 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	2b0c      	cmp	r3, #12
 8002914:	d81c      	bhi.n	8002950 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685a      	ldr	r2, [r3, #4]
 8002920:	4613      	mov	r3, r2
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	4413      	add	r3, r2
 8002926:	3b23      	subs	r3, #35	; 0x23
 8002928:	221f      	movs	r2, #31
 800292a:	fa02 f303 	lsl.w	r3, r2, r3
 800292e:	43db      	mvns	r3, r3
 8002930:	4019      	ands	r1, r3
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	6818      	ldr	r0, [r3, #0]
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685a      	ldr	r2, [r3, #4]
 800293a:	4613      	mov	r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	4413      	add	r3, r2
 8002940:	3b23      	subs	r3, #35	; 0x23
 8002942:	fa00 f203 	lsl.w	r2, r0, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	430a      	orrs	r2, r1
 800294c:	631a      	str	r2, [r3, #48]	; 0x30
 800294e:	e01b      	b.n	8002988 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	685a      	ldr	r2, [r3, #4]
 800295a:	4613      	mov	r3, r2
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	4413      	add	r3, r2
 8002960:	3b41      	subs	r3, #65	; 0x41
 8002962:	221f      	movs	r2, #31
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	43db      	mvns	r3, r3
 800296a:	4019      	ands	r1, r3
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	6818      	ldr	r0, [r3, #0]
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	685a      	ldr	r2, [r3, #4]
 8002974:	4613      	mov	r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	4413      	add	r3, r2
 800297a:	3b41      	subs	r3, #65	; 0x41
 800297c:	fa00 f203 	lsl.w	r2, r0, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	430a      	orrs	r2, r1
 8002986:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2b09      	cmp	r3, #9
 800298e:	d91c      	bls.n	80029ca <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	68d9      	ldr	r1, [r3, #12]
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	4613      	mov	r3, r2
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	4413      	add	r3, r2
 80029a0:	3b1e      	subs	r3, #30
 80029a2:	2207      	movs	r2, #7
 80029a4:	fa02 f303 	lsl.w	r3, r2, r3
 80029a8:	43db      	mvns	r3, r3
 80029aa:	4019      	ands	r1, r3
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	6898      	ldr	r0, [r3, #8]
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	4613      	mov	r3, r2
 80029b6:	005b      	lsls	r3, r3, #1
 80029b8:	4413      	add	r3, r2
 80029ba:	3b1e      	subs	r3, #30
 80029bc:	fa00 f203 	lsl.w	r2, r0, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	430a      	orrs	r2, r1
 80029c6:	60da      	str	r2, [r3, #12]
 80029c8:	e019      	b.n	80029fe <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	6919      	ldr	r1, [r3, #16]
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	4613      	mov	r3, r2
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	4413      	add	r3, r2
 80029da:	2207      	movs	r2, #7
 80029dc:	fa02 f303 	lsl.w	r3, r2, r3
 80029e0:	43db      	mvns	r3, r3
 80029e2:	4019      	ands	r1, r3
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	6898      	ldr	r0, [r3, #8]
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	4613      	mov	r3, r2
 80029ee:	005b      	lsls	r3, r3, #1
 80029f0:	4413      	add	r3, r2
 80029f2:	fa00 f203 	lsl.w	r2, r0, r3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	430a      	orrs	r2, r1
 80029fc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2b10      	cmp	r3, #16
 8002a04:	d003      	beq.n	8002a0e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002a0a:	2b11      	cmp	r3, #17
 8002a0c:	d132      	bne.n	8002a74 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a1d      	ldr	r2, [pc, #116]	; (8002a88 <HAL_ADC_ConfigChannel+0x1e4>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d125      	bne.n	8002a64 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d126      	bne.n	8002a74 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	689a      	ldr	r2, [r3, #8]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002a34:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2b10      	cmp	r3, #16
 8002a3c:	d11a      	bne.n	8002a74 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a3e:	4b13      	ldr	r3, [pc, #76]	; (8002a8c <HAL_ADC_ConfigChannel+0x1e8>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a13      	ldr	r2, [pc, #76]	; (8002a90 <HAL_ADC_ConfigChannel+0x1ec>)
 8002a44:	fba2 2303 	umull	r2, r3, r2, r3
 8002a48:	0c9a      	lsrs	r2, r3, #18
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	4413      	add	r3, r2
 8002a50:	005b      	lsls	r3, r3, #1
 8002a52:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a54:	e002      	b.n	8002a5c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1f9      	bne.n	8002a56 <HAL_ADC_ConfigChannel+0x1b2>
 8002a62:	e007      	b.n	8002a74 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a68:	f043 0220 	orr.w	r2, r3, #32
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3714      	adds	r7, #20
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bc80      	pop	{r7}
 8002a86:	4770      	bx	lr
 8002a88:	40012400 	.word	0x40012400
 8002a8c:	20000000 	.word	0x20000000
 8002a90:	431bde83 	.word	0x431bde83

08002a94 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d040      	beq.n	8002b34 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	689a      	ldr	r2, [r3, #8]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f042 0201 	orr.w	r2, r2, #1
 8002ac0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002ac2:	4b1f      	ldr	r3, [pc, #124]	; (8002b40 <ADC_Enable+0xac>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a1f      	ldr	r2, [pc, #124]	; (8002b44 <ADC_Enable+0xb0>)
 8002ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8002acc:	0c9b      	lsrs	r3, r3, #18
 8002ace:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002ad0:	e002      	b.n	8002ad8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	3b01      	subs	r3, #1
 8002ad6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d1f9      	bne.n	8002ad2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002ade:	f7ff fd45 	bl	800256c <HAL_GetTick>
 8002ae2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002ae4:	e01f      	b.n	8002b26 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002ae6:	f7ff fd41 	bl	800256c <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d918      	bls.n	8002b26 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f003 0301 	and.w	r3, r3, #1
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d011      	beq.n	8002b26 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b06:	f043 0210 	orr.w	r2, r3, #16
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b12:	f043 0201 	orr.w	r2, r3, #1
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e007      	b.n	8002b36 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f003 0301 	and.w	r3, r3, #1
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d1d8      	bne.n	8002ae6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3710      	adds	r7, #16
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	20000000 	.word	0x20000000
 8002b44:	431bde83 	.word	0x431bde83

08002b48 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b50:	2300      	movs	r3, #0
 8002b52:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f003 0301 	and.w	r3, r3, #1
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d12e      	bne.n	8002bc0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	689a      	ldr	r2, [r3, #8]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f022 0201 	bic.w	r2, r2, #1
 8002b70:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b72:	f7ff fcfb 	bl	800256c <HAL_GetTick>
 8002b76:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002b78:	e01b      	b.n	8002bb2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002b7a:	f7ff fcf7 	bl	800256c <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d914      	bls.n	8002bb2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d10d      	bne.n	8002bb2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b9a:	f043 0210 	orr.w	r2, r3, #16
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba6:	f043 0201 	orr.w	r2, r3, #1
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e007      	b.n	8002bc2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f003 0301 	and.w	r3, r3, #1
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d0dc      	beq.n	8002b7a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
	...

08002bcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b085      	sub	sp, #20
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f003 0307 	and.w	r3, r3, #7
 8002bda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bdc:	4b0c      	ldr	r3, [pc, #48]	; (8002c10 <__NVIC_SetPriorityGrouping+0x44>)
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002be2:	68ba      	ldr	r2, [r7, #8]
 8002be4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002be8:	4013      	ands	r3, r2
 8002bea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bf4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002bf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bfe:	4a04      	ldr	r2, [pc, #16]	; (8002c10 <__NVIC_SetPriorityGrouping+0x44>)
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	60d3      	str	r3, [r2, #12]
}
 8002c04:	bf00      	nop
 8002c06:	3714      	adds	r7, #20
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bc80      	pop	{r7}
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	e000ed00 	.word	0xe000ed00

08002c14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c18:	4b04      	ldr	r3, [pc, #16]	; (8002c2c <__NVIC_GetPriorityGrouping+0x18>)
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	0a1b      	lsrs	r3, r3, #8
 8002c1e:	f003 0307 	and.w	r3, r3, #7
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bc80      	pop	{r7}
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	e000ed00 	.word	0xe000ed00

08002c30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	4603      	mov	r3, r0
 8002c38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	db0b      	blt.n	8002c5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c42:	79fb      	ldrb	r3, [r7, #7]
 8002c44:	f003 021f 	and.w	r2, r3, #31
 8002c48:	4906      	ldr	r1, [pc, #24]	; (8002c64 <__NVIC_EnableIRQ+0x34>)
 8002c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c4e:	095b      	lsrs	r3, r3, #5
 8002c50:	2001      	movs	r0, #1
 8002c52:	fa00 f202 	lsl.w	r2, r0, r2
 8002c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c5a:	bf00      	nop
 8002c5c:	370c      	adds	r7, #12
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bc80      	pop	{r7}
 8002c62:	4770      	bx	lr
 8002c64:	e000e100 	.word	0xe000e100

08002c68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	4603      	mov	r3, r0
 8002c70:	6039      	str	r1, [r7, #0]
 8002c72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	db0a      	blt.n	8002c92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	b2da      	uxtb	r2, r3
 8002c80:	490c      	ldr	r1, [pc, #48]	; (8002cb4 <__NVIC_SetPriority+0x4c>)
 8002c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c86:	0112      	lsls	r2, r2, #4
 8002c88:	b2d2      	uxtb	r2, r2
 8002c8a:	440b      	add	r3, r1
 8002c8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c90:	e00a      	b.n	8002ca8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	b2da      	uxtb	r2, r3
 8002c96:	4908      	ldr	r1, [pc, #32]	; (8002cb8 <__NVIC_SetPriority+0x50>)
 8002c98:	79fb      	ldrb	r3, [r7, #7]
 8002c9a:	f003 030f 	and.w	r3, r3, #15
 8002c9e:	3b04      	subs	r3, #4
 8002ca0:	0112      	lsls	r2, r2, #4
 8002ca2:	b2d2      	uxtb	r2, r2
 8002ca4:	440b      	add	r3, r1
 8002ca6:	761a      	strb	r2, [r3, #24]
}
 8002ca8:	bf00      	nop
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bc80      	pop	{r7}
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	e000e100 	.word	0xe000e100
 8002cb8:	e000ed00 	.word	0xe000ed00

08002cbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b089      	sub	sp, #36	; 0x24
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f003 0307 	and.w	r3, r3, #7
 8002cce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	f1c3 0307 	rsb	r3, r3, #7
 8002cd6:	2b04      	cmp	r3, #4
 8002cd8:	bf28      	it	cs
 8002cda:	2304      	movcs	r3, #4
 8002cdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	3304      	adds	r3, #4
 8002ce2:	2b06      	cmp	r3, #6
 8002ce4:	d902      	bls.n	8002cec <NVIC_EncodePriority+0x30>
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	3b03      	subs	r3, #3
 8002cea:	e000      	b.n	8002cee <NVIC_EncodePriority+0x32>
 8002cec:	2300      	movs	r3, #0
 8002cee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfa:	43da      	mvns	r2, r3
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	401a      	ands	r2, r3
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d04:	f04f 31ff 	mov.w	r1, #4294967295
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d0e:	43d9      	mvns	r1, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d14:	4313      	orrs	r3, r2
         );
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3724      	adds	r7, #36	; 0x24
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bc80      	pop	{r7}
 8002d1e:	4770      	bx	lr

08002d20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d30:	d301      	bcc.n	8002d36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d32:	2301      	movs	r3, #1
 8002d34:	e00f      	b.n	8002d56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d36:	4a0a      	ldr	r2, [pc, #40]	; (8002d60 <SysTick_Config+0x40>)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d3e:	210f      	movs	r1, #15
 8002d40:	f04f 30ff 	mov.w	r0, #4294967295
 8002d44:	f7ff ff90 	bl	8002c68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d48:	4b05      	ldr	r3, [pc, #20]	; (8002d60 <SysTick_Config+0x40>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d4e:	4b04      	ldr	r3, [pc, #16]	; (8002d60 <SysTick_Config+0x40>)
 8002d50:	2207      	movs	r2, #7
 8002d52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3708      	adds	r7, #8
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	e000e010 	.word	0xe000e010

08002d64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f7ff ff2d 	bl	8002bcc <__NVIC_SetPriorityGrouping>
}
 8002d72:	bf00      	nop
 8002d74:	3708      	adds	r7, #8
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	b086      	sub	sp, #24
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	4603      	mov	r3, r0
 8002d82:	60b9      	str	r1, [r7, #8]
 8002d84:	607a      	str	r2, [r7, #4]
 8002d86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d8c:	f7ff ff42 	bl	8002c14 <__NVIC_GetPriorityGrouping>
 8002d90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	68b9      	ldr	r1, [r7, #8]
 8002d96:	6978      	ldr	r0, [r7, #20]
 8002d98:	f7ff ff90 	bl	8002cbc <NVIC_EncodePriority>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002da2:	4611      	mov	r1, r2
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7ff ff5f 	bl	8002c68 <__NVIC_SetPriority>
}
 8002daa:	bf00      	nop
 8002dac:	3718      	adds	r7, #24
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b082      	sub	sp, #8
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	4603      	mov	r3, r0
 8002dba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7ff ff35 	bl	8002c30 <__NVIC_EnableIRQ>
}
 8002dc6:	bf00      	nop
 8002dc8:	3708      	adds	r7, #8
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}

08002dce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b082      	sub	sp, #8
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f7ff ffa2 	bl	8002d20 <SysTick_Config>
 8002ddc:	4603      	mov	r3, r0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3708      	adds	r7, #8
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
	...

08002de8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b08b      	sub	sp, #44	; 0x2c
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002df2:	2300      	movs	r3, #0
 8002df4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002df6:	2300      	movs	r3, #0
 8002df8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dfa:	e169      	b.n	80030d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e00:	fa02 f303 	lsl.w	r3, r2, r3
 8002e04:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	69fa      	ldr	r2, [r7, #28]
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002e10:	69ba      	ldr	r2, [r7, #24]
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	f040 8158 	bne.w	80030ca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	4a9a      	ldr	r2, [pc, #616]	; (8003088 <HAL_GPIO_Init+0x2a0>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d05e      	beq.n	8002ee2 <HAL_GPIO_Init+0xfa>
 8002e24:	4a98      	ldr	r2, [pc, #608]	; (8003088 <HAL_GPIO_Init+0x2a0>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d875      	bhi.n	8002f16 <HAL_GPIO_Init+0x12e>
 8002e2a:	4a98      	ldr	r2, [pc, #608]	; (800308c <HAL_GPIO_Init+0x2a4>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d058      	beq.n	8002ee2 <HAL_GPIO_Init+0xfa>
 8002e30:	4a96      	ldr	r2, [pc, #600]	; (800308c <HAL_GPIO_Init+0x2a4>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d86f      	bhi.n	8002f16 <HAL_GPIO_Init+0x12e>
 8002e36:	4a96      	ldr	r2, [pc, #600]	; (8003090 <HAL_GPIO_Init+0x2a8>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d052      	beq.n	8002ee2 <HAL_GPIO_Init+0xfa>
 8002e3c:	4a94      	ldr	r2, [pc, #592]	; (8003090 <HAL_GPIO_Init+0x2a8>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d869      	bhi.n	8002f16 <HAL_GPIO_Init+0x12e>
 8002e42:	4a94      	ldr	r2, [pc, #592]	; (8003094 <HAL_GPIO_Init+0x2ac>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d04c      	beq.n	8002ee2 <HAL_GPIO_Init+0xfa>
 8002e48:	4a92      	ldr	r2, [pc, #584]	; (8003094 <HAL_GPIO_Init+0x2ac>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d863      	bhi.n	8002f16 <HAL_GPIO_Init+0x12e>
 8002e4e:	4a92      	ldr	r2, [pc, #584]	; (8003098 <HAL_GPIO_Init+0x2b0>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d046      	beq.n	8002ee2 <HAL_GPIO_Init+0xfa>
 8002e54:	4a90      	ldr	r2, [pc, #576]	; (8003098 <HAL_GPIO_Init+0x2b0>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d85d      	bhi.n	8002f16 <HAL_GPIO_Init+0x12e>
 8002e5a:	2b12      	cmp	r3, #18
 8002e5c:	d82a      	bhi.n	8002eb4 <HAL_GPIO_Init+0xcc>
 8002e5e:	2b12      	cmp	r3, #18
 8002e60:	d859      	bhi.n	8002f16 <HAL_GPIO_Init+0x12e>
 8002e62:	a201      	add	r2, pc, #4	; (adr r2, 8002e68 <HAL_GPIO_Init+0x80>)
 8002e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e68:	08002ee3 	.word	0x08002ee3
 8002e6c:	08002ebd 	.word	0x08002ebd
 8002e70:	08002ecf 	.word	0x08002ecf
 8002e74:	08002f11 	.word	0x08002f11
 8002e78:	08002f17 	.word	0x08002f17
 8002e7c:	08002f17 	.word	0x08002f17
 8002e80:	08002f17 	.word	0x08002f17
 8002e84:	08002f17 	.word	0x08002f17
 8002e88:	08002f17 	.word	0x08002f17
 8002e8c:	08002f17 	.word	0x08002f17
 8002e90:	08002f17 	.word	0x08002f17
 8002e94:	08002f17 	.word	0x08002f17
 8002e98:	08002f17 	.word	0x08002f17
 8002e9c:	08002f17 	.word	0x08002f17
 8002ea0:	08002f17 	.word	0x08002f17
 8002ea4:	08002f17 	.word	0x08002f17
 8002ea8:	08002f17 	.word	0x08002f17
 8002eac:	08002ec5 	.word	0x08002ec5
 8002eb0:	08002ed9 	.word	0x08002ed9
 8002eb4:	4a79      	ldr	r2, [pc, #484]	; (800309c <HAL_GPIO_Init+0x2b4>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d013      	beq.n	8002ee2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002eba:	e02c      	b.n	8002f16 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	623b      	str	r3, [r7, #32]
          break;
 8002ec2:	e029      	b.n	8002f18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	3304      	adds	r3, #4
 8002eca:	623b      	str	r3, [r7, #32]
          break;
 8002ecc:	e024      	b.n	8002f18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	3308      	adds	r3, #8
 8002ed4:	623b      	str	r3, [r7, #32]
          break;
 8002ed6:	e01f      	b.n	8002f18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	330c      	adds	r3, #12
 8002ede:	623b      	str	r3, [r7, #32]
          break;
 8002ee0:	e01a      	b.n	8002f18 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d102      	bne.n	8002ef0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002eea:	2304      	movs	r3, #4
 8002eec:	623b      	str	r3, [r7, #32]
          break;
 8002eee:	e013      	b.n	8002f18 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d105      	bne.n	8002f04 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ef8:	2308      	movs	r3, #8
 8002efa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	69fa      	ldr	r2, [r7, #28]
 8002f00:	611a      	str	r2, [r3, #16]
          break;
 8002f02:	e009      	b.n	8002f18 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f04:	2308      	movs	r3, #8
 8002f06:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	69fa      	ldr	r2, [r7, #28]
 8002f0c:	615a      	str	r2, [r3, #20]
          break;
 8002f0e:	e003      	b.n	8002f18 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002f10:	2300      	movs	r3, #0
 8002f12:	623b      	str	r3, [r7, #32]
          break;
 8002f14:	e000      	b.n	8002f18 <HAL_GPIO_Init+0x130>
          break;
 8002f16:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	2bff      	cmp	r3, #255	; 0xff
 8002f1c:	d801      	bhi.n	8002f22 <HAL_GPIO_Init+0x13a>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	e001      	b.n	8002f26 <HAL_GPIO_Init+0x13e>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	3304      	adds	r3, #4
 8002f26:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	2bff      	cmp	r3, #255	; 0xff
 8002f2c:	d802      	bhi.n	8002f34 <HAL_GPIO_Init+0x14c>
 8002f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	e002      	b.n	8002f3a <HAL_GPIO_Init+0x152>
 8002f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f36:	3b08      	subs	r3, #8
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	210f      	movs	r1, #15
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	fa01 f303 	lsl.w	r3, r1, r3
 8002f48:	43db      	mvns	r3, r3
 8002f4a:	401a      	ands	r2, r3
 8002f4c:	6a39      	ldr	r1, [r7, #32]
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	fa01 f303 	lsl.w	r3, r1, r3
 8002f54:	431a      	orrs	r2, r3
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	f000 80b1 	beq.w	80030ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002f68:	4b4d      	ldr	r3, [pc, #308]	; (80030a0 <HAL_GPIO_Init+0x2b8>)
 8002f6a:	699b      	ldr	r3, [r3, #24]
 8002f6c:	4a4c      	ldr	r2, [pc, #304]	; (80030a0 <HAL_GPIO_Init+0x2b8>)
 8002f6e:	f043 0301 	orr.w	r3, r3, #1
 8002f72:	6193      	str	r3, [r2, #24]
 8002f74:	4b4a      	ldr	r3, [pc, #296]	; (80030a0 <HAL_GPIO_Init+0x2b8>)
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	f003 0301 	and.w	r3, r3, #1
 8002f7c:	60bb      	str	r3, [r7, #8]
 8002f7e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002f80:	4a48      	ldr	r2, [pc, #288]	; (80030a4 <HAL_GPIO_Init+0x2bc>)
 8002f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f84:	089b      	lsrs	r3, r3, #2
 8002f86:	3302      	adds	r3, #2
 8002f88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f8c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f90:	f003 0303 	and.w	r3, r3, #3
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	220f      	movs	r2, #15
 8002f98:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9c:	43db      	mvns	r3, r3
 8002f9e:	68fa      	ldr	r2, [r7, #12]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	4a40      	ldr	r2, [pc, #256]	; (80030a8 <HAL_GPIO_Init+0x2c0>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d013      	beq.n	8002fd4 <HAL_GPIO_Init+0x1ec>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	4a3f      	ldr	r2, [pc, #252]	; (80030ac <HAL_GPIO_Init+0x2c4>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d00d      	beq.n	8002fd0 <HAL_GPIO_Init+0x1e8>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4a3e      	ldr	r2, [pc, #248]	; (80030b0 <HAL_GPIO_Init+0x2c8>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d007      	beq.n	8002fcc <HAL_GPIO_Init+0x1e4>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4a3d      	ldr	r2, [pc, #244]	; (80030b4 <HAL_GPIO_Init+0x2cc>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d101      	bne.n	8002fc8 <HAL_GPIO_Init+0x1e0>
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e006      	b.n	8002fd6 <HAL_GPIO_Init+0x1ee>
 8002fc8:	2304      	movs	r3, #4
 8002fca:	e004      	b.n	8002fd6 <HAL_GPIO_Init+0x1ee>
 8002fcc:	2302      	movs	r3, #2
 8002fce:	e002      	b.n	8002fd6 <HAL_GPIO_Init+0x1ee>
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e000      	b.n	8002fd6 <HAL_GPIO_Init+0x1ee>
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fd8:	f002 0203 	and.w	r2, r2, #3
 8002fdc:	0092      	lsls	r2, r2, #2
 8002fde:	4093      	lsls	r3, r2
 8002fe0:	68fa      	ldr	r2, [r7, #12]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002fe6:	492f      	ldr	r1, [pc, #188]	; (80030a4 <HAL_GPIO_Init+0x2bc>)
 8002fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fea:	089b      	lsrs	r3, r3, #2
 8002fec:	3302      	adds	r3, #2
 8002fee:	68fa      	ldr	r2, [r7, #12]
 8002ff0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d006      	beq.n	800300e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003000:	4b2d      	ldr	r3, [pc, #180]	; (80030b8 <HAL_GPIO_Init+0x2d0>)
 8003002:	689a      	ldr	r2, [r3, #8]
 8003004:	492c      	ldr	r1, [pc, #176]	; (80030b8 <HAL_GPIO_Init+0x2d0>)
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	4313      	orrs	r3, r2
 800300a:	608b      	str	r3, [r1, #8]
 800300c:	e006      	b.n	800301c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800300e:	4b2a      	ldr	r3, [pc, #168]	; (80030b8 <HAL_GPIO_Init+0x2d0>)
 8003010:	689a      	ldr	r2, [r3, #8]
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	43db      	mvns	r3, r3
 8003016:	4928      	ldr	r1, [pc, #160]	; (80030b8 <HAL_GPIO_Init+0x2d0>)
 8003018:	4013      	ands	r3, r2
 800301a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d006      	beq.n	8003036 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003028:	4b23      	ldr	r3, [pc, #140]	; (80030b8 <HAL_GPIO_Init+0x2d0>)
 800302a:	68da      	ldr	r2, [r3, #12]
 800302c:	4922      	ldr	r1, [pc, #136]	; (80030b8 <HAL_GPIO_Init+0x2d0>)
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	4313      	orrs	r3, r2
 8003032:	60cb      	str	r3, [r1, #12]
 8003034:	e006      	b.n	8003044 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003036:	4b20      	ldr	r3, [pc, #128]	; (80030b8 <HAL_GPIO_Init+0x2d0>)
 8003038:	68da      	ldr	r2, [r3, #12]
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	43db      	mvns	r3, r3
 800303e:	491e      	ldr	r1, [pc, #120]	; (80030b8 <HAL_GPIO_Init+0x2d0>)
 8003040:	4013      	ands	r3, r2
 8003042:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d006      	beq.n	800305e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003050:	4b19      	ldr	r3, [pc, #100]	; (80030b8 <HAL_GPIO_Init+0x2d0>)
 8003052:	685a      	ldr	r2, [r3, #4]
 8003054:	4918      	ldr	r1, [pc, #96]	; (80030b8 <HAL_GPIO_Init+0x2d0>)
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	4313      	orrs	r3, r2
 800305a:	604b      	str	r3, [r1, #4]
 800305c:	e006      	b.n	800306c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800305e:	4b16      	ldr	r3, [pc, #88]	; (80030b8 <HAL_GPIO_Init+0x2d0>)
 8003060:	685a      	ldr	r2, [r3, #4]
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	43db      	mvns	r3, r3
 8003066:	4914      	ldr	r1, [pc, #80]	; (80030b8 <HAL_GPIO_Init+0x2d0>)
 8003068:	4013      	ands	r3, r2
 800306a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d021      	beq.n	80030bc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003078:	4b0f      	ldr	r3, [pc, #60]	; (80030b8 <HAL_GPIO_Init+0x2d0>)
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	490e      	ldr	r1, [pc, #56]	; (80030b8 <HAL_GPIO_Init+0x2d0>)
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	4313      	orrs	r3, r2
 8003082:	600b      	str	r3, [r1, #0]
 8003084:	e021      	b.n	80030ca <HAL_GPIO_Init+0x2e2>
 8003086:	bf00      	nop
 8003088:	10320000 	.word	0x10320000
 800308c:	10310000 	.word	0x10310000
 8003090:	10220000 	.word	0x10220000
 8003094:	10210000 	.word	0x10210000
 8003098:	10120000 	.word	0x10120000
 800309c:	10110000 	.word	0x10110000
 80030a0:	40021000 	.word	0x40021000
 80030a4:	40010000 	.word	0x40010000
 80030a8:	40010800 	.word	0x40010800
 80030ac:	40010c00 	.word	0x40010c00
 80030b0:	40011000 	.word	0x40011000
 80030b4:	40011400 	.word	0x40011400
 80030b8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80030bc:	4b0b      	ldr	r3, [pc, #44]	; (80030ec <HAL_GPIO_Init+0x304>)
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	43db      	mvns	r3, r3
 80030c4:	4909      	ldr	r1, [pc, #36]	; (80030ec <HAL_GPIO_Init+0x304>)
 80030c6:	4013      	ands	r3, r2
 80030c8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80030ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030cc:	3301      	adds	r3, #1
 80030ce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d6:	fa22 f303 	lsr.w	r3, r2, r3
 80030da:	2b00      	cmp	r3, #0
 80030dc:	f47f ae8e 	bne.w	8002dfc <HAL_GPIO_Init+0x14>
  }
}
 80030e0:	bf00      	nop
 80030e2:	bf00      	nop
 80030e4:	372c      	adds	r7, #44	; 0x2c
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bc80      	pop	{r7}
 80030ea:	4770      	bx	lr
 80030ec:	40010400 	.word	0x40010400

080030f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b085      	sub	sp, #20
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	460b      	mov	r3, r1
 80030fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689a      	ldr	r2, [r3, #8]
 8003100:	887b      	ldrh	r3, [r7, #2]
 8003102:	4013      	ands	r3, r2
 8003104:	2b00      	cmp	r3, #0
 8003106:	d002      	beq.n	800310e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003108:	2301      	movs	r3, #1
 800310a:	73fb      	strb	r3, [r7, #15]
 800310c:	e001      	b.n	8003112 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800310e:	2300      	movs	r3, #0
 8003110:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003112:	7bfb      	ldrb	r3, [r7, #15]
}
 8003114:	4618      	mov	r0, r3
 8003116:	3714      	adds	r7, #20
 8003118:	46bd      	mov	sp, r7
 800311a:	bc80      	pop	{r7}
 800311c:	4770      	bx	lr

0800311e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800311e:	b480      	push	{r7}
 8003120:	b083      	sub	sp, #12
 8003122:	af00      	add	r7, sp, #0
 8003124:	6078      	str	r0, [r7, #4]
 8003126:	460b      	mov	r3, r1
 8003128:	807b      	strh	r3, [r7, #2]
 800312a:	4613      	mov	r3, r2
 800312c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800312e:	787b      	ldrb	r3, [r7, #1]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d003      	beq.n	800313c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003134:	887a      	ldrh	r2, [r7, #2]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800313a:	e003      	b.n	8003144 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800313c:	887b      	ldrh	r3, [r7, #2]
 800313e:	041a      	lsls	r2, r3, #16
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	611a      	str	r2, [r3, #16]
}
 8003144:	bf00      	nop
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	bc80      	pop	{r7}
 800314c:	4770      	bx	lr
	...

08003150 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003150:	b480      	push	{r7}
 8003152:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003154:	4b03      	ldr	r3, [pc, #12]	; (8003164 <HAL_PWR_EnableBkUpAccess+0x14>)
 8003156:	2201      	movs	r2, #1
 8003158:	601a      	str	r2, [r3, #0]
}
 800315a:	bf00      	nop
 800315c:	46bd      	mov	sp, r7
 800315e:	bc80      	pop	{r7}
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	420e0020 	.word	0x420e0020

08003168 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b086      	sub	sp, #24
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d101      	bne.n	800317a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e272      	b.n	8003660 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0301 	and.w	r3, r3, #1
 8003182:	2b00      	cmp	r3, #0
 8003184:	f000 8087 	beq.w	8003296 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003188:	4b92      	ldr	r3, [pc, #584]	; (80033d4 <HAL_RCC_OscConfig+0x26c>)
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f003 030c 	and.w	r3, r3, #12
 8003190:	2b04      	cmp	r3, #4
 8003192:	d00c      	beq.n	80031ae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003194:	4b8f      	ldr	r3, [pc, #572]	; (80033d4 <HAL_RCC_OscConfig+0x26c>)
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f003 030c 	and.w	r3, r3, #12
 800319c:	2b08      	cmp	r3, #8
 800319e:	d112      	bne.n	80031c6 <HAL_RCC_OscConfig+0x5e>
 80031a0:	4b8c      	ldr	r3, [pc, #560]	; (80033d4 <HAL_RCC_OscConfig+0x26c>)
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031ac:	d10b      	bne.n	80031c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031ae:	4b89      	ldr	r3, [pc, #548]	; (80033d4 <HAL_RCC_OscConfig+0x26c>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d06c      	beq.n	8003294 <HAL_RCC_OscConfig+0x12c>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d168      	bne.n	8003294 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e24c      	b.n	8003660 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031ce:	d106      	bne.n	80031de <HAL_RCC_OscConfig+0x76>
 80031d0:	4b80      	ldr	r3, [pc, #512]	; (80033d4 <HAL_RCC_OscConfig+0x26c>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a7f      	ldr	r2, [pc, #508]	; (80033d4 <HAL_RCC_OscConfig+0x26c>)
 80031d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031da:	6013      	str	r3, [r2, #0]
 80031dc:	e02e      	b.n	800323c <HAL_RCC_OscConfig+0xd4>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d10c      	bne.n	8003200 <HAL_RCC_OscConfig+0x98>
 80031e6:	4b7b      	ldr	r3, [pc, #492]	; (80033d4 <HAL_RCC_OscConfig+0x26c>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a7a      	ldr	r2, [pc, #488]	; (80033d4 <HAL_RCC_OscConfig+0x26c>)
 80031ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031f0:	6013      	str	r3, [r2, #0]
 80031f2:	4b78      	ldr	r3, [pc, #480]	; (80033d4 <HAL_RCC_OscConfig+0x26c>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a77      	ldr	r2, [pc, #476]	; (80033d4 <HAL_RCC_OscConfig+0x26c>)
 80031f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031fc:	6013      	str	r3, [r2, #0]
 80031fe:	e01d      	b.n	800323c <HAL_RCC_OscConfig+0xd4>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003208:	d10c      	bne.n	8003224 <HAL_RCC_OscConfig+0xbc>
 800320a:	4b72      	ldr	r3, [pc, #456]	; (80033d4 <HAL_RCC_OscConfig+0x26c>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a71      	ldr	r2, [pc, #452]	; (80033d4 <HAL_RCC_OscConfig+0x26c>)
 8003210:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003214:	6013      	str	r3, [r2, #0]
 8003216:	4b6f      	ldr	r3, [pc, #444]	; (80033d4 <HAL_RCC_OscConfig+0x26c>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a6e      	ldr	r2, [pc, #440]	; (80033d4 <HAL_RCC_OscConfig+0x26c>)
 800321c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003220:	6013      	str	r3, [r2, #0]
 8003222:	e00b      	b.n	800323c <HAL_RCC_OscConfig+0xd4>
 8003224:	4b6b      	ldr	r3, [pc, #428]	; (80033d4 <HAL_RCC_OscConfig+0x26c>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a6a      	ldr	r2, [pc, #424]	; (80033d4 <HAL_RCC_OscConfig+0x26c>)
 800322a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800322e:	6013      	str	r3, [r2, #0]
 8003230:	4b68      	ldr	r3, [pc, #416]	; (80033d4 <HAL_RCC_OscConfig+0x26c>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a67      	ldr	r2, [pc, #412]	; (80033d4 <HAL_RCC_OscConfig+0x26c>)
 8003236:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800323a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d013      	beq.n	800326c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003244:	f7ff f992 	bl	800256c <HAL_GetTick>
 8003248:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800324a:	e008      	b.n	800325e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800324c:	f7ff f98e 	bl	800256c <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	2b64      	cmp	r3, #100	; 0x64
 8003258:	d901      	bls.n	800325e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e200      	b.n	8003660 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800325e:	4b5d      	ldr	r3, [pc, #372]	; (80033d4 <HAL_RCC_OscConfig+0x26c>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d0f0      	beq.n	800324c <HAL_RCC_OscConfig+0xe4>
 800326a:	e014      	b.n	8003296 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800326c:	f7ff f97e 	bl	800256c <HAL_GetTick>
 8003270:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003272:	e008      	b.n	8003286 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003274:	f7ff f97a 	bl	800256c <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b64      	cmp	r3, #100	; 0x64
 8003280:	d901      	bls.n	8003286 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e1ec      	b.n	8003660 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003286:	4b53      	ldr	r3, [pc, #332]	; (80033d4 <HAL_RCC_OscConfig+0x26c>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d1f0      	bne.n	8003274 <HAL_RCC_OscConfig+0x10c>
 8003292:	e000      	b.n	8003296 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003294:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0302 	and.w	r3, r3, #2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d063      	beq.n	800336a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032a2:	4b4c      	ldr	r3, [pc, #304]	; (80033d4 <HAL_RCC_OscConfig+0x26c>)
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f003 030c 	and.w	r3, r3, #12
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00b      	beq.n	80032c6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80032ae:	4b49      	ldr	r3, [pc, #292]	; (80033d4 <HAL_RCC_OscConfig+0x26c>)
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f003 030c 	and.w	r3, r3, #12
 80032b6:	2b08      	cmp	r3, #8
 80032b8:	d11c      	bne.n	80032f4 <HAL_RCC_OscConfig+0x18c>
 80032ba:	4b46      	ldr	r3, [pc, #280]	; (80033d4 <HAL_RCC_OscConfig+0x26c>)
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d116      	bne.n	80032f4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032c6:	4b43      	ldr	r3, [pc, #268]	; (80033d4 <HAL_RCC_OscConfig+0x26c>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d005      	beq.n	80032de <HAL_RCC_OscConfig+0x176>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d001      	beq.n	80032de <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e1c0      	b.n	8003660 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032de:	4b3d      	ldr	r3, [pc, #244]	; (80033d4 <HAL_RCC_OscConfig+0x26c>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	695b      	ldr	r3, [r3, #20]
 80032ea:	00db      	lsls	r3, r3, #3
 80032ec:	4939      	ldr	r1, [pc, #228]	; (80033d4 <HAL_RCC_OscConfig+0x26c>)
 80032ee:	4313      	orrs	r3, r2
 80032f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032f2:	e03a      	b.n	800336a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	691b      	ldr	r3, [r3, #16]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d020      	beq.n	800333e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032fc:	4b36      	ldr	r3, [pc, #216]	; (80033d8 <HAL_RCC_OscConfig+0x270>)
 80032fe:	2201      	movs	r2, #1
 8003300:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003302:	f7ff f933 	bl	800256c <HAL_GetTick>
 8003306:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003308:	e008      	b.n	800331c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800330a:	f7ff f92f 	bl	800256c <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	2b02      	cmp	r3, #2
 8003316:	d901      	bls.n	800331c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e1a1      	b.n	8003660 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800331c:	4b2d      	ldr	r3, [pc, #180]	; (80033d4 <HAL_RCC_OscConfig+0x26c>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0302 	and.w	r3, r3, #2
 8003324:	2b00      	cmp	r3, #0
 8003326:	d0f0      	beq.n	800330a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003328:	4b2a      	ldr	r3, [pc, #168]	; (80033d4 <HAL_RCC_OscConfig+0x26c>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	695b      	ldr	r3, [r3, #20]
 8003334:	00db      	lsls	r3, r3, #3
 8003336:	4927      	ldr	r1, [pc, #156]	; (80033d4 <HAL_RCC_OscConfig+0x26c>)
 8003338:	4313      	orrs	r3, r2
 800333a:	600b      	str	r3, [r1, #0]
 800333c:	e015      	b.n	800336a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800333e:	4b26      	ldr	r3, [pc, #152]	; (80033d8 <HAL_RCC_OscConfig+0x270>)
 8003340:	2200      	movs	r2, #0
 8003342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003344:	f7ff f912 	bl	800256c <HAL_GetTick>
 8003348:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800334a:	e008      	b.n	800335e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800334c:	f7ff f90e 	bl	800256c <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	2b02      	cmp	r3, #2
 8003358:	d901      	bls.n	800335e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e180      	b.n	8003660 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800335e:	4b1d      	ldr	r3, [pc, #116]	; (80033d4 <HAL_RCC_OscConfig+0x26c>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d1f0      	bne.n	800334c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0308 	and.w	r3, r3, #8
 8003372:	2b00      	cmp	r3, #0
 8003374:	d03a      	beq.n	80033ec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d019      	beq.n	80033b2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800337e:	4b17      	ldr	r3, [pc, #92]	; (80033dc <HAL_RCC_OscConfig+0x274>)
 8003380:	2201      	movs	r2, #1
 8003382:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003384:	f7ff f8f2 	bl	800256c <HAL_GetTick>
 8003388:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800338a:	e008      	b.n	800339e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800338c:	f7ff f8ee 	bl	800256c <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	2b02      	cmp	r3, #2
 8003398:	d901      	bls.n	800339e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e160      	b.n	8003660 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800339e:	4b0d      	ldr	r3, [pc, #52]	; (80033d4 <HAL_RCC_OscConfig+0x26c>)
 80033a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d0f0      	beq.n	800338c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80033aa:	2001      	movs	r0, #1
 80033ac:	f000 face 	bl	800394c <RCC_Delay>
 80033b0:	e01c      	b.n	80033ec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033b2:	4b0a      	ldr	r3, [pc, #40]	; (80033dc <HAL_RCC_OscConfig+0x274>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033b8:	f7ff f8d8 	bl	800256c <HAL_GetTick>
 80033bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033be:	e00f      	b.n	80033e0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033c0:	f7ff f8d4 	bl	800256c <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d908      	bls.n	80033e0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e146      	b.n	8003660 <HAL_RCC_OscConfig+0x4f8>
 80033d2:	bf00      	nop
 80033d4:	40021000 	.word	0x40021000
 80033d8:	42420000 	.word	0x42420000
 80033dc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033e0:	4b92      	ldr	r3, [pc, #584]	; (800362c <HAL_RCC_OscConfig+0x4c4>)
 80033e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e4:	f003 0302 	and.w	r3, r3, #2
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d1e9      	bne.n	80033c0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0304 	and.w	r3, r3, #4
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	f000 80a6 	beq.w	8003546 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033fa:	2300      	movs	r3, #0
 80033fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033fe:	4b8b      	ldr	r3, [pc, #556]	; (800362c <HAL_RCC_OscConfig+0x4c4>)
 8003400:	69db      	ldr	r3, [r3, #28]
 8003402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d10d      	bne.n	8003426 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800340a:	4b88      	ldr	r3, [pc, #544]	; (800362c <HAL_RCC_OscConfig+0x4c4>)
 800340c:	69db      	ldr	r3, [r3, #28]
 800340e:	4a87      	ldr	r2, [pc, #540]	; (800362c <HAL_RCC_OscConfig+0x4c4>)
 8003410:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003414:	61d3      	str	r3, [r2, #28]
 8003416:	4b85      	ldr	r3, [pc, #532]	; (800362c <HAL_RCC_OscConfig+0x4c4>)
 8003418:	69db      	ldr	r3, [r3, #28]
 800341a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800341e:	60bb      	str	r3, [r7, #8]
 8003420:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003422:	2301      	movs	r3, #1
 8003424:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003426:	4b82      	ldr	r3, [pc, #520]	; (8003630 <HAL_RCC_OscConfig+0x4c8>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800342e:	2b00      	cmp	r3, #0
 8003430:	d118      	bne.n	8003464 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003432:	4b7f      	ldr	r3, [pc, #508]	; (8003630 <HAL_RCC_OscConfig+0x4c8>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a7e      	ldr	r2, [pc, #504]	; (8003630 <HAL_RCC_OscConfig+0x4c8>)
 8003438:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800343c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800343e:	f7ff f895 	bl	800256c <HAL_GetTick>
 8003442:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003444:	e008      	b.n	8003458 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003446:	f7ff f891 	bl	800256c <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	2b64      	cmp	r3, #100	; 0x64
 8003452:	d901      	bls.n	8003458 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e103      	b.n	8003660 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003458:	4b75      	ldr	r3, [pc, #468]	; (8003630 <HAL_RCC_OscConfig+0x4c8>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003460:	2b00      	cmp	r3, #0
 8003462:	d0f0      	beq.n	8003446 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	2b01      	cmp	r3, #1
 800346a:	d106      	bne.n	800347a <HAL_RCC_OscConfig+0x312>
 800346c:	4b6f      	ldr	r3, [pc, #444]	; (800362c <HAL_RCC_OscConfig+0x4c4>)
 800346e:	6a1b      	ldr	r3, [r3, #32]
 8003470:	4a6e      	ldr	r2, [pc, #440]	; (800362c <HAL_RCC_OscConfig+0x4c4>)
 8003472:	f043 0301 	orr.w	r3, r3, #1
 8003476:	6213      	str	r3, [r2, #32]
 8003478:	e02d      	b.n	80034d6 <HAL_RCC_OscConfig+0x36e>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d10c      	bne.n	800349c <HAL_RCC_OscConfig+0x334>
 8003482:	4b6a      	ldr	r3, [pc, #424]	; (800362c <HAL_RCC_OscConfig+0x4c4>)
 8003484:	6a1b      	ldr	r3, [r3, #32]
 8003486:	4a69      	ldr	r2, [pc, #420]	; (800362c <HAL_RCC_OscConfig+0x4c4>)
 8003488:	f023 0301 	bic.w	r3, r3, #1
 800348c:	6213      	str	r3, [r2, #32]
 800348e:	4b67      	ldr	r3, [pc, #412]	; (800362c <HAL_RCC_OscConfig+0x4c4>)
 8003490:	6a1b      	ldr	r3, [r3, #32]
 8003492:	4a66      	ldr	r2, [pc, #408]	; (800362c <HAL_RCC_OscConfig+0x4c4>)
 8003494:	f023 0304 	bic.w	r3, r3, #4
 8003498:	6213      	str	r3, [r2, #32]
 800349a:	e01c      	b.n	80034d6 <HAL_RCC_OscConfig+0x36e>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	2b05      	cmp	r3, #5
 80034a2:	d10c      	bne.n	80034be <HAL_RCC_OscConfig+0x356>
 80034a4:	4b61      	ldr	r3, [pc, #388]	; (800362c <HAL_RCC_OscConfig+0x4c4>)
 80034a6:	6a1b      	ldr	r3, [r3, #32]
 80034a8:	4a60      	ldr	r2, [pc, #384]	; (800362c <HAL_RCC_OscConfig+0x4c4>)
 80034aa:	f043 0304 	orr.w	r3, r3, #4
 80034ae:	6213      	str	r3, [r2, #32]
 80034b0:	4b5e      	ldr	r3, [pc, #376]	; (800362c <HAL_RCC_OscConfig+0x4c4>)
 80034b2:	6a1b      	ldr	r3, [r3, #32]
 80034b4:	4a5d      	ldr	r2, [pc, #372]	; (800362c <HAL_RCC_OscConfig+0x4c4>)
 80034b6:	f043 0301 	orr.w	r3, r3, #1
 80034ba:	6213      	str	r3, [r2, #32]
 80034bc:	e00b      	b.n	80034d6 <HAL_RCC_OscConfig+0x36e>
 80034be:	4b5b      	ldr	r3, [pc, #364]	; (800362c <HAL_RCC_OscConfig+0x4c4>)
 80034c0:	6a1b      	ldr	r3, [r3, #32]
 80034c2:	4a5a      	ldr	r2, [pc, #360]	; (800362c <HAL_RCC_OscConfig+0x4c4>)
 80034c4:	f023 0301 	bic.w	r3, r3, #1
 80034c8:	6213      	str	r3, [r2, #32]
 80034ca:	4b58      	ldr	r3, [pc, #352]	; (800362c <HAL_RCC_OscConfig+0x4c4>)
 80034cc:	6a1b      	ldr	r3, [r3, #32]
 80034ce:	4a57      	ldr	r2, [pc, #348]	; (800362c <HAL_RCC_OscConfig+0x4c4>)
 80034d0:	f023 0304 	bic.w	r3, r3, #4
 80034d4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d015      	beq.n	800350a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034de:	f7ff f845 	bl	800256c <HAL_GetTick>
 80034e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034e4:	e00a      	b.n	80034fc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034e6:	f7ff f841 	bl	800256c <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d901      	bls.n	80034fc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e0b1      	b.n	8003660 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034fc:	4b4b      	ldr	r3, [pc, #300]	; (800362c <HAL_RCC_OscConfig+0x4c4>)
 80034fe:	6a1b      	ldr	r3, [r3, #32]
 8003500:	f003 0302 	and.w	r3, r3, #2
 8003504:	2b00      	cmp	r3, #0
 8003506:	d0ee      	beq.n	80034e6 <HAL_RCC_OscConfig+0x37e>
 8003508:	e014      	b.n	8003534 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800350a:	f7ff f82f 	bl	800256c <HAL_GetTick>
 800350e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003510:	e00a      	b.n	8003528 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003512:	f7ff f82b 	bl	800256c <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003520:	4293      	cmp	r3, r2
 8003522:	d901      	bls.n	8003528 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e09b      	b.n	8003660 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003528:	4b40      	ldr	r3, [pc, #256]	; (800362c <HAL_RCC_OscConfig+0x4c4>)
 800352a:	6a1b      	ldr	r3, [r3, #32]
 800352c:	f003 0302 	and.w	r3, r3, #2
 8003530:	2b00      	cmp	r3, #0
 8003532:	d1ee      	bne.n	8003512 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003534:	7dfb      	ldrb	r3, [r7, #23]
 8003536:	2b01      	cmp	r3, #1
 8003538:	d105      	bne.n	8003546 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800353a:	4b3c      	ldr	r3, [pc, #240]	; (800362c <HAL_RCC_OscConfig+0x4c4>)
 800353c:	69db      	ldr	r3, [r3, #28]
 800353e:	4a3b      	ldr	r2, [pc, #236]	; (800362c <HAL_RCC_OscConfig+0x4c4>)
 8003540:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003544:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	69db      	ldr	r3, [r3, #28]
 800354a:	2b00      	cmp	r3, #0
 800354c:	f000 8087 	beq.w	800365e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003550:	4b36      	ldr	r3, [pc, #216]	; (800362c <HAL_RCC_OscConfig+0x4c4>)
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f003 030c 	and.w	r3, r3, #12
 8003558:	2b08      	cmp	r3, #8
 800355a:	d061      	beq.n	8003620 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	69db      	ldr	r3, [r3, #28]
 8003560:	2b02      	cmp	r3, #2
 8003562:	d146      	bne.n	80035f2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003564:	4b33      	ldr	r3, [pc, #204]	; (8003634 <HAL_RCC_OscConfig+0x4cc>)
 8003566:	2200      	movs	r2, #0
 8003568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800356a:	f7fe ffff 	bl	800256c <HAL_GetTick>
 800356e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003570:	e008      	b.n	8003584 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003572:	f7fe fffb 	bl	800256c <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	2b02      	cmp	r3, #2
 800357e:	d901      	bls.n	8003584 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e06d      	b.n	8003660 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003584:	4b29      	ldr	r3, [pc, #164]	; (800362c <HAL_RCC_OscConfig+0x4c4>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d1f0      	bne.n	8003572 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a1b      	ldr	r3, [r3, #32]
 8003594:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003598:	d108      	bne.n	80035ac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800359a:	4b24      	ldr	r3, [pc, #144]	; (800362c <HAL_RCC_OscConfig+0x4c4>)
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	4921      	ldr	r1, [pc, #132]	; (800362c <HAL_RCC_OscConfig+0x4c4>)
 80035a8:	4313      	orrs	r3, r2
 80035aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035ac:	4b1f      	ldr	r3, [pc, #124]	; (800362c <HAL_RCC_OscConfig+0x4c4>)
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a19      	ldr	r1, [r3, #32]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035bc:	430b      	orrs	r3, r1
 80035be:	491b      	ldr	r1, [pc, #108]	; (800362c <HAL_RCC_OscConfig+0x4c4>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035c4:	4b1b      	ldr	r3, [pc, #108]	; (8003634 <HAL_RCC_OscConfig+0x4cc>)
 80035c6:	2201      	movs	r2, #1
 80035c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ca:	f7fe ffcf 	bl	800256c <HAL_GetTick>
 80035ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035d0:	e008      	b.n	80035e4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035d2:	f7fe ffcb 	bl	800256c <HAL_GetTick>
 80035d6:	4602      	mov	r2, r0
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d901      	bls.n	80035e4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	e03d      	b.n	8003660 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035e4:	4b11      	ldr	r3, [pc, #68]	; (800362c <HAL_RCC_OscConfig+0x4c4>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d0f0      	beq.n	80035d2 <HAL_RCC_OscConfig+0x46a>
 80035f0:	e035      	b.n	800365e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035f2:	4b10      	ldr	r3, [pc, #64]	; (8003634 <HAL_RCC_OscConfig+0x4cc>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f8:	f7fe ffb8 	bl	800256c <HAL_GetTick>
 80035fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035fe:	e008      	b.n	8003612 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003600:	f7fe ffb4 	bl	800256c <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	2b02      	cmp	r3, #2
 800360c:	d901      	bls.n	8003612 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e026      	b.n	8003660 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003612:	4b06      	ldr	r3, [pc, #24]	; (800362c <HAL_RCC_OscConfig+0x4c4>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1f0      	bne.n	8003600 <HAL_RCC_OscConfig+0x498>
 800361e:	e01e      	b.n	800365e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	69db      	ldr	r3, [r3, #28]
 8003624:	2b01      	cmp	r3, #1
 8003626:	d107      	bne.n	8003638 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e019      	b.n	8003660 <HAL_RCC_OscConfig+0x4f8>
 800362c:	40021000 	.word	0x40021000
 8003630:	40007000 	.word	0x40007000
 8003634:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003638:	4b0b      	ldr	r3, [pc, #44]	; (8003668 <HAL_RCC_OscConfig+0x500>)
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a1b      	ldr	r3, [r3, #32]
 8003648:	429a      	cmp	r2, r3
 800364a:	d106      	bne.n	800365a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003656:	429a      	cmp	r2, r3
 8003658:	d001      	beq.n	800365e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e000      	b.n	8003660 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800365e:	2300      	movs	r3, #0
}
 8003660:	4618      	mov	r0, r3
 8003662:	3718      	adds	r7, #24
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	40021000 	.word	0x40021000

0800366c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d101      	bne.n	8003680 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e0d0      	b.n	8003822 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003680:	4b6a      	ldr	r3, [pc, #424]	; (800382c <HAL_RCC_ClockConfig+0x1c0>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0307 	and.w	r3, r3, #7
 8003688:	683a      	ldr	r2, [r7, #0]
 800368a:	429a      	cmp	r2, r3
 800368c:	d910      	bls.n	80036b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800368e:	4b67      	ldr	r3, [pc, #412]	; (800382c <HAL_RCC_ClockConfig+0x1c0>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f023 0207 	bic.w	r2, r3, #7
 8003696:	4965      	ldr	r1, [pc, #404]	; (800382c <HAL_RCC_ClockConfig+0x1c0>)
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	4313      	orrs	r3, r2
 800369c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800369e:	4b63      	ldr	r3, [pc, #396]	; (800382c <HAL_RCC_ClockConfig+0x1c0>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0307 	and.w	r3, r3, #7
 80036a6:	683a      	ldr	r2, [r7, #0]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d001      	beq.n	80036b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e0b8      	b.n	8003822 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0302 	and.w	r3, r3, #2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d020      	beq.n	80036fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0304 	and.w	r3, r3, #4
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d005      	beq.n	80036d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036c8:	4b59      	ldr	r3, [pc, #356]	; (8003830 <HAL_RCC_ClockConfig+0x1c4>)
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	4a58      	ldr	r2, [pc, #352]	; (8003830 <HAL_RCC_ClockConfig+0x1c4>)
 80036ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80036d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0308 	and.w	r3, r3, #8
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d005      	beq.n	80036ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036e0:	4b53      	ldr	r3, [pc, #332]	; (8003830 <HAL_RCC_ClockConfig+0x1c4>)
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	4a52      	ldr	r2, [pc, #328]	; (8003830 <HAL_RCC_ClockConfig+0x1c4>)
 80036e6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80036ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036ec:	4b50      	ldr	r3, [pc, #320]	; (8003830 <HAL_RCC_ClockConfig+0x1c4>)
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	494d      	ldr	r1, [pc, #308]	; (8003830 <HAL_RCC_ClockConfig+0x1c4>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	2b00      	cmp	r3, #0
 8003708:	d040      	beq.n	800378c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	2b01      	cmp	r3, #1
 8003710:	d107      	bne.n	8003722 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003712:	4b47      	ldr	r3, [pc, #284]	; (8003830 <HAL_RCC_ClockConfig+0x1c4>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d115      	bne.n	800374a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e07f      	b.n	8003822 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	2b02      	cmp	r3, #2
 8003728:	d107      	bne.n	800373a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800372a:	4b41      	ldr	r3, [pc, #260]	; (8003830 <HAL_RCC_ClockConfig+0x1c4>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d109      	bne.n	800374a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e073      	b.n	8003822 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800373a:	4b3d      	ldr	r3, [pc, #244]	; (8003830 <HAL_RCC_ClockConfig+0x1c4>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0302 	and.w	r3, r3, #2
 8003742:	2b00      	cmp	r3, #0
 8003744:	d101      	bne.n	800374a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e06b      	b.n	8003822 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800374a:	4b39      	ldr	r3, [pc, #228]	; (8003830 <HAL_RCC_ClockConfig+0x1c4>)
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f023 0203 	bic.w	r2, r3, #3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	4936      	ldr	r1, [pc, #216]	; (8003830 <HAL_RCC_ClockConfig+0x1c4>)
 8003758:	4313      	orrs	r3, r2
 800375a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800375c:	f7fe ff06 	bl	800256c <HAL_GetTick>
 8003760:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003762:	e00a      	b.n	800377a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003764:	f7fe ff02 	bl	800256c <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003772:	4293      	cmp	r3, r2
 8003774:	d901      	bls.n	800377a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e053      	b.n	8003822 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800377a:	4b2d      	ldr	r3, [pc, #180]	; (8003830 <HAL_RCC_ClockConfig+0x1c4>)
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	f003 020c 	and.w	r2, r3, #12
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	429a      	cmp	r2, r3
 800378a:	d1eb      	bne.n	8003764 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800378c:	4b27      	ldr	r3, [pc, #156]	; (800382c <HAL_RCC_ClockConfig+0x1c0>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0307 	and.w	r3, r3, #7
 8003794:	683a      	ldr	r2, [r7, #0]
 8003796:	429a      	cmp	r2, r3
 8003798:	d210      	bcs.n	80037bc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800379a:	4b24      	ldr	r3, [pc, #144]	; (800382c <HAL_RCC_ClockConfig+0x1c0>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f023 0207 	bic.w	r2, r3, #7
 80037a2:	4922      	ldr	r1, [pc, #136]	; (800382c <HAL_RCC_ClockConfig+0x1c0>)
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037aa:	4b20      	ldr	r3, [pc, #128]	; (800382c <HAL_RCC_ClockConfig+0x1c0>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0307 	and.w	r3, r3, #7
 80037b2:	683a      	ldr	r2, [r7, #0]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d001      	beq.n	80037bc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e032      	b.n	8003822 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0304 	and.w	r3, r3, #4
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d008      	beq.n	80037da <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037c8:	4b19      	ldr	r3, [pc, #100]	; (8003830 <HAL_RCC_ClockConfig+0x1c4>)
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	4916      	ldr	r1, [pc, #88]	; (8003830 <HAL_RCC_ClockConfig+0x1c4>)
 80037d6:	4313      	orrs	r3, r2
 80037d8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0308 	and.w	r3, r3, #8
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d009      	beq.n	80037fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80037e6:	4b12      	ldr	r3, [pc, #72]	; (8003830 <HAL_RCC_ClockConfig+0x1c4>)
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	00db      	lsls	r3, r3, #3
 80037f4:	490e      	ldr	r1, [pc, #56]	; (8003830 <HAL_RCC_ClockConfig+0x1c4>)
 80037f6:	4313      	orrs	r3, r2
 80037f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80037fa:	f000 f821 	bl	8003840 <HAL_RCC_GetSysClockFreq>
 80037fe:	4602      	mov	r2, r0
 8003800:	4b0b      	ldr	r3, [pc, #44]	; (8003830 <HAL_RCC_ClockConfig+0x1c4>)
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	091b      	lsrs	r3, r3, #4
 8003806:	f003 030f 	and.w	r3, r3, #15
 800380a:	490a      	ldr	r1, [pc, #40]	; (8003834 <HAL_RCC_ClockConfig+0x1c8>)
 800380c:	5ccb      	ldrb	r3, [r1, r3]
 800380e:	fa22 f303 	lsr.w	r3, r2, r3
 8003812:	4a09      	ldr	r2, [pc, #36]	; (8003838 <HAL_RCC_ClockConfig+0x1cc>)
 8003814:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003816:	4b09      	ldr	r3, [pc, #36]	; (800383c <HAL_RCC_ClockConfig+0x1d0>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4618      	mov	r0, r3
 800381c:	f7fe fe64 	bl	80024e8 <HAL_InitTick>

  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3710      	adds	r7, #16
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	40022000 	.word	0x40022000
 8003830:	40021000 	.word	0x40021000
 8003834:	0800c990 	.word	0x0800c990
 8003838:	20000000 	.word	0x20000000
 800383c:	20000004 	.word	0x20000004

08003840 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003840:	b480      	push	{r7}
 8003842:	b087      	sub	sp, #28
 8003844:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003846:	2300      	movs	r3, #0
 8003848:	60fb      	str	r3, [r7, #12]
 800384a:	2300      	movs	r3, #0
 800384c:	60bb      	str	r3, [r7, #8]
 800384e:	2300      	movs	r3, #0
 8003850:	617b      	str	r3, [r7, #20]
 8003852:	2300      	movs	r3, #0
 8003854:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003856:	2300      	movs	r3, #0
 8003858:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800385a:	4b1e      	ldr	r3, [pc, #120]	; (80038d4 <HAL_RCC_GetSysClockFreq+0x94>)
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f003 030c 	and.w	r3, r3, #12
 8003866:	2b04      	cmp	r3, #4
 8003868:	d002      	beq.n	8003870 <HAL_RCC_GetSysClockFreq+0x30>
 800386a:	2b08      	cmp	r3, #8
 800386c:	d003      	beq.n	8003876 <HAL_RCC_GetSysClockFreq+0x36>
 800386e:	e027      	b.n	80038c0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003870:	4b19      	ldr	r3, [pc, #100]	; (80038d8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003872:	613b      	str	r3, [r7, #16]
      break;
 8003874:	e027      	b.n	80038c6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	0c9b      	lsrs	r3, r3, #18
 800387a:	f003 030f 	and.w	r3, r3, #15
 800387e:	4a17      	ldr	r2, [pc, #92]	; (80038dc <HAL_RCC_GetSysClockFreq+0x9c>)
 8003880:	5cd3      	ldrb	r3, [r2, r3]
 8003882:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d010      	beq.n	80038b0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800388e:	4b11      	ldr	r3, [pc, #68]	; (80038d4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	0c5b      	lsrs	r3, r3, #17
 8003894:	f003 0301 	and.w	r3, r3, #1
 8003898:	4a11      	ldr	r2, [pc, #68]	; (80038e0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800389a:	5cd3      	ldrb	r3, [r2, r3]
 800389c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a0d      	ldr	r2, [pc, #52]	; (80038d8 <HAL_RCC_GetSysClockFreq+0x98>)
 80038a2:	fb03 f202 	mul.w	r2, r3, r2
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ac:	617b      	str	r3, [r7, #20]
 80038ae:	e004      	b.n	80038ba <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4a0c      	ldr	r2, [pc, #48]	; (80038e4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80038b4:	fb02 f303 	mul.w	r3, r2, r3
 80038b8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	613b      	str	r3, [r7, #16]
      break;
 80038be:	e002      	b.n	80038c6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80038c0:	4b05      	ldr	r3, [pc, #20]	; (80038d8 <HAL_RCC_GetSysClockFreq+0x98>)
 80038c2:	613b      	str	r3, [r7, #16]
      break;
 80038c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038c6:	693b      	ldr	r3, [r7, #16]
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	371c      	adds	r7, #28
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bc80      	pop	{r7}
 80038d0:	4770      	bx	lr
 80038d2:	bf00      	nop
 80038d4:	40021000 	.word	0x40021000
 80038d8:	007a1200 	.word	0x007a1200
 80038dc:	0800c9a8 	.word	0x0800c9a8
 80038e0:	0800c9b8 	.word	0x0800c9b8
 80038e4:	003d0900 	.word	0x003d0900

080038e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038e8:	b480      	push	{r7}
 80038ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038ec:	4b02      	ldr	r3, [pc, #8]	; (80038f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80038ee:	681b      	ldr	r3, [r3, #0]
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bc80      	pop	{r7}
 80038f6:	4770      	bx	lr
 80038f8:	20000000 	.word	0x20000000

080038fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003900:	f7ff fff2 	bl	80038e8 <HAL_RCC_GetHCLKFreq>
 8003904:	4602      	mov	r2, r0
 8003906:	4b05      	ldr	r3, [pc, #20]	; (800391c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	0a1b      	lsrs	r3, r3, #8
 800390c:	f003 0307 	and.w	r3, r3, #7
 8003910:	4903      	ldr	r1, [pc, #12]	; (8003920 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003912:	5ccb      	ldrb	r3, [r1, r3]
 8003914:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003918:	4618      	mov	r0, r3
 800391a:	bd80      	pop	{r7, pc}
 800391c:	40021000 	.word	0x40021000
 8003920:	0800c9a0 	.word	0x0800c9a0

08003924 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003928:	f7ff ffde 	bl	80038e8 <HAL_RCC_GetHCLKFreq>
 800392c:	4602      	mov	r2, r0
 800392e:	4b05      	ldr	r3, [pc, #20]	; (8003944 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	0adb      	lsrs	r3, r3, #11
 8003934:	f003 0307 	and.w	r3, r3, #7
 8003938:	4903      	ldr	r1, [pc, #12]	; (8003948 <HAL_RCC_GetPCLK2Freq+0x24>)
 800393a:	5ccb      	ldrb	r3, [r1, r3]
 800393c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003940:	4618      	mov	r0, r3
 8003942:	bd80      	pop	{r7, pc}
 8003944:	40021000 	.word	0x40021000
 8003948:	0800c9a0 	.word	0x0800c9a0

0800394c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800394c:	b480      	push	{r7}
 800394e:	b085      	sub	sp, #20
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003954:	4b0a      	ldr	r3, [pc, #40]	; (8003980 <RCC_Delay+0x34>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a0a      	ldr	r2, [pc, #40]	; (8003984 <RCC_Delay+0x38>)
 800395a:	fba2 2303 	umull	r2, r3, r2, r3
 800395e:	0a5b      	lsrs	r3, r3, #9
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	fb02 f303 	mul.w	r3, r2, r3
 8003966:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003968:	bf00      	nop
  }
  while (Delay --);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	1e5a      	subs	r2, r3, #1
 800396e:	60fa      	str	r2, [r7, #12]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d1f9      	bne.n	8003968 <RCC_Delay+0x1c>
}
 8003974:	bf00      	nop
 8003976:	bf00      	nop
 8003978:	3714      	adds	r7, #20
 800397a:	46bd      	mov	sp, r7
 800397c:	bc80      	pop	{r7}
 800397e:	4770      	bx	lr
 8003980:	20000000 	.word	0x20000000
 8003984:	10624dd3 	.word	0x10624dd3

08003988 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b086      	sub	sp, #24
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003990:	2300      	movs	r3, #0
 8003992:	613b      	str	r3, [r7, #16]
 8003994:	2300      	movs	r3, #0
 8003996:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0301 	and.w	r3, r3, #1
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d07d      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80039a4:	2300      	movs	r3, #0
 80039a6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039a8:	4b4f      	ldr	r3, [pc, #316]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039aa:	69db      	ldr	r3, [r3, #28]
 80039ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d10d      	bne.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039b4:	4b4c      	ldr	r3, [pc, #304]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039b6:	69db      	ldr	r3, [r3, #28]
 80039b8:	4a4b      	ldr	r2, [pc, #300]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039be:	61d3      	str	r3, [r2, #28]
 80039c0:	4b49      	ldr	r3, [pc, #292]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039c2:	69db      	ldr	r3, [r3, #28]
 80039c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039c8:	60bb      	str	r3, [r7, #8]
 80039ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039cc:	2301      	movs	r3, #1
 80039ce:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039d0:	4b46      	ldr	r3, [pc, #280]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d118      	bne.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039dc:	4b43      	ldr	r3, [pc, #268]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a42      	ldr	r2, [pc, #264]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039e8:	f7fe fdc0 	bl	800256c <HAL_GetTick>
 80039ec:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039ee:	e008      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039f0:	f7fe fdbc 	bl	800256c <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b64      	cmp	r3, #100	; 0x64
 80039fc:	d901      	bls.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e06d      	b.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a02:	4b3a      	ldr	r3, [pc, #232]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d0f0      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a0e:	4b36      	ldr	r3, [pc, #216]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a10:	6a1b      	ldr	r3, [r3, #32]
 8003a12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a16:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d02e      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a26:	68fa      	ldr	r2, [r7, #12]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d027      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a2c:	4b2e      	ldr	r3, [pc, #184]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a2e:	6a1b      	ldr	r3, [r3, #32]
 8003a30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a34:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a36:	4b2e      	ldr	r3, [pc, #184]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a38:	2201      	movs	r2, #1
 8003a3a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a3c:	4b2c      	ldr	r3, [pc, #176]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a3e:	2200      	movs	r2, #0
 8003a40:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003a42:	4a29      	ldr	r2, [pc, #164]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f003 0301 	and.w	r3, r3, #1
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d014      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a52:	f7fe fd8b 	bl	800256c <HAL_GetTick>
 8003a56:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a58:	e00a      	b.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a5a:	f7fe fd87 	bl	800256c <HAL_GetTick>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d901      	bls.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e036      	b.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a70:	4b1d      	ldr	r3, [pc, #116]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a72:	6a1b      	ldr	r3, [r3, #32]
 8003a74:	f003 0302 	and.w	r3, r3, #2
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d0ee      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a7c:	4b1a      	ldr	r3, [pc, #104]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a7e:	6a1b      	ldr	r3, [r3, #32]
 8003a80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	4917      	ldr	r1, [pc, #92]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a8e:	7dfb      	ldrb	r3, [r7, #23]
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d105      	bne.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a94:	4b14      	ldr	r3, [pc, #80]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a96:	69db      	ldr	r3, [r3, #28]
 8003a98:	4a13      	ldr	r2, [pc, #76]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a9e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0302 	and.w	r3, r3, #2
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d008      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003aac:	4b0e      	ldr	r3, [pc, #56]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	490b      	ldr	r1, [pc, #44]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0310 	and.w	r3, r3, #16
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d008      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003aca:	4b07      	ldr	r3, [pc, #28]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	4904      	ldr	r1, [pc, #16]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3718      	adds	r7, #24
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	40021000 	.word	0x40021000
 8003aec:	40007000 	.word	0x40007000
 8003af0:	42420440 	.word	0x42420440

08003af4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b088      	sub	sp, #32
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003afc:	2300      	movs	r3, #0
 8003afe:	617b      	str	r3, [r7, #20]
 8003b00:	2300      	movs	r3, #0
 8003b02:	61fb      	str	r3, [r7, #28]
 8003b04:	2300      	movs	r3, #0
 8003b06:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	60fb      	str	r3, [r7, #12]
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2b10      	cmp	r3, #16
 8003b14:	d00a      	beq.n	8003b2c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2b10      	cmp	r3, #16
 8003b1a:	f200 808a 	bhi.w	8003c32 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d045      	beq.n	8003bb0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d075      	beq.n	8003c16 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003b2a:	e082      	b.n	8003c32 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003b2c:	4b46      	ldr	r3, [pc, #280]	; (8003c48 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003b32:	4b45      	ldr	r3, [pc, #276]	; (8003c48 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d07b      	beq.n	8003c36 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	0c9b      	lsrs	r3, r3, #18
 8003b42:	f003 030f 	and.w	r3, r3, #15
 8003b46:	4a41      	ldr	r2, [pc, #260]	; (8003c4c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003b48:	5cd3      	ldrb	r3, [r2, r3]
 8003b4a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d015      	beq.n	8003b82 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003b56:	4b3c      	ldr	r3, [pc, #240]	; (8003c48 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	0c5b      	lsrs	r3, r3, #17
 8003b5c:	f003 0301 	and.w	r3, r3, #1
 8003b60:	4a3b      	ldr	r2, [pc, #236]	; (8003c50 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003b62:	5cd3      	ldrb	r3, [r2, r3]
 8003b64:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d00d      	beq.n	8003b8c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003b70:	4a38      	ldr	r2, [pc, #224]	; (8003c54 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	fb02 f303 	mul.w	r3, r2, r3
 8003b7e:	61fb      	str	r3, [r7, #28]
 8003b80:	e004      	b.n	8003b8c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	4a34      	ldr	r2, [pc, #208]	; (8003c58 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003b86:	fb02 f303 	mul.w	r3, r2, r3
 8003b8a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003b8c:	4b2e      	ldr	r3, [pc, #184]	; (8003c48 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b98:	d102      	bne.n	8003ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	61bb      	str	r3, [r7, #24]
      break;
 8003b9e:	e04a      	b.n	8003c36 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	005b      	lsls	r3, r3, #1
 8003ba4:	4a2d      	ldr	r2, [pc, #180]	; (8003c5c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8003baa:	085b      	lsrs	r3, r3, #1
 8003bac:	61bb      	str	r3, [r7, #24]
      break;
 8003bae:	e042      	b.n	8003c36 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003bb0:	4b25      	ldr	r3, [pc, #148]	; (8003c48 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003bb2:	6a1b      	ldr	r3, [r3, #32]
 8003bb4:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bc0:	d108      	bne.n	8003bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	f003 0302 	and.w	r3, r3, #2
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d003      	beq.n	8003bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003bcc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bd0:	61bb      	str	r3, [r7, #24]
 8003bd2:	e01f      	b.n	8003c14 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bde:	d109      	bne.n	8003bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003be0:	4b19      	ldr	r3, [pc, #100]	; (8003c48 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be4:	f003 0302 	and.w	r3, r3, #2
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d003      	beq.n	8003bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003bec:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003bf0:	61bb      	str	r3, [r7, #24]
 8003bf2:	e00f      	b.n	8003c14 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bfa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bfe:	d11c      	bne.n	8003c3a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003c00:	4b11      	ldr	r3, [pc, #68]	; (8003c48 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d016      	beq.n	8003c3a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003c0c:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003c10:	61bb      	str	r3, [r7, #24]
      break;
 8003c12:	e012      	b.n	8003c3a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003c14:	e011      	b.n	8003c3a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003c16:	f7ff fe85 	bl	8003924 <HAL_RCC_GetPCLK2Freq>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	4b0a      	ldr	r3, [pc, #40]	; (8003c48 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	0b9b      	lsrs	r3, r3, #14
 8003c22:	f003 0303 	and.w	r3, r3, #3
 8003c26:	3301      	adds	r3, #1
 8003c28:	005b      	lsls	r3, r3, #1
 8003c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c2e:	61bb      	str	r3, [r7, #24]
      break;
 8003c30:	e004      	b.n	8003c3c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003c32:	bf00      	nop
 8003c34:	e002      	b.n	8003c3c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003c36:	bf00      	nop
 8003c38:	e000      	b.n	8003c3c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003c3a:	bf00      	nop
    }
  }
  return (frequency);
 8003c3c:	69bb      	ldr	r3, [r7, #24]
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3720      	adds	r7, #32
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	40021000 	.word	0x40021000
 8003c4c:	0800c9bc 	.word	0x0800c9bc
 8003c50:	0800c9cc 	.word	0x0800c9cc
 8003c54:	007a1200 	.word	0x007a1200
 8003c58:	003d0900 	.word	0x003d0900
 8003c5c:	aaaaaaab 	.word	0xaaaaaaab

08003c60 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d101      	bne.n	8003c76 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e07a      	b.n	8003d6c <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	7c5b      	ldrb	r3, [r3, #17]
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d105      	bne.n	8003c8c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2200      	movs	r2, #0
 8003c84:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f7fe fa14 	bl	80020b4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2202      	movs	r2, #2
 8003c90:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 faea 	bl	800426c <HAL_RTC_WaitForSynchro>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d004      	beq.n	8003ca8 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2204      	movs	r2, #4
 8003ca2:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e061      	b.n	8003d6c <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f000 fba3 	bl	80043f4 <RTC_EnterInitMode>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d004      	beq.n	8003cbe <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2204      	movs	r2, #4
 8003cb8:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e056      	b.n	8003d6c <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	685a      	ldr	r2, [r3, #4]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f022 0207 	bic.w	r2, r2, #7
 8003ccc:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d005      	beq.n	8003ce2 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8003cd6:	4b27      	ldr	r3, [pc, #156]	; (8003d74 <HAL_RTC_Init+0x114>)
 8003cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cda:	4a26      	ldr	r2, [pc, #152]	; (8003d74 <HAL_RTC_Init+0x114>)
 8003cdc:	f023 0301 	bic.w	r3, r3, #1
 8003ce0:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8003ce2:	4b24      	ldr	r3, [pc, #144]	; (8003d74 <HAL_RTC_Init+0x114>)
 8003ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce6:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	4921      	ldr	r1, [pc, #132]	; (8003d74 <HAL_RTC_Init+0x114>)
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cfc:	d003      	beq.n	8003d06 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	60fb      	str	r3, [r7, #12]
 8003d04:	e00e      	b.n	8003d24 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8003d06:	2001      	movs	r0, #1
 8003d08:	f7ff fef4 	bl	8003af4 <HAL_RCCEx_GetPeriphCLKFreq>
 8003d0c:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d104      	bne.n	8003d1e <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2204      	movs	r2, #4
 8003d18:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e026      	b.n	8003d6c <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	3b01      	subs	r3, #1
 8003d22:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	0c1a      	lsrs	r2, r3, #16
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f002 020f 	and.w	r2, r2, #15
 8003d30:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68fa      	ldr	r2, [r7, #12]
 8003d38:	b292      	uxth	r2, r2
 8003d3a:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f000 fb81 	bl	8004444 <RTC_ExitInitMode>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d004      	beq.n	8003d52 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2204      	movs	r2, #4
 8003d4c:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e00c      	b.n	8003d6c <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2201      	movs	r2, #1
 8003d62:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8003d6a:	2300      	movs	r3, #0
  }
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3710      	adds	r7, #16
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	40006c00 	.word	0x40006c00

08003d78 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003d78:	b590      	push	{r4, r7, lr}
 8003d7a:	b087      	sub	sp, #28
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	60b9      	str	r1, [r7, #8]
 8003d82:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8003d84:	2300      	movs	r3, #0
 8003d86:	617b      	str	r3, [r7, #20]
 8003d88:	2300      	movs	r3, #0
 8003d8a:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d002      	beq.n	8003d98 <HAL_RTC_SetTime+0x20>
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d101      	bne.n	8003d9c <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e080      	b.n	8003e9e <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	7c1b      	ldrb	r3, [r3, #16]
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d101      	bne.n	8003da8 <HAL_RTC_SetTime+0x30>
 8003da4:	2302      	movs	r3, #2
 8003da6:	e07a      	b.n	8003e9e <HAL_RTC_SetTime+0x126>
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2201      	movs	r2, #1
 8003dac:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2202      	movs	r2, #2
 8003db2:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d113      	bne.n	8003de2 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003dc4:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	785b      	ldrb	r3, [r3, #1]
 8003dcc:	4619      	mov	r1, r3
 8003dce:	460b      	mov	r3, r1
 8003dd0:	011b      	lsls	r3, r3, #4
 8003dd2:	1a5b      	subs	r3, r3, r1
 8003dd4:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003dd6:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8003dd8:	68ba      	ldr	r2, [r7, #8]
 8003dda:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003ddc:	4413      	add	r3, r2
 8003dde:	617b      	str	r3, [r7, #20]
 8003de0:	e01e      	b.n	8003e20 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	4618      	mov	r0, r3
 8003de8:	f000 fb71 	bl	80044ce <RTC_Bcd2ToByte>
 8003dec:	4603      	mov	r3, r0
 8003dee:	461a      	mov	r2, r3
 8003df0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003df4:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	785b      	ldrb	r3, [r3, #1]
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f000 fb66 	bl	80044ce <RTC_Bcd2ToByte>
 8003e02:	4603      	mov	r3, r0
 8003e04:	461a      	mov	r2, r3
 8003e06:	4613      	mov	r3, r2
 8003e08:	011b      	lsls	r3, r3, #4
 8003e0a:	1a9b      	subs	r3, r3, r2
 8003e0c:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003e0e:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	789b      	ldrb	r3, [r3, #2]
 8003e14:	4618      	mov	r0, r3
 8003e16:	f000 fb5a 	bl	80044ce <RTC_Bcd2ToByte>
 8003e1a:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003e1c:	4423      	add	r3, r4
 8003e1e:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003e20:	6979      	ldr	r1, [r7, #20]
 8003e22:	68f8      	ldr	r0, [r7, #12]
 8003e24:	f000 fa7f 	bl	8004326 <RTC_WriteTimeCounter>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d007      	beq.n	8003e3e <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2204      	movs	r2, #4
 8003e32:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2200      	movs	r2, #0
 8003e38:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e02f      	b.n	8003e9e <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	685a      	ldr	r2, [r3, #4]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f022 0205 	bic.w	r2, r2, #5
 8003e4c:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003e4e:	68f8      	ldr	r0, [r7, #12]
 8003e50:	f000 fa90 	bl	8004374 <RTC_ReadAlarmCounter>
 8003e54:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e5c:	d018      	beq.n	8003e90 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8003e5e:	693a      	ldr	r2, [r7, #16]
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d214      	bcs.n	8003e90 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8003e6c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003e70:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003e72:	6939      	ldr	r1, [r7, #16]
 8003e74:	68f8      	ldr	r0, [r7, #12]
 8003e76:	f000 fa96 	bl	80043a6 <RTC_WriteAlarmCounter>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d007      	beq.n	8003e90 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2204      	movs	r2, #4
 8003e84:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e006      	b.n	8003e9e <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2201      	movs	r2, #1
 8003e94:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
  }
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	371c      	adds	r7, #28
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd90      	pop	{r4, r7, pc}
	...

08003ea8 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b088      	sub	sp, #32
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	60b9      	str	r1, [r7, #8]
 8003eb2:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	61bb      	str	r3, [r7, #24]
 8003eb8:	2300      	movs	r3, #0
 8003eba:	61fb      	str	r3, [r7, #28]
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	617b      	str	r3, [r7, #20]
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d002      	beq.n	8003ed0 <HAL_RTC_GetTime+0x28>
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d101      	bne.n	8003ed4 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e0b5      	b.n	8004040 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	f003 0304 	and.w	r3, r3, #4
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d001      	beq.n	8003ee6 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e0ac      	b.n	8004040 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8003ee6:	68f8      	ldr	r0, [r7, #12]
 8003ee8:	f000 f9ed 	bl	80042c6 <RTC_ReadTimeCounter>
 8003eec:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	4a55      	ldr	r2, [pc, #340]	; (8004048 <HAL_RTC_GetTime+0x1a0>)
 8003ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef6:	0adb      	lsrs	r3, r3, #11
 8003ef8:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8003efa:	69ba      	ldr	r2, [r7, #24]
 8003efc:	4b52      	ldr	r3, [pc, #328]	; (8004048 <HAL_RTC_GetTime+0x1a0>)
 8003efe:	fba3 1302 	umull	r1, r3, r3, r2
 8003f02:	0adb      	lsrs	r3, r3, #11
 8003f04:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8003f08:	fb01 f303 	mul.w	r3, r1, r3
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	4a4f      	ldr	r2, [pc, #316]	; (800404c <HAL_RTC_GetTime+0x1a4>)
 8003f10:	fba2 2303 	umull	r2, r3, r2, r3
 8003f14:	095b      	lsrs	r3, r3, #5
 8003f16:	b2da      	uxtb	r2, r3
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	4a4a      	ldr	r2, [pc, #296]	; (8004048 <HAL_RTC_GetTime+0x1a0>)
 8003f20:	fba2 1203 	umull	r1, r2, r2, r3
 8003f24:	0ad2      	lsrs	r2, r2, #11
 8003f26:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8003f2a:	fb01 f202 	mul.w	r2, r1, r2
 8003f2e:	1a9a      	subs	r2, r3, r2
 8003f30:	4b46      	ldr	r3, [pc, #280]	; (800404c <HAL_RTC_GetTime+0x1a4>)
 8003f32:	fba3 1302 	umull	r1, r3, r3, r2
 8003f36:	0959      	lsrs	r1, r3, #5
 8003f38:	460b      	mov	r3, r1
 8003f3a:	011b      	lsls	r3, r3, #4
 8003f3c:	1a5b      	subs	r3, r3, r1
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	1ad1      	subs	r1, r2, r3
 8003f42:	b2ca      	uxtb	r2, r1
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	2b17      	cmp	r3, #23
 8003f4c:	d955      	bls.n	8003ffa <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	4a3f      	ldr	r2, [pc, #252]	; (8004050 <HAL_RTC_GetTime+0x1a8>)
 8003f52:	fba2 2303 	umull	r2, r3, r2, r3
 8003f56:	091b      	lsrs	r3, r3, #4
 8003f58:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8003f5a:	6939      	ldr	r1, [r7, #16]
 8003f5c:	4b3c      	ldr	r3, [pc, #240]	; (8004050 <HAL_RTC_GetTime+0x1a8>)
 8003f5e:	fba3 2301 	umull	r2, r3, r3, r1
 8003f62:	091a      	lsrs	r2, r3, #4
 8003f64:	4613      	mov	r3, r2
 8003f66:	005b      	lsls	r3, r3, #1
 8003f68:	4413      	add	r3, r2
 8003f6a:	00db      	lsls	r3, r3, #3
 8003f6c:	1aca      	subs	r2, r1, r3
 8003f6e:	b2d2      	uxtb	r2, r2
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003f74:	68f8      	ldr	r0, [r7, #12]
 8003f76:	f000 f9fd 	bl	8004374 <RTC_ReadAlarmCounter>
 8003f7a:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f82:	d008      	beq.n	8003f96 <HAL_RTC_GetTime+0xee>
 8003f84:	69fa      	ldr	r2, [r7, #28]
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d904      	bls.n	8003f96 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8003f8c:	69fa      	ldr	r2, [r7, #28]
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	61fb      	str	r3, [r7, #28]
 8003f94:	e002      	b.n	8003f9c <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8003f96:	f04f 33ff 	mov.w	r3, #4294967295
 8003f9a:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	4a2d      	ldr	r2, [pc, #180]	; (8004054 <HAL_RTC_GetTime+0x1ac>)
 8003fa0:	fb02 f303 	mul.w	r3, r2, r3
 8003fa4:	69ba      	ldr	r2, [r7, #24]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003faa:	69b9      	ldr	r1, [r7, #24]
 8003fac:	68f8      	ldr	r0, [r7, #12]
 8003fae:	f000 f9ba 	bl	8004326 <RTC_WriteTimeCounter>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d001      	beq.n	8003fbc <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e041      	b.n	8004040 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc2:	d00c      	beq.n	8003fde <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8003fc4:	69fa      	ldr	r2, [r7, #28]
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	4413      	add	r3, r2
 8003fca:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003fcc:	69f9      	ldr	r1, [r7, #28]
 8003fce:	68f8      	ldr	r0, [r7, #12]
 8003fd0:	f000 f9e9 	bl	80043a6 <RTC_WriteAlarmCounter>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d00a      	beq.n	8003ff0 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e030      	b.n	8004040 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003fde:	69f9      	ldr	r1, [r7, #28]
 8003fe0:	68f8      	ldr	r0, [r7, #12]
 8003fe2:	f000 f9e0 	bl	80043a6 <RTC_WriteAlarmCounter>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d001      	beq.n	8003ff0 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e027      	b.n	8004040 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8003ff0:	6979      	ldr	r1, [r7, #20]
 8003ff2:	68f8      	ldr	r0, [r7, #12]
 8003ff4:	f000 fa88 	bl	8004508 <RTC_DateUpdate>
 8003ff8:	e003      	b.n	8004002 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	b2da      	uxtb	r2, r3
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d01a      	beq.n	800403e <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	4618      	mov	r0, r3
 800400e:	f000 fa41 	bl	8004494 <RTC_ByteToBcd2>
 8004012:	4603      	mov	r3, r0
 8004014:	461a      	mov	r2, r3
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	785b      	ldrb	r3, [r3, #1]
 800401e:	4618      	mov	r0, r3
 8004020:	f000 fa38 	bl	8004494 <RTC_ByteToBcd2>
 8004024:	4603      	mov	r3, r0
 8004026:	461a      	mov	r2, r3
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	789b      	ldrb	r3, [r3, #2]
 8004030:	4618      	mov	r0, r3
 8004032:	f000 fa2f 	bl	8004494 <RTC_ByteToBcd2>
 8004036:	4603      	mov	r3, r0
 8004038:	461a      	mov	r2, r3
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800403e:	2300      	movs	r3, #0
}
 8004040:	4618      	mov	r0, r3
 8004042:	3720      	adds	r7, #32
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}
 8004048:	91a2b3c5 	.word	0x91a2b3c5
 800404c:	88888889 	.word	0x88888889
 8004050:	aaaaaaab 	.word	0xaaaaaaab
 8004054:	00015180 	.word	0x00015180

08004058 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b088      	sub	sp, #32
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8004064:	2300      	movs	r3, #0
 8004066:	61fb      	str	r3, [r7, #28]
 8004068:	2300      	movs	r3, #0
 800406a:	61bb      	str	r3, [r7, #24]
 800406c:	2300      	movs	r3, #0
 800406e:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d002      	beq.n	800407c <HAL_RTC_SetDate+0x24>
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d101      	bne.n	8004080 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e097      	b.n	80041b0 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	7c1b      	ldrb	r3, [r3, #16]
 8004084:	2b01      	cmp	r3, #1
 8004086:	d101      	bne.n	800408c <HAL_RTC_SetDate+0x34>
 8004088:	2302      	movs	r3, #2
 800408a:	e091      	b.n	80041b0 <HAL_RTC_SetDate+0x158>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2201      	movs	r2, #1
 8004090:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2202      	movs	r2, #2
 8004096:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d10c      	bne.n	80040b8 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	78da      	ldrb	r2, [r3, #3]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	785a      	ldrb	r2, [r3, #1]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	789a      	ldrb	r2, [r3, #2]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	739a      	strb	r2, [r3, #14]
 80040b6:	e01a      	b.n	80040ee <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	78db      	ldrb	r3, [r3, #3]
 80040bc:	4618      	mov	r0, r3
 80040be:	f000 fa06 	bl	80044ce <RTC_Bcd2ToByte>
 80040c2:	4603      	mov	r3, r0
 80040c4:	461a      	mov	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	785b      	ldrb	r3, [r3, #1]
 80040ce:	4618      	mov	r0, r3
 80040d0:	f000 f9fd 	bl	80044ce <RTC_Bcd2ToByte>
 80040d4:	4603      	mov	r3, r0
 80040d6:	461a      	mov	r2, r3
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	789b      	ldrb	r3, [r3, #2]
 80040e0:	4618      	mov	r0, r3
 80040e2:	f000 f9f4 	bl	80044ce <RTC_Bcd2ToByte>
 80040e6:	4603      	mov	r3, r0
 80040e8:	461a      	mov	r2, r3
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	7bdb      	ldrb	r3, [r3, #15]
 80040f2:	4618      	mov	r0, r3
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	7b59      	ldrb	r1, [r3, #13]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	7b9b      	ldrb	r3, [r3, #14]
 80040fc:	461a      	mov	r2, r3
 80040fe:	f000 fadf 	bl	80046c0 <RTC_WeekDayNum>
 8004102:	4603      	mov	r3, r0
 8004104:	461a      	mov	r2, r3
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	7b1a      	ldrb	r2, [r3, #12]
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8004112:	68f8      	ldr	r0, [r7, #12]
 8004114:	f000 f8d7 	bl	80042c6 <RTC_ReadTimeCounter>
 8004118:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	4a26      	ldr	r2, [pc, #152]	; (80041b8 <HAL_RTC_SetDate+0x160>)
 800411e:	fba2 2303 	umull	r2, r3, r2, r3
 8004122:	0adb      	lsrs	r3, r3, #11
 8004124:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	2b18      	cmp	r3, #24
 800412a:	d93a      	bls.n	80041a2 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	4a23      	ldr	r2, [pc, #140]	; (80041bc <HAL_RTC_SetDate+0x164>)
 8004130:	fba2 2303 	umull	r2, r3, r2, r3
 8004134:	091b      	lsrs	r3, r3, #4
 8004136:	4a22      	ldr	r2, [pc, #136]	; (80041c0 <HAL_RTC_SetDate+0x168>)
 8004138:	fb02 f303 	mul.w	r3, r2, r3
 800413c:	69fa      	ldr	r2, [r7, #28]
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004142:	69f9      	ldr	r1, [r7, #28]
 8004144:	68f8      	ldr	r0, [r7, #12]
 8004146:	f000 f8ee 	bl	8004326 <RTC_WriteTimeCounter>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d007      	beq.n	8004160 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2204      	movs	r2, #4
 8004154:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2200      	movs	r2, #0
 800415a:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e027      	b.n	80041b0 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004160:	68f8      	ldr	r0, [r7, #12]
 8004162:	f000 f907 	bl	8004374 <RTC_ReadAlarmCounter>
 8004166:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800416e:	d018      	beq.n	80041a2 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8004170:	69ba      	ldr	r2, [r7, #24]
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	429a      	cmp	r2, r3
 8004176:	d214      	bcs.n	80041a2 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 800417e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004182:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004184:	69b9      	ldr	r1, [r7, #24]
 8004186:	68f8      	ldr	r0, [r7, #12]
 8004188:	f000 f90d 	bl	80043a6 <RTC_WriteAlarmCounter>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d007      	beq.n	80041a2 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2204      	movs	r2, #4
 8004196:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2200      	movs	r2, #0
 800419c:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e006      	b.n	80041b0 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2201      	movs	r2, #1
 80041a6:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2200      	movs	r2, #0
 80041ac:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80041ae:	2300      	movs	r3, #0
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3720      	adds	r7, #32
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	91a2b3c5 	.word	0x91a2b3c5
 80041bc:	aaaaaaab 	.word	0xaaaaaaab
 80041c0:	00015180 	.word	0x00015180

080041c4 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b086      	sub	sp, #24
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 80041d0:	f107 0314 	add.w	r3, r7, #20
 80041d4:	2100      	movs	r1, #0
 80041d6:	460a      	mov	r2, r1
 80041d8:	801a      	strh	r2, [r3, #0]
 80041da:	460a      	mov	r2, r1
 80041dc:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d002      	beq.n	80041ea <HAL_RTC_GetDate+0x26>
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d101      	bne.n	80041ee <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e03a      	b.n	8004264 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 80041ee:	f107 0314 	add.w	r3, r7, #20
 80041f2:	2200      	movs	r2, #0
 80041f4:	4619      	mov	r1, r3
 80041f6:	68f8      	ldr	r0, [r7, #12]
 80041f8:	f7ff fe56 	bl	8003ea8 <HAL_RTC_GetTime>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d001      	beq.n	8004206 <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e02e      	b.n	8004264 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	7b1a      	ldrb	r2, [r3, #12]
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	7bda      	ldrb	r2, [r3, #15]
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	7b5a      	ldrb	r2, [r3, #13]
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	7b9a      	ldrb	r2, [r3, #14]
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d01a      	beq.n	8004262 <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	78db      	ldrb	r3, [r3, #3]
 8004230:	4618      	mov	r0, r3
 8004232:	f000 f92f 	bl	8004494 <RTC_ByteToBcd2>
 8004236:	4603      	mov	r3, r0
 8004238:	461a      	mov	r2, r3
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	785b      	ldrb	r3, [r3, #1]
 8004242:	4618      	mov	r0, r3
 8004244:	f000 f926 	bl	8004494 <RTC_ByteToBcd2>
 8004248:	4603      	mov	r3, r0
 800424a:	461a      	mov	r2, r3
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	789b      	ldrb	r3, [r3, #2]
 8004254:	4618      	mov	r0, r3
 8004256:	f000 f91d 	bl	8004494 <RTC_ByteToBcd2>
 800425a:	4603      	mov	r3, r0
 800425c:	461a      	mov	r2, r3
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004262:	2300      	movs	r3, #0
}
 8004264:	4618      	mov	r0, r3
 8004266:	3718      	adds	r7, #24
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b084      	sub	sp, #16
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004274:	2300      	movs	r3, #0
 8004276:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d101      	bne.n	8004282 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e01d      	b.n	80042be <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	685a      	ldr	r2, [r3, #4]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f022 0208 	bic.w	r2, r2, #8
 8004290:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004292:	f7fe f96b 	bl	800256c <HAL_GetTick>
 8004296:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004298:	e009      	b.n	80042ae <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800429a:	f7fe f967 	bl	800256c <HAL_GetTick>
 800429e:	4602      	mov	r2, r0
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80042a8:	d901      	bls.n	80042ae <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e007      	b.n	80042be <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f003 0308 	and.w	r3, r3, #8
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d0ee      	beq.n	800429a <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80042bc:	2300      	movs	r3, #0
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3710      	adds	r7, #16
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}

080042c6 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 80042c6:	b480      	push	{r7}
 80042c8:	b087      	sub	sp, #28
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 80042ce:	2300      	movs	r3, #0
 80042d0:	827b      	strh	r3, [r7, #18]
 80042d2:	2300      	movs	r3, #0
 80042d4:	823b      	strh	r3, [r7, #16]
 80042d6:	2300      	movs	r3, #0
 80042d8:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80042da:	2300      	movs	r3, #0
 80042dc:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	69db      	ldr	r3, [r3, #28]
 80042ec:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	699b      	ldr	r3, [r3, #24]
 80042f4:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 80042f6:	8a7a      	ldrh	r2, [r7, #18]
 80042f8:	8a3b      	ldrh	r3, [r7, #16]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d008      	beq.n	8004310 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80042fe:	8a3b      	ldrh	r3, [r7, #16]
 8004300:	041a      	lsls	r2, r3, #16
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	69db      	ldr	r3, [r3, #28]
 8004308:	b29b      	uxth	r3, r3
 800430a:	4313      	orrs	r3, r2
 800430c:	617b      	str	r3, [r7, #20]
 800430e:	e004      	b.n	800431a <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8004310:	8a7b      	ldrh	r3, [r7, #18]
 8004312:	041a      	lsls	r2, r3, #16
 8004314:	89fb      	ldrh	r3, [r7, #14]
 8004316:	4313      	orrs	r3, r2
 8004318:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 800431a:	697b      	ldr	r3, [r7, #20]
}
 800431c:	4618      	mov	r0, r3
 800431e:	371c      	adds	r7, #28
 8004320:	46bd      	mov	sp, r7
 8004322:	bc80      	pop	{r7}
 8004324:	4770      	bx	lr

08004326 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8004326:	b580      	push	{r7, lr}
 8004328:	b084      	sub	sp, #16
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
 800432e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004330:	2300      	movs	r3, #0
 8004332:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f000 f85d 	bl	80043f4 <RTC_EnterInitMode>
 800433a:	4603      	mov	r3, r0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d002      	beq.n	8004346 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	73fb      	strb	r3, [r7, #15]
 8004344:	e011      	b.n	800436a <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	683a      	ldr	r2, [r7, #0]
 800434c:	0c12      	lsrs	r2, r2, #16
 800434e:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	683a      	ldr	r2, [r7, #0]
 8004356:	b292      	uxth	r2, r2
 8004358:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f000 f872 	bl	8004444 <RTC_ExitInitMode>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d001      	beq.n	800436a <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800436a:	7bfb      	ldrb	r3, [r7, #15]
}
 800436c:	4618      	mov	r0, r3
 800436e:	3710      	adds	r7, #16
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8004374:	b480      	push	{r7}
 8004376:	b085      	sub	sp, #20
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 800437c:	2300      	movs	r3, #0
 800437e:	81fb      	strh	r3, [r7, #14]
 8004380:	2300      	movs	r3, #0
 8004382:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	6a1b      	ldr	r3, [r3, #32]
 800438a:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004392:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8004394:	89fb      	ldrh	r3, [r7, #14]
 8004396:	041a      	lsls	r2, r3, #16
 8004398:	89bb      	ldrh	r3, [r7, #12]
 800439a:	4313      	orrs	r3, r2
}
 800439c:	4618      	mov	r0, r3
 800439e:	3714      	adds	r7, #20
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bc80      	pop	{r7}
 80043a4:	4770      	bx	lr

080043a6 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 80043a6:	b580      	push	{r7, lr}
 80043a8:	b084      	sub	sp, #16
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]
 80043ae:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043b0:	2300      	movs	r3, #0
 80043b2:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f000 f81d 	bl	80043f4 <RTC_EnterInitMode>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d002      	beq.n	80043c6 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	73fb      	strb	r3, [r7, #15]
 80043c4:	e011      	b.n	80043ea <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	683a      	ldr	r2, [r7, #0]
 80043cc:	0c12      	lsrs	r2, r2, #16
 80043ce:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	683a      	ldr	r2, [r7, #0]
 80043d6:	b292      	uxth	r2, r2
 80043d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 f832 	bl	8004444 <RTC_ExitInitMode>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d001      	beq.n	80043ea <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80043ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3710      	adds	r7, #16
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b084      	sub	sp, #16
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80043fc:	2300      	movs	r3, #0
 80043fe:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8004400:	f7fe f8b4 	bl	800256c <HAL_GetTick>
 8004404:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004406:	e009      	b.n	800441c <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004408:	f7fe f8b0 	bl	800256c <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004416:	d901      	bls.n	800441c <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	e00f      	b.n	800443c <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	f003 0320 	and.w	r3, r3, #32
 8004426:	2b00      	cmp	r3, #0
 8004428:	d0ee      	beq.n	8004408 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	685a      	ldr	r2, [r3, #4]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f042 0210 	orr.w	r2, r2, #16
 8004438:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800443a:	2300      	movs	r3, #0
}
 800443c:	4618      	mov	r0, r3
 800443e:	3710      	adds	r7, #16
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800444c:	2300      	movs	r3, #0
 800444e:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	685a      	ldr	r2, [r3, #4]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f022 0210 	bic.w	r2, r2, #16
 800445e:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004460:	f7fe f884 	bl	800256c <HAL_GetTick>
 8004464:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004466:	e009      	b.n	800447c <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004468:	f7fe f880 	bl	800256c <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004476:	d901      	bls.n	800447c <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8004478:	2303      	movs	r3, #3
 800447a:	e007      	b.n	800448c <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	f003 0320 	and.w	r3, r3, #32
 8004486:	2b00      	cmp	r3, #0
 8004488:	d0ee      	beq.n	8004468 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 800448a:	2300      	movs	r3, #0
}
 800448c:	4618      	mov	r0, r3
 800448e:	3710      	adds	r7, #16
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004494:	b480      	push	{r7}
 8004496:	b085      	sub	sp, #20
 8004498:	af00      	add	r7, sp, #0
 800449a:	4603      	mov	r3, r0
 800449c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800449e:	2300      	movs	r3, #0
 80044a0:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 80044a2:	e005      	b.n	80044b0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	3301      	adds	r3, #1
 80044a8:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80044aa:	79fb      	ldrb	r3, [r7, #7]
 80044ac:	3b0a      	subs	r3, #10
 80044ae:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 80044b0:	79fb      	ldrb	r3, [r7, #7]
 80044b2:	2b09      	cmp	r3, #9
 80044b4:	d8f6      	bhi.n	80044a4 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	011b      	lsls	r3, r3, #4
 80044bc:	b2da      	uxtb	r2, r3
 80044be:	79fb      	ldrb	r3, [r7, #7]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	b2db      	uxtb	r3, r3
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3714      	adds	r7, #20
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bc80      	pop	{r7}
 80044cc:	4770      	bx	lr

080044ce <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80044ce:	b480      	push	{r7}
 80044d0:	b085      	sub	sp, #20
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	4603      	mov	r3, r0
 80044d6:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80044d8:	2300      	movs	r3, #0
 80044da:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80044dc:	79fb      	ldrb	r3, [r7, #7]
 80044de:	091b      	lsrs	r3, r3, #4
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	461a      	mov	r2, r3
 80044e4:	4613      	mov	r3, r2
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	4413      	add	r3, r2
 80044ea:	005b      	lsls	r3, r3, #1
 80044ec:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80044ee:	79fb      	ldrb	r3, [r7, #7]
 80044f0:	f003 030f 	and.w	r3, r3, #15
 80044f4:	b2da      	uxtb	r2, r3
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	4413      	add	r3, r2
 80044fc:	b2db      	uxtb	r3, r3
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3714      	adds	r7, #20
 8004502:	46bd      	mov	sp, r7
 8004504:	bc80      	pop	{r7}
 8004506:	4770      	bx	lr

08004508 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b086      	sub	sp, #24
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8004512:	2300      	movs	r3, #0
 8004514:	617b      	str	r3, [r7, #20]
 8004516:	2300      	movs	r3, #0
 8004518:	613b      	str	r3, [r7, #16]
 800451a:	2300      	movs	r3, #0
 800451c:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 800451e:	2300      	movs	r3, #0
 8004520:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	7bdb      	ldrb	r3, [r3, #15]
 8004526:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	7b5b      	ldrb	r3, [r3, #13]
 800452c:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	7b9b      	ldrb	r3, [r3, #14]
 8004532:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8004534:	2300      	movs	r3, #0
 8004536:	60bb      	str	r3, [r7, #8]
 8004538:	e06f      	b.n	800461a <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	2b01      	cmp	r3, #1
 800453e:	d011      	beq.n	8004564 <RTC_DateUpdate+0x5c>
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	2b03      	cmp	r3, #3
 8004544:	d00e      	beq.n	8004564 <RTC_DateUpdate+0x5c>
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	2b05      	cmp	r3, #5
 800454a:	d00b      	beq.n	8004564 <RTC_DateUpdate+0x5c>
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	2b07      	cmp	r3, #7
 8004550:	d008      	beq.n	8004564 <RTC_DateUpdate+0x5c>
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	2b08      	cmp	r3, #8
 8004556:	d005      	beq.n	8004564 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	2b0a      	cmp	r3, #10
 800455c:	d002      	beq.n	8004564 <RTC_DateUpdate+0x5c>
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	2b0c      	cmp	r3, #12
 8004562:	d117      	bne.n	8004594 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2b1e      	cmp	r3, #30
 8004568:	d803      	bhi.n	8004572 <RTC_DateUpdate+0x6a>
      {
        day++;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	3301      	adds	r3, #1
 800456e:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8004570:	e050      	b.n	8004614 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	2b0c      	cmp	r3, #12
 8004576:	d005      	beq.n	8004584 <RTC_DateUpdate+0x7c>
        {
          month++;
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	3301      	adds	r3, #1
 800457c:	613b      	str	r3, [r7, #16]
          day = 1U;
 800457e:	2301      	movs	r3, #1
 8004580:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8004582:	e047      	b.n	8004614 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8004584:	2301      	movs	r3, #1
 8004586:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004588:	2301      	movs	r3, #1
 800458a:	60fb      	str	r3, [r7, #12]
          year++;
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	3301      	adds	r3, #1
 8004590:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8004592:	e03f      	b.n	8004614 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	2b04      	cmp	r3, #4
 8004598:	d008      	beq.n	80045ac <RTC_DateUpdate+0xa4>
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	2b06      	cmp	r3, #6
 800459e:	d005      	beq.n	80045ac <RTC_DateUpdate+0xa4>
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	2b09      	cmp	r3, #9
 80045a4:	d002      	beq.n	80045ac <RTC_DateUpdate+0xa4>
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	2b0b      	cmp	r3, #11
 80045aa:	d10c      	bne.n	80045c6 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2b1d      	cmp	r3, #29
 80045b0:	d803      	bhi.n	80045ba <RTC_DateUpdate+0xb2>
      {
        day++;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	3301      	adds	r3, #1
 80045b6:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80045b8:	e02c      	b.n	8004614 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	3301      	adds	r3, #1
 80045be:	613b      	str	r3, [r7, #16]
        day = 1U;
 80045c0:	2301      	movs	r3, #1
 80045c2:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80045c4:	e026      	b.n	8004614 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d123      	bne.n	8004614 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2b1b      	cmp	r3, #27
 80045d0:	d803      	bhi.n	80045da <RTC_DateUpdate+0xd2>
      {
        day++;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	3301      	adds	r3, #1
 80045d6:	60fb      	str	r3, [r7, #12]
 80045d8:	e01c      	b.n	8004614 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2b1c      	cmp	r3, #28
 80045de:	d111      	bne.n	8004604 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	4618      	mov	r0, r3
 80045e6:	f000 f839 	bl	800465c <RTC_IsLeapYear>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d003      	beq.n	80045f8 <RTC_DateUpdate+0xf0>
        {
          day++;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	3301      	adds	r3, #1
 80045f4:	60fb      	str	r3, [r7, #12]
 80045f6:	e00d      	b.n	8004614 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	3301      	adds	r3, #1
 80045fc:	613b      	str	r3, [r7, #16]
          day = 1U;
 80045fe:	2301      	movs	r3, #1
 8004600:	60fb      	str	r3, [r7, #12]
 8004602:	e007      	b.n	8004614 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2b1d      	cmp	r3, #29
 8004608:	d104      	bne.n	8004614 <RTC_DateUpdate+0x10c>
      {
        month++;
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	3301      	adds	r3, #1
 800460e:	613b      	str	r3, [r7, #16]
        day = 1U;
 8004610:	2301      	movs	r3, #1
 8004612:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	3301      	adds	r3, #1
 8004618:	60bb      	str	r3, [r7, #8]
 800461a:	68ba      	ldr	r2, [r7, #8]
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	429a      	cmp	r2, r3
 8004620:	d38b      	bcc.n	800453a <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	b2da      	uxtb	r2, r3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	b2da      	uxtb	r2, r3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	b2da      	uxtb	r2, r3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	b2db      	uxtb	r3, r3
 800463e:	68fa      	ldr	r2, [r7, #12]
 8004640:	b2d2      	uxtb	r2, r2
 8004642:	4619      	mov	r1, r3
 8004644:	6978      	ldr	r0, [r7, #20]
 8004646:	f000 f83b 	bl	80046c0 <RTC_WeekDayNum>
 800464a:	4603      	mov	r3, r0
 800464c:	461a      	mov	r2, r3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	731a      	strb	r2, [r3, #12]
}
 8004652:	bf00      	nop
 8004654:	3718      	adds	r7, #24
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
	...

0800465c <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 800465c:	b480      	push	{r7}
 800465e:	b083      	sub	sp, #12
 8004660:	af00      	add	r7, sp, #0
 8004662:	4603      	mov	r3, r0
 8004664:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8004666:	88fb      	ldrh	r3, [r7, #6]
 8004668:	f003 0303 	and.w	r3, r3, #3
 800466c:	b29b      	uxth	r3, r3
 800466e:	2b00      	cmp	r3, #0
 8004670:	d001      	beq.n	8004676 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8004672:	2300      	movs	r3, #0
 8004674:	e01d      	b.n	80046b2 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8004676:	88fb      	ldrh	r3, [r7, #6]
 8004678:	4a10      	ldr	r2, [pc, #64]	; (80046bc <RTC_IsLeapYear+0x60>)
 800467a:	fba2 1203 	umull	r1, r2, r2, r3
 800467e:	0952      	lsrs	r2, r2, #5
 8004680:	2164      	movs	r1, #100	; 0x64
 8004682:	fb01 f202 	mul.w	r2, r1, r2
 8004686:	1a9b      	subs	r3, r3, r2
 8004688:	b29b      	uxth	r3, r3
 800468a:	2b00      	cmp	r3, #0
 800468c:	d001      	beq.n	8004692 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 800468e:	2301      	movs	r3, #1
 8004690:	e00f      	b.n	80046b2 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8004692:	88fb      	ldrh	r3, [r7, #6]
 8004694:	4a09      	ldr	r2, [pc, #36]	; (80046bc <RTC_IsLeapYear+0x60>)
 8004696:	fba2 1203 	umull	r1, r2, r2, r3
 800469a:	09d2      	lsrs	r2, r2, #7
 800469c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80046a0:	fb01 f202 	mul.w	r2, r1, r2
 80046a4:	1a9b      	subs	r3, r3, r2
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d101      	bne.n	80046b0 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e000      	b.n	80046b2 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 80046b0:	2300      	movs	r3, #0
  }
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	370c      	adds	r7, #12
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bc80      	pop	{r7}
 80046ba:	4770      	bx	lr
 80046bc:	51eb851f 	.word	0x51eb851f

080046c0 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b085      	sub	sp, #20
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	460b      	mov	r3, r1
 80046ca:	70fb      	strb	r3, [r7, #3]
 80046cc:	4613      	mov	r3, r2
 80046ce:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 80046d0:	2300      	movs	r3, #0
 80046d2:	60bb      	str	r3, [r7, #8]
 80046d4:	2300      	movs	r3, #0
 80046d6:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80046de:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 80046e0:	78fb      	ldrb	r3, [r7, #3]
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	d82d      	bhi.n	8004742 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80046e6:	78fa      	ldrb	r2, [r7, #3]
 80046e8:	4613      	mov	r3, r2
 80046ea:	005b      	lsls	r3, r3, #1
 80046ec:	4413      	add	r3, r2
 80046ee:	00db      	lsls	r3, r3, #3
 80046f0:	1a9b      	subs	r3, r3, r2
 80046f2:	4a2c      	ldr	r2, [pc, #176]	; (80047a4 <RTC_WeekDayNum+0xe4>)
 80046f4:	fba2 2303 	umull	r2, r3, r2, r3
 80046f8:	085a      	lsrs	r2, r3, #1
 80046fa:	78bb      	ldrb	r3, [r7, #2]
 80046fc:	441a      	add	r2, r3
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	441a      	add	r2, r3
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	3b01      	subs	r3, #1
 8004706:	089b      	lsrs	r3, r3, #2
 8004708:	441a      	add	r2, r3
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	3b01      	subs	r3, #1
 800470e:	4926      	ldr	r1, [pc, #152]	; (80047a8 <RTC_WeekDayNum+0xe8>)
 8004710:	fba1 1303 	umull	r1, r3, r1, r3
 8004714:	095b      	lsrs	r3, r3, #5
 8004716:	1ad2      	subs	r2, r2, r3
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	3b01      	subs	r3, #1
 800471c:	4922      	ldr	r1, [pc, #136]	; (80047a8 <RTC_WeekDayNum+0xe8>)
 800471e:	fba1 1303 	umull	r1, r3, r1, r3
 8004722:	09db      	lsrs	r3, r3, #7
 8004724:	4413      	add	r3, r2
 8004726:	1d1a      	adds	r2, r3, #4
 8004728:	4b20      	ldr	r3, [pc, #128]	; (80047ac <RTC_WeekDayNum+0xec>)
 800472a:	fba3 1302 	umull	r1, r3, r3, r2
 800472e:	1ad1      	subs	r1, r2, r3
 8004730:	0849      	lsrs	r1, r1, #1
 8004732:	440b      	add	r3, r1
 8004734:	0899      	lsrs	r1, r3, #2
 8004736:	460b      	mov	r3, r1
 8004738:	00db      	lsls	r3, r3, #3
 800473a:	1a5b      	subs	r3, r3, r1
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	60fb      	str	r3, [r7, #12]
 8004740:	e029      	b.n	8004796 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8004742:	78fa      	ldrb	r2, [r7, #3]
 8004744:	4613      	mov	r3, r2
 8004746:	005b      	lsls	r3, r3, #1
 8004748:	4413      	add	r3, r2
 800474a:	00db      	lsls	r3, r3, #3
 800474c:	1a9b      	subs	r3, r3, r2
 800474e:	4a15      	ldr	r2, [pc, #84]	; (80047a4 <RTC_WeekDayNum+0xe4>)
 8004750:	fba2 2303 	umull	r2, r3, r2, r3
 8004754:	085a      	lsrs	r2, r3, #1
 8004756:	78bb      	ldrb	r3, [r7, #2]
 8004758:	441a      	add	r2, r3
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	441a      	add	r2, r3
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	089b      	lsrs	r3, r3, #2
 8004762:	441a      	add	r2, r3
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	4910      	ldr	r1, [pc, #64]	; (80047a8 <RTC_WeekDayNum+0xe8>)
 8004768:	fba1 1303 	umull	r1, r3, r1, r3
 800476c:	095b      	lsrs	r3, r3, #5
 800476e:	1ad2      	subs	r2, r2, r3
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	490d      	ldr	r1, [pc, #52]	; (80047a8 <RTC_WeekDayNum+0xe8>)
 8004774:	fba1 1303 	umull	r1, r3, r1, r3
 8004778:	09db      	lsrs	r3, r3, #7
 800477a:	4413      	add	r3, r2
 800477c:	1c9a      	adds	r2, r3, #2
 800477e:	4b0b      	ldr	r3, [pc, #44]	; (80047ac <RTC_WeekDayNum+0xec>)
 8004780:	fba3 1302 	umull	r1, r3, r3, r2
 8004784:	1ad1      	subs	r1, r2, r3
 8004786:	0849      	lsrs	r1, r1, #1
 8004788:	440b      	add	r3, r1
 800478a:	0899      	lsrs	r1, r3, #2
 800478c:	460b      	mov	r3, r1
 800478e:	00db      	lsls	r3, r3, #3
 8004790:	1a5b      	subs	r3, r3, r1
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	b2db      	uxtb	r3, r3
}
 800479a:	4618      	mov	r0, r3
 800479c:	3714      	adds	r7, #20
 800479e:	46bd      	mov	sp, r7
 80047a0:	bc80      	pop	{r7}
 80047a2:	4770      	bx	lr
 80047a4:	38e38e39 	.word	0x38e38e39
 80047a8:	51eb851f 	.word	0x51eb851f
 80047ac:	24924925 	.word	0x24924925

080047b0 <HAL_RTCEx_RTCIRQHandler>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_RTCIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b082      	sub	sp, #8
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0301 	and.w	r3, r3, #1
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d027      	beq.n	8004816 <HAL_RTCEx_RTCIRQHandler+0x66>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	f003 0301 	and.w	r3, r3, #1
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d020      	beq.n	8004816 <HAL_RTCEx_RTCIRQHandler+0x66>
    {
      /* Check if Overrun occurred */
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	f003 0304 	and.w	r3, r3, #4
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d00b      	beq.n	80047fa <HAL_RTCEx_RTCIRQHandler+0x4a>
      {
        /* Second error callback */
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f000 f824 	bl	8004830 <HAL_RTCEx_RTCEventErrorCallback>

        /* Clear flag Second */
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f06f 0204 	mvn.w	r2, #4
 80047f0:	605a      	str	r2, [r3, #4]

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2204      	movs	r2, #4
 80047f6:	745a      	strb	r2, [r3, #17]
 80047f8:	e005      	b.n	8004806 <HAL_RTCEx_RTCIRQHandler+0x56>
      }
      else
      {
        /* Second callback */
        HAL_RTCEx_RTCEventCallback(hrtc);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 f80f 	bl	800481e <HAL_RTCEx_RTCEventCallback>

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	745a      	strb	r2, [r3, #17]
      }

      /* Clear flag Second */
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	685a      	ldr	r2, [r3, #4]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f022 0201 	bic.w	r2, r2, #1
 8004814:	605a      	str	r2, [r3, #4]
    }
  }
}
 8004816:	bf00      	nop
 8004818:	3708      	adds	r7, #8
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}

0800481e <HAL_RTCEx_RTCEventCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventCallback(RTC_HandleTypeDef *hrtc)
{
 800481e:	b480      	push	{r7}
 8004820:	b083      	sub	sp, #12
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventCallback could be implemented in the user file
   */
}
 8004826:	bf00      	nop
 8004828:	370c      	adds	r7, #12
 800482a:	46bd      	mov	sp, r7
 800482c:	bc80      	pop	{r7}
 800482e:	4770      	bx	lr

08004830 <HAL_RTCEx_RTCEventErrorCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventErrorCallback(RTC_HandleTypeDef *hrtc)
{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventErrorCallback could be implemented in the user file
   */
}
 8004838:	bf00      	nop
 800483a:	370c      	adds	r7, #12
 800483c:	46bd      	mov	sp, r7
 800483e:	bc80      	pop	{r7}
 8004840:	4770      	bx	lr

08004842 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004842:	b580      	push	{r7, lr}
 8004844:	b082      	sub	sp, #8
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d101      	bne.n	8004854 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	e042      	b.n	80048da <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800485a:	b2db      	uxtb	r3, r3
 800485c:	2b00      	cmp	r3, #0
 800485e:	d106      	bne.n	800486e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f7fd fda3 	bl	80023b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2224      	movs	r2, #36	; 0x24
 8004872:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	68da      	ldr	r2, [r3, #12]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004884:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f000 f91c 	bl	8004ac4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	691a      	ldr	r2, [r3, #16]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800489a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	695a      	ldr	r2, [r3, #20]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048aa:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	68da      	ldr	r2, [r3, #12]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048ba:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2220      	movs	r2, #32
 80048c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2220      	movs	r2, #32
 80048ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3708      	adds	r7, #8
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}

080048e2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048e2:	b580      	push	{r7, lr}
 80048e4:	b08a      	sub	sp, #40	; 0x28
 80048e6:	af02      	add	r7, sp, #8
 80048e8:	60f8      	str	r0, [r7, #12]
 80048ea:	60b9      	str	r1, [r7, #8]
 80048ec:	603b      	str	r3, [r7, #0]
 80048ee:	4613      	mov	r3, r2
 80048f0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80048f2:	2300      	movs	r3, #0
 80048f4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	2b20      	cmp	r3, #32
 8004900:	d16d      	bne.n	80049de <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d002      	beq.n	800490e <HAL_UART_Transmit+0x2c>
 8004908:	88fb      	ldrh	r3, [r7, #6]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d101      	bne.n	8004912 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e066      	b.n	80049e0 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2200      	movs	r2, #0
 8004916:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2221      	movs	r2, #33	; 0x21
 800491c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004920:	f7fd fe24 	bl	800256c <HAL_GetTick>
 8004924:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	88fa      	ldrh	r2, [r7, #6]
 800492a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	88fa      	ldrh	r2, [r7, #6]
 8004930:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800493a:	d108      	bne.n	800494e <HAL_UART_Transmit+0x6c>
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	691b      	ldr	r3, [r3, #16]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d104      	bne.n	800494e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004944:	2300      	movs	r3, #0
 8004946:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	61bb      	str	r3, [r7, #24]
 800494c:	e003      	b.n	8004956 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004952:	2300      	movs	r3, #0
 8004954:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004956:	e02a      	b.n	80049ae <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	9300      	str	r3, [sp, #0]
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	2200      	movs	r2, #0
 8004960:	2180      	movs	r1, #128	; 0x80
 8004962:	68f8      	ldr	r0, [r7, #12]
 8004964:	f000 f840 	bl	80049e8 <UART_WaitOnFlagUntilTimeout>
 8004968:	4603      	mov	r3, r0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d001      	beq.n	8004972 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e036      	b.n	80049e0 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d10b      	bne.n	8004990 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	881b      	ldrh	r3, [r3, #0]
 800497c:	461a      	mov	r2, r3
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004986:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	3302      	adds	r3, #2
 800498c:	61bb      	str	r3, [r7, #24]
 800498e:	e007      	b.n	80049a0 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	781a      	ldrb	r2, [r3, #0]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	3301      	adds	r3, #1
 800499e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	3b01      	subs	r3, #1
 80049a8:	b29a      	uxth	r2, r3
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d1cf      	bne.n	8004958 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	9300      	str	r3, [sp, #0]
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	2200      	movs	r2, #0
 80049c0:	2140      	movs	r1, #64	; 0x40
 80049c2:	68f8      	ldr	r0, [r7, #12]
 80049c4:	f000 f810 	bl	80049e8 <UART_WaitOnFlagUntilTimeout>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d001      	beq.n	80049d2 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80049ce:	2303      	movs	r3, #3
 80049d0:	e006      	b.n	80049e0 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2220      	movs	r2, #32
 80049d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80049da:	2300      	movs	r3, #0
 80049dc:	e000      	b.n	80049e0 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80049de:	2302      	movs	r3, #2
  }
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3720      	adds	r7, #32
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b090      	sub	sp, #64	; 0x40
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	60b9      	str	r1, [r7, #8]
 80049f2:	603b      	str	r3, [r7, #0]
 80049f4:	4613      	mov	r3, r2
 80049f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049f8:	e050      	b.n	8004a9c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a00:	d04c      	beq.n	8004a9c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004a02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d007      	beq.n	8004a18 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a08:	f7fd fdb0 	bl	800256c <HAL_GetTick>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d241      	bcs.n	8004a9c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	330c      	adds	r3, #12
 8004a1e:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a22:	e853 3f00 	ldrex	r3, [r3]
 8004a26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	330c      	adds	r3, #12
 8004a36:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a38:	637a      	str	r2, [r7, #52]	; 0x34
 8004a3a:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a3c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a40:	e841 2300 	strex	r3, r2, [r1]
 8004a44:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d1e5      	bne.n	8004a18 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	3314      	adds	r3, #20
 8004a52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	e853 3f00 	ldrex	r3, [r3]
 8004a5a:	613b      	str	r3, [r7, #16]
   return(result);
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	f023 0301 	bic.w	r3, r3, #1
 8004a62:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	3314      	adds	r3, #20
 8004a6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a6c:	623a      	str	r2, [r7, #32]
 8004a6e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a70:	69f9      	ldr	r1, [r7, #28]
 8004a72:	6a3a      	ldr	r2, [r7, #32]
 8004a74:	e841 2300 	strex	r3, r2, [r1]
 8004a78:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d1e5      	bne.n	8004a4c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2220      	movs	r2, #32
 8004a84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2220      	movs	r2, #32
 8004a8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2200      	movs	r2, #0
 8004a94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004a98:	2303      	movs	r3, #3
 8004a9a:	e00f      	b.n	8004abc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	68ba      	ldr	r2, [r7, #8]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	bf0c      	ite	eq
 8004aac:	2301      	moveq	r3, #1
 8004aae:	2300      	movne	r3, #0
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	79fb      	ldrb	r3, [r7, #7]
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d09f      	beq.n	80049fa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3740      	adds	r7, #64	; 0x40
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	68da      	ldr	r2, [r3, #12]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	430a      	orrs	r2, r1
 8004ae0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	689a      	ldr	r2, [r3, #8]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	691b      	ldr	r3, [r3, #16]
 8004aea:	431a      	orrs	r2, r3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	695b      	ldr	r3, [r3, #20]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004afe:	f023 030c 	bic.w	r3, r3, #12
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	6812      	ldr	r2, [r2, #0]
 8004b06:	68b9      	ldr	r1, [r7, #8]
 8004b08:	430b      	orrs	r3, r1
 8004b0a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	695b      	ldr	r3, [r3, #20]
 8004b12:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	699a      	ldr	r2, [r3, #24]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	430a      	orrs	r2, r1
 8004b20:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a2c      	ldr	r2, [pc, #176]	; (8004bd8 <UART_SetConfig+0x114>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d103      	bne.n	8004b34 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004b2c:	f7fe fefa 	bl	8003924 <HAL_RCC_GetPCLK2Freq>
 8004b30:	60f8      	str	r0, [r7, #12]
 8004b32:	e002      	b.n	8004b3a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004b34:	f7fe fee2 	bl	80038fc <HAL_RCC_GetPCLK1Freq>
 8004b38:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b3a:	68fa      	ldr	r2, [r7, #12]
 8004b3c:	4613      	mov	r3, r2
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	4413      	add	r3, r2
 8004b42:	009a      	lsls	r2, r3, #2
 8004b44:	441a      	add	r2, r3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b50:	4a22      	ldr	r2, [pc, #136]	; (8004bdc <UART_SetConfig+0x118>)
 8004b52:	fba2 2303 	umull	r2, r3, r2, r3
 8004b56:	095b      	lsrs	r3, r3, #5
 8004b58:	0119      	lsls	r1, r3, #4
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	4413      	add	r3, r2
 8004b62:	009a      	lsls	r2, r3, #2
 8004b64:	441a      	add	r2, r3
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b70:	4b1a      	ldr	r3, [pc, #104]	; (8004bdc <UART_SetConfig+0x118>)
 8004b72:	fba3 0302 	umull	r0, r3, r3, r2
 8004b76:	095b      	lsrs	r3, r3, #5
 8004b78:	2064      	movs	r0, #100	; 0x64
 8004b7a:	fb00 f303 	mul.w	r3, r0, r3
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	011b      	lsls	r3, r3, #4
 8004b82:	3332      	adds	r3, #50	; 0x32
 8004b84:	4a15      	ldr	r2, [pc, #84]	; (8004bdc <UART_SetConfig+0x118>)
 8004b86:	fba2 2303 	umull	r2, r3, r2, r3
 8004b8a:	095b      	lsrs	r3, r3, #5
 8004b8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b90:	4419      	add	r1, r3
 8004b92:	68fa      	ldr	r2, [r7, #12]
 8004b94:	4613      	mov	r3, r2
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	4413      	add	r3, r2
 8004b9a:	009a      	lsls	r2, r3, #2
 8004b9c:	441a      	add	r2, r3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ba8:	4b0c      	ldr	r3, [pc, #48]	; (8004bdc <UART_SetConfig+0x118>)
 8004baa:	fba3 0302 	umull	r0, r3, r3, r2
 8004bae:	095b      	lsrs	r3, r3, #5
 8004bb0:	2064      	movs	r0, #100	; 0x64
 8004bb2:	fb00 f303 	mul.w	r3, r0, r3
 8004bb6:	1ad3      	subs	r3, r2, r3
 8004bb8:	011b      	lsls	r3, r3, #4
 8004bba:	3332      	adds	r3, #50	; 0x32
 8004bbc:	4a07      	ldr	r2, [pc, #28]	; (8004bdc <UART_SetConfig+0x118>)
 8004bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8004bc2:	095b      	lsrs	r3, r3, #5
 8004bc4:	f003 020f 	and.w	r2, r3, #15
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	440a      	add	r2, r1
 8004bce:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004bd0:	bf00      	nop
 8004bd2:	3710      	adds	r7, #16
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	40013800 	.word	0x40013800
 8004bdc:	51eb851f 	.word	0x51eb851f

08004be0 <LCD12864_Rom_OUT>:
#include "main.h"
#include "LCD12864.h"


void LCD12864_Rom_OUT()
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004be6:	463b      	mov	r3, r7
 8004be8:	2200      	movs	r2, #0
 8004bea:	601a      	str	r2, [r3, #0]
 8004bec:	605a      	str	r2, [r3, #4]
 8004bee:	609a      	str	r2, [r3, #8]
 8004bf0:	60da      	str	r2, [r3, #12]

	GPIO_InitStruct.Pin = ROM_OUT_Pin;
 8004bf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bf6:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004c00:	2303      	movs	r3, #3
 8004c02:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c04:	463b      	mov	r3, r7
 8004c06:	4619      	mov	r1, r3
 8004c08:	4803      	ldr	r0, [pc, #12]	; (8004c18 <LCD12864_Rom_OUT+0x38>)
 8004c0a:	f7fe f8ed 	bl	8002de8 <HAL_GPIO_Init>
}
 8004c0e:	bf00      	nop
 8004c10:	3710      	adds	r7, #16
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop
 8004c18:	40010c00 	.word	0x40010c00

08004c1c <LCD12864_Rom_IN>:
void LCD12864_Rom_IN()
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c22:	463b      	mov	r3, r7
 8004c24:	2200      	movs	r2, #0
 8004c26:	601a      	str	r2, [r3, #0]
 8004c28:	605a      	str	r2, [r3, #4]
 8004c2a:	609a      	str	r2, [r3, #8]
 8004c2c:	60da      	str	r2, [r3, #12]

	GPIO_InitStruct.Pin = ROM_OUT_Pin;
 8004c2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c32:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004c34:	2300      	movs	r3, #0
 8004c36:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c40:	463b      	mov	r3, r7
 8004c42:	4619      	mov	r1, r3
 8004c44:	4803      	ldr	r0, [pc, #12]	; (8004c54 <LCD12864_Rom_IN+0x38>)
 8004c46:	f7fe f8cf 	bl	8002de8 <HAL_GPIO_Init>
}
 8004c4a:	bf00      	nop
 8004c4c:	3710      	adds	r7, #16
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop
 8004c54:	40010c00 	.word	0x40010c00

08004c58 <transfer_command_lcd>:
//写指令到LCD 模块
void transfer_command_lcd(int data1)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
	char i;
	lcd_cs1(0);
 8004c60:	2200      	movs	r2, #0
 8004c62:	2101      	movs	r1, #1
 8004c64:	481d      	ldr	r0, [pc, #116]	; (8004cdc <transfer_command_lcd+0x84>)
 8004c66:	f7fe fa5a 	bl	800311e <HAL_GPIO_WritePin>
	lcd_rs(0);
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	2104      	movs	r1, #4
 8004c6e:	481b      	ldr	r0, [pc, #108]	; (8004cdc <transfer_command_lcd+0x84>)
 8004c70:	f7fe fa55 	bl	800311e <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 8004c74:	2300      	movs	r3, #0
 8004c76:	73fb      	strb	r3, [r7, #15]
 8004c78:	e023      	b.n	8004cc2 <transfer_command_lcd+0x6a>
	{
		lcd_sclk(0);
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004c80:	4816      	ldr	r0, [pc, #88]	; (8004cdc <transfer_command_lcd+0x84>)
 8004c82:	f7fe fa4c 	bl	800311e <HAL_GPIO_WritePin>
		//delay_us(10); //加少量延时
		if(data1&0x80) lcd_sid(1);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d006      	beq.n	8004c9e <transfer_command_lcd+0x46>
 8004c90:	2201      	movs	r2, #1
 8004c92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004c96:	4811      	ldr	r0, [pc, #68]	; (8004cdc <transfer_command_lcd+0x84>)
 8004c98:	f7fe fa41 	bl	800311e <HAL_GPIO_WritePin>
 8004c9c:	e005      	b.n	8004caa <transfer_command_lcd+0x52>
		else lcd_sid(0);
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004ca4:	480d      	ldr	r0, [pc, #52]	; (8004cdc <transfer_command_lcd+0x84>)
 8004ca6:	f7fe fa3a 	bl	800311e <HAL_GPIO_WritePin>
		lcd_sclk(1);
 8004caa:	2201      	movs	r2, #1
 8004cac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004cb0:	480a      	ldr	r0, [pc, #40]	; (8004cdc <transfer_command_lcd+0x84>)
 8004cb2:	f7fe fa34 	bl	800311e <HAL_GPIO_WritePin>
		//delay_us(10); //加少量延时
		data1= (data1<<=1);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	005b      	lsls	r3, r3, #1
 8004cba:	607b      	str	r3, [r7, #4]
	for(i=0;i<8;i++)
 8004cbc:	7bfb      	ldrb	r3, [r7, #15]
 8004cbe:	3301      	adds	r3, #1
 8004cc0:	73fb      	strb	r3, [r7, #15]
 8004cc2:	7bfb      	ldrb	r3, [r7, #15]
 8004cc4:	2b07      	cmp	r3, #7
 8004cc6:	d9d8      	bls.n	8004c7a <transfer_command_lcd+0x22>
	}
	lcd_cs1(1);
 8004cc8:	2201      	movs	r2, #1
 8004cca:	2101      	movs	r1, #1
 8004ccc:	4803      	ldr	r0, [pc, #12]	; (8004cdc <transfer_command_lcd+0x84>)
 8004cce:	f7fe fa26 	bl	800311e <HAL_GPIO_WritePin>
}
 8004cd2:	bf00      	nop
 8004cd4:	3710      	adds	r7, #16
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	40010c00 	.word	0x40010c00

08004ce0 <transfer_data_lcd>:

//写数据到LCD 模块
void transfer_data_lcd(int data1)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b084      	sub	sp, #16
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
	char i;
	lcd_cs1(0);
 8004ce8:	2200      	movs	r2, #0
 8004cea:	2101      	movs	r1, #1
 8004cec:	481d      	ldr	r0, [pc, #116]	; (8004d64 <transfer_data_lcd+0x84>)
 8004cee:	f7fe fa16 	bl	800311e <HAL_GPIO_WritePin>
	lcd_rs(1);
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	2104      	movs	r1, #4
 8004cf6:	481b      	ldr	r0, [pc, #108]	; (8004d64 <transfer_data_lcd+0x84>)
 8004cf8:	f7fe fa11 	bl	800311e <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	73fb      	strb	r3, [r7, #15]
 8004d00:	e023      	b.n	8004d4a <transfer_data_lcd+0x6a>
	{
		lcd_sclk(0);
 8004d02:	2200      	movs	r2, #0
 8004d04:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004d08:	4816      	ldr	r0, [pc, #88]	; (8004d64 <transfer_data_lcd+0x84>)
 8004d0a:	f7fe fa08 	bl	800311e <HAL_GPIO_WritePin>
		if(data1&0x80) lcd_sid(1);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d006      	beq.n	8004d26 <transfer_data_lcd+0x46>
 8004d18:	2201      	movs	r2, #1
 8004d1a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004d1e:	4811      	ldr	r0, [pc, #68]	; (8004d64 <transfer_data_lcd+0x84>)
 8004d20:	f7fe f9fd 	bl	800311e <HAL_GPIO_WritePin>
 8004d24:	e005      	b.n	8004d32 <transfer_data_lcd+0x52>
		else lcd_sid(0);
 8004d26:	2200      	movs	r2, #0
 8004d28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004d2c:	480d      	ldr	r0, [pc, #52]	; (8004d64 <transfer_data_lcd+0x84>)
 8004d2e:	f7fe f9f6 	bl	800311e <HAL_GPIO_WritePin>
		lcd_sclk(1);
 8004d32:	2201      	movs	r2, #1
 8004d34:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004d38:	480a      	ldr	r0, [pc, #40]	; (8004d64 <transfer_data_lcd+0x84>)
 8004d3a:	f7fe f9f0 	bl	800311e <HAL_GPIO_WritePin>
		data1=data1<<=1;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	005b      	lsls	r3, r3, #1
 8004d42:	607b      	str	r3, [r7, #4]
	for(i=0;i<8;i++)
 8004d44:	7bfb      	ldrb	r3, [r7, #15]
 8004d46:	3301      	adds	r3, #1
 8004d48:	73fb      	strb	r3, [r7, #15]
 8004d4a:	7bfb      	ldrb	r3, [r7, #15]
 8004d4c:	2b07      	cmp	r3, #7
 8004d4e:	d9d8      	bls.n	8004d02 <transfer_data_lcd+0x22>
	}
	lcd_cs1(1);
 8004d50:	2201      	movs	r2, #1
 8004d52:	2101      	movs	r1, #1
 8004d54:	4803      	ldr	r0, [pc, #12]	; (8004d64 <transfer_data_lcd+0x84>)
 8004d56:	f7fe f9e2 	bl	800311e <HAL_GPIO_WritePin>
}
 8004d5a:	bf00      	nop
 8004d5c:	3710      	adds	r7, #16
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop
 8004d64:	40010c00 	.word	0x40010c00

08004d68 <initial_lcd>:

//LCD 模块初始化
void initial_lcd()
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	af00      	add	r7, sp, #0
	lcd_reset(0); //低电平复位
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	2102      	movs	r1, #2
 8004d70:	481f      	ldr	r0, [pc, #124]	; (8004df0 <initial_lcd+0x88>)
 8004d72:	f7fe f9d4 	bl	800311e <HAL_GPIO_WritePin>
	HAL_msDelay(100);
 8004d76:	2064      	movs	r0, #100	; 0x64
 8004d78:	f7fd f934 	bl	8001fe4 <HAL_msDelay>
	lcd_reset(1); //复位完毕
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	2102      	movs	r1, #2
 8004d80:	481b      	ldr	r0, [pc, #108]	; (8004df0 <initial_lcd+0x88>)
 8004d82:	f7fe f9cc 	bl	800311e <HAL_GPIO_WritePin>
	HAL_msDelay(100);
 8004d86:	2064      	movs	r0, #100	; 0x64
 8004d88:	f7fd f92c 	bl	8001fe4 <HAL_msDelay>
	transfer_command_lcd(0xe2); //软复位
 8004d8c:	20e2      	movs	r0, #226	; 0xe2
 8004d8e:	f7ff ff63 	bl	8004c58 <transfer_command_lcd>
	HAL_msDelay(5);
 8004d92:	2005      	movs	r0, #5
 8004d94:	f7fd f926 	bl	8001fe4 <HAL_msDelay>
	transfer_command_lcd(0x2c); //升压步聚1
 8004d98:	202c      	movs	r0, #44	; 0x2c
 8004d9a:	f7ff ff5d 	bl	8004c58 <transfer_command_lcd>
	HAL_msDelay(50);
 8004d9e:	2032      	movs	r0, #50	; 0x32
 8004da0:	f7fd f920 	bl	8001fe4 <HAL_msDelay>
	transfer_command_lcd(0x2e); //升压步聚2
 8004da4:	202e      	movs	r0, #46	; 0x2e
 8004da6:	f7ff ff57 	bl	8004c58 <transfer_command_lcd>
	HAL_msDelay(50);
 8004daa:	2032      	movs	r0, #50	; 0x32
 8004dac:	f7fd f91a 	bl	8001fe4 <HAL_msDelay>
	transfer_command_lcd(0x2f); //升压步聚3
 8004db0:	202f      	movs	r0, #47	; 0x2f
 8004db2:	f7ff ff51 	bl	8004c58 <transfer_command_lcd>
	HAL_msDelay(5);
 8004db6:	2005      	movs	r0, #5
 8004db8:	f7fd f914 	bl	8001fe4 <HAL_msDelay>
	transfer_command_lcd(0x23); //粗调对比度，可设置范围0x20～0x27
 8004dbc:	2023      	movs	r0, #35	; 0x23
 8004dbe:	f7ff ff4b 	bl	8004c58 <transfer_command_lcd>
	transfer_command_lcd(0x81); //微调对比度
 8004dc2:	2081      	movs	r0, #129	; 0x81
 8004dc4:	f7ff ff48 	bl	8004c58 <transfer_command_lcd>
	transfer_command_lcd(0x28); //微调对比度的值，可设置范围0x00～0x3f
 8004dc8:	2028      	movs	r0, #40	; 0x28
 8004dca:	f7ff ff45 	bl	8004c58 <transfer_command_lcd>
	transfer_command_lcd(0xa2); //1/9 偏压比（bias）
 8004dce:	20a2      	movs	r0, #162	; 0xa2
 8004dd0:	f7ff ff42 	bl	8004c58 <transfer_command_lcd>
	transfer_command_lcd(0xc8); //行扫描顺序：从上到下
 8004dd4:	20c8      	movs	r0, #200	; 0xc8
 8004dd6:	f7ff ff3f 	bl	8004c58 <transfer_command_lcd>
	transfer_command_lcd(0xa0); //列扫描顺序：从左到右
 8004dda:	20a0      	movs	r0, #160	; 0xa0
 8004ddc:	f7ff ff3c 	bl	8004c58 <transfer_command_lcd>
	transfer_command_lcd(0x40); //起始行：第一行开始
 8004de0:	2040      	movs	r0, #64	; 0x40
 8004de2:	f7ff ff39 	bl	8004c58 <transfer_command_lcd>
	transfer_command_lcd(0xaf); //开显示
 8004de6:	20af      	movs	r0, #175	; 0xaf
 8004de8:	f7ff ff36 	bl	8004c58 <transfer_command_lcd>
}
 8004dec:	bf00      	nop
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	40010c00 	.word	0x40010c00

08004df4 <lcd_address>:

void lcd_address(uint page,uint column)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b082      	sub	sp, #8
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
	column=column-0x01;
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	3b01      	subs	r3, #1
 8004e02:	603b      	str	r3, [r7, #0]
	transfer_command_lcd(0xb0+page-1); //设置页地址，每8 行为一页，全屏共64 行，被分成8 页
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	33af      	adds	r3, #175	; 0xaf
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f7ff ff25 	bl	8004c58 <transfer_command_lcd>
	transfer_command_lcd(0x10+(column>>4&0x0f)); //设置列地址的高4 位
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	091b      	lsrs	r3, r3, #4
 8004e12:	f003 030f 	and.w	r3, r3, #15
 8004e16:	3310      	adds	r3, #16
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f7ff ff1d 	bl	8004c58 <transfer_command_lcd>
	transfer_command_lcd(column&0x0f); //设置列地址的低4 位
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	f003 030f 	and.w	r3, r3, #15
 8004e24:	4618      	mov	r0, r3
 8004e26:	f7ff ff17 	bl	8004c58 <transfer_command_lcd>
}
 8004e2a:	bf00      	nop
 8004e2c:	3708      	adds	r7, #8
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}

08004e32 <clear_screen>:

//全屏清屏
void clear_screen()
{
 8004e32:	b580      	push	{r7, lr}
 8004e34:	b082      	sub	sp, #8
 8004e36:	af00      	add	r7, sp, #0
	unsigned char i,j;
	for(i=0;i<9;i++)
 8004e38:	2300      	movs	r3, #0
 8004e3a:	71fb      	strb	r3, [r7, #7]
 8004e3c:	e019      	b.n	8004e72 <clear_screen+0x40>
	{
		transfer_command_lcd(0xb0+i);
 8004e3e:	79fb      	ldrb	r3, [r7, #7]
 8004e40:	33b0      	adds	r3, #176	; 0xb0
 8004e42:	4618      	mov	r0, r3
 8004e44:	f7ff ff08 	bl	8004c58 <transfer_command_lcd>
		transfer_command_lcd(0x10);
 8004e48:	2010      	movs	r0, #16
 8004e4a:	f7ff ff05 	bl	8004c58 <transfer_command_lcd>
		transfer_command_lcd(0x00);
 8004e4e:	2000      	movs	r0, #0
 8004e50:	f7ff ff02 	bl	8004c58 <transfer_command_lcd>
		for(j=0;j<132;j++)
 8004e54:	2300      	movs	r3, #0
 8004e56:	71bb      	strb	r3, [r7, #6]
 8004e58:	e005      	b.n	8004e66 <clear_screen+0x34>
		{
			transfer_data_lcd(0x00);
 8004e5a:	2000      	movs	r0, #0
 8004e5c:	f7ff ff40 	bl	8004ce0 <transfer_data_lcd>
		for(j=0;j<132;j++)
 8004e60:	79bb      	ldrb	r3, [r7, #6]
 8004e62:	3301      	adds	r3, #1
 8004e64:	71bb      	strb	r3, [r7, #6]
 8004e66:	79bb      	ldrb	r3, [r7, #6]
 8004e68:	2b83      	cmp	r3, #131	; 0x83
 8004e6a:	d9f6      	bls.n	8004e5a <clear_screen+0x28>
	for(i=0;i<9;i++)
 8004e6c:	79fb      	ldrb	r3, [r7, #7]
 8004e6e:	3301      	adds	r3, #1
 8004e70:	71fb      	strb	r3, [r7, #7]
 8004e72:	79fb      	ldrb	r3, [r7, #7]
 8004e74:	2b08      	cmp	r3, #8
 8004e76:	d9e2      	bls.n	8004e3e <clear_screen+0xc>
		}
	}
}
 8004e78:	bf00      	nop
 8004e7a:	bf00      	nop
 8004e7c:	3708      	adds	r7, #8
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
	...

08004e84 <send_command_to_ROM>:
	}
}

//送指令到晶联讯字库IC
void send_command_to_ROM( uchar datu)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	71fb      	strb	r3, [r7, #7]
	uchar i;
	for(i=0;i<8;i++ )
 8004e8e:	2300      	movs	r3, #0
 8004e90:	73fb      	strb	r3, [r7, #15]
 8004e92:	e028      	b.n	8004ee6 <send_command_to_ROM+0x62>
	{
		Rom_SCK(0);
 8004e94:	2200      	movs	r2, #0
 8004e96:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004e9a:	4817      	ldr	r0, [pc, #92]	; (8004ef8 <send_command_to_ROM+0x74>)
 8004e9c:	f7fe f93f 	bl	800311e <HAL_GPIO_WritePin>
		HAL_usDelay(10);
 8004ea0:	200a      	movs	r0, #10
 8004ea2:	f7fd f85f 	bl	8001f64 <HAL_usDelay>
		if(datu&0x80)Rom_IN(1);
 8004ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	da06      	bge.n	8004ebc <send_command_to_ROM+0x38>
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004eb4:	4811      	ldr	r0, [pc, #68]	; (8004efc <send_command_to_ROM+0x78>)
 8004eb6:	f7fe f932 	bl	800311e <HAL_GPIO_WritePin>
 8004eba:	e005      	b.n	8004ec8 <send_command_to_ROM+0x44>
		else Rom_IN(0);
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004ec2:	480e      	ldr	r0, [pc, #56]	; (8004efc <send_command_to_ROM+0x78>)
 8004ec4:	f7fe f92b 	bl	800311e <HAL_GPIO_WritePin>
		datu = datu<<1;
 8004ec8:	79fb      	ldrb	r3, [r7, #7]
 8004eca:	005b      	lsls	r3, r3, #1
 8004ecc:	71fb      	strb	r3, [r7, #7]
		Rom_SCK(1);
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004ed4:	4808      	ldr	r0, [pc, #32]	; (8004ef8 <send_command_to_ROM+0x74>)
 8004ed6:	f7fe f922 	bl	800311e <HAL_GPIO_WritePin>
		HAL_usDelay(10);
 8004eda:	200a      	movs	r0, #10
 8004edc:	f7fd f842 	bl	8001f64 <HAL_usDelay>
	for(i=0;i<8;i++ )
 8004ee0:	7bfb      	ldrb	r3, [r7, #15]
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	73fb      	strb	r3, [r7, #15]
 8004ee6:	7bfb      	ldrb	r3, [r7, #15]
 8004ee8:	2b07      	cmp	r3, #7
 8004eea:	d9d3      	bls.n	8004e94 <send_command_to_ROM+0x10>
	}
}
 8004eec:	bf00      	nop
 8004eee:	bf00      	nop
 8004ef0:	3710      	adds	r7, #16
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	40010c00 	.word	0x40010c00
 8004efc:	40010800 	.word	0x40010800

08004f00 <get_data_from_ROM>:

//从晶联讯字库IC 中取汉字或字符数据（1 个字节）
static uchar get_data_from_ROM( )
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b082      	sub	sp, #8
 8004f04:	af00      	add	r7, sp, #0
	uchar i;
	uchar ret_data=0;
 8004f06:	2300      	movs	r3, #0
 8004f08:	71bb      	strb	r3, [r7, #6]
	for(i=0;i<8;i++)
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	71fb      	strb	r3, [r7, #7]
 8004f0e:	e026      	b.n	8004f5e <get_data_from_ROM+0x5e>
	{
		Rom_OUT(1);
 8004f10:	2201      	movs	r2, #1
 8004f12:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004f16:	4816      	ldr	r0, [pc, #88]	; (8004f70 <get_data_from_ROM+0x70>)
 8004f18:	f7fe f901 	bl	800311e <HAL_GPIO_WritePin>
		Rom_SCK(0);
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004f22:	4813      	ldr	r0, [pc, #76]	; (8004f70 <get_data_from_ROM+0x70>)
 8004f24:	f7fe f8fb 	bl	800311e <HAL_GPIO_WritePin>
		LCD12864_Rom_IN();
 8004f28:	f7ff fe78 	bl	8004c1c <LCD12864_Rom_IN>
		//delay_us(1);
		ret_data=ret_data<<1;
 8004f2c:	79bb      	ldrb	r3, [r7, #6]
 8004f2e:	005b      	lsls	r3, r3, #1
 8004f30:	71bb      	strb	r3, [r7, #6]
		if(Rom_OUT_READ)
 8004f32:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004f36:	480e      	ldr	r0, [pc, #56]	; (8004f70 <get_data_from_ROM+0x70>)
 8004f38:	f7fe f8da 	bl	80030f0 <HAL_GPIO_ReadPin>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d002      	beq.n	8004f48 <get_data_from_ROM+0x48>
			ret_data=ret_data+1;
 8004f42:	79bb      	ldrb	r3, [r7, #6]
 8004f44:	3301      	adds	r3, #1
 8004f46:	71bb      	strb	r3, [r7, #6]
		else
			ret_data=ret_data+0;
		Rom_SCK(1);
 8004f48:	2201      	movs	r2, #1
 8004f4a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004f4e:	4808      	ldr	r0, [pc, #32]	; (8004f70 <get_data_from_ROM+0x70>)
 8004f50:	f7fe f8e5 	bl	800311e <HAL_GPIO_WritePin>
		//delay_us(1);
		LCD12864_Rom_OUT();
 8004f54:	f7ff fe44 	bl	8004be0 <LCD12864_Rom_OUT>
	for(i=0;i<8;i++)
 8004f58:	79fb      	ldrb	r3, [r7, #7]
 8004f5a:	3301      	adds	r3, #1
 8004f5c:	71fb      	strb	r3, [r7, #7]
 8004f5e:	79fb      	ldrb	r3, [r7, #7]
 8004f60:	2b07      	cmp	r3, #7
 8004f62:	d9d5      	bls.n	8004f10 <get_data_from_ROM+0x10>
	}
	return(ret_data);
 8004f64:	79bb      	ldrb	r3, [r7, #6]
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3708      	adds	r7, #8
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	40010c00 	.word	0x40010c00

08004f74 <get_and_write_16x16>:


//从指定地址读出数据写到液晶屏指定（page,column)座标中
void get_and_write_16x16(ulong fontaddr,uchar page,uchar column)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b084      	sub	sp, #16
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	70fb      	strb	r3, [r7, #3]
 8004f80:	4613      	mov	r3, r2
 8004f82:	70bb      	strb	r3, [r7, #2]
	uchar i,j,disp_data;
	Rom_CS(0);
 8004f84:	2200      	movs	r2, #0
 8004f86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004f8a:	4822      	ldr	r0, [pc, #136]	; (8005014 <get_and_write_16x16+0xa0>)
 8004f8c:	f7fe f8c7 	bl	800311e <HAL_GPIO_WritePin>
	send_command_to_ROM(0x03);
 8004f90:	2003      	movs	r0, #3
 8004f92:	f7ff ff77 	bl	8004e84 <send_command_to_ROM>
	send_command_to_ROM((fontaddr&0xff0000)>>16); //地址的高8 位,共24 位
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	0c1b      	lsrs	r3, r3, #16
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f7ff ff71 	bl	8004e84 <send_command_to_ROM>
	send_command_to_ROM((fontaddr&0xff00)>>8); //地址的中8 位,共24 位
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	0a1b      	lsrs	r3, r3, #8
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f7ff ff6b 	bl	8004e84 <send_command_to_ROM>
	send_command_to_ROM(fontaddr&0xff); //地址的低8 位,共24 位
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f7ff ff66 	bl	8004e84 <send_command_to_ROM>
	for(j=0;j<2;j++)
 8004fb8:	2300      	movs	r3, #0
 8004fba:	73bb      	strb	r3, [r7, #14]
 8004fbc:	e01c      	b.n	8004ff8 <get_and_write_16x16+0x84>
	{
		lcd_address(page+j,column);
 8004fbe:	78fa      	ldrb	r2, [r7, #3]
 8004fc0:	7bbb      	ldrb	r3, [r7, #14]
 8004fc2:	4413      	add	r3, r2
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	78bb      	ldrb	r3, [r7, #2]
 8004fc8:	4619      	mov	r1, r3
 8004fca:	4610      	mov	r0, r2
 8004fcc:	f7ff ff12 	bl	8004df4 <lcd_address>
		for(i=0; i<16; i++ )
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	73fb      	strb	r3, [r7, #15]
 8004fd4:	e00a      	b.n	8004fec <get_and_write_16x16+0x78>
		{
			disp_data=get_data_from_ROM();
 8004fd6:	f7ff ff93 	bl	8004f00 <get_data_from_ROM>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	737b      	strb	r3, [r7, #13]
			transfer_data_lcd(disp_data); //写数据到LCD,每写完1 字节的数据后列地址自动加1
 8004fde:	7b7b      	ldrb	r3, [r7, #13]
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f7ff fe7d 	bl	8004ce0 <transfer_data_lcd>
		for(i=0; i<16; i++ )
 8004fe6:	7bfb      	ldrb	r3, [r7, #15]
 8004fe8:	3301      	adds	r3, #1
 8004fea:	73fb      	strb	r3, [r7, #15]
 8004fec:	7bfb      	ldrb	r3, [r7, #15]
 8004fee:	2b0f      	cmp	r3, #15
 8004ff0:	d9f1      	bls.n	8004fd6 <get_and_write_16x16+0x62>
	for(j=0;j<2;j++)
 8004ff2:	7bbb      	ldrb	r3, [r7, #14]
 8004ff4:	3301      	adds	r3, #1
 8004ff6:	73bb      	strb	r3, [r7, #14]
 8004ff8:	7bbb      	ldrb	r3, [r7, #14]
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d9df      	bls.n	8004fbe <get_and_write_16x16+0x4a>
		}
	}
	Rom_CS(1);
 8004ffe:	2201      	movs	r2, #1
 8005000:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005004:	4803      	ldr	r0, [pc, #12]	; (8005014 <get_and_write_16x16+0xa0>)
 8005006:	f7fe f88a 	bl	800311e <HAL_GPIO_WritePin>
}
 800500a:	bf00      	nop
 800500c:	3710      	adds	r7, #16
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop
 8005014:	40010c00 	.word	0x40010c00

08005018 <get_and_write_8x16>:

//从指定地址读出数据写到液晶屏指定（page,column)座标中
void get_and_write_8x16(ulong fontaddr,uchar page,uchar column)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	460b      	mov	r3, r1
 8005022:	70fb      	strb	r3, [r7, #3]
 8005024:	4613      	mov	r3, r2
 8005026:	70bb      	strb	r3, [r7, #2]
	uchar i,j,disp_data;
	Rom_CS(0);
 8005028:	2200      	movs	r2, #0
 800502a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800502e:	4822      	ldr	r0, [pc, #136]	; (80050b8 <get_and_write_8x16+0xa0>)
 8005030:	f7fe f875 	bl	800311e <HAL_GPIO_WritePin>
	send_command_to_ROM(0x03);
 8005034:	2003      	movs	r0, #3
 8005036:	f7ff ff25 	bl	8004e84 <send_command_to_ROM>
	send_command_to_ROM((fontaddr&0xff0000)>>16); //地址的高8 位,共24 位
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	0c1b      	lsrs	r3, r3, #16
 800503e:	b2db      	uxtb	r3, r3
 8005040:	4618      	mov	r0, r3
 8005042:	f7ff ff1f 	bl	8004e84 <send_command_to_ROM>
	send_command_to_ROM((fontaddr&0xff00)>>8); //地址的中8 位,共24 位
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	0a1b      	lsrs	r3, r3, #8
 800504a:	b2db      	uxtb	r3, r3
 800504c:	4618      	mov	r0, r3
 800504e:	f7ff ff19 	bl	8004e84 <send_command_to_ROM>
	send_command_to_ROM(fontaddr&0xff); //地址的低8 位,共24 位
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	b2db      	uxtb	r3, r3
 8005056:	4618      	mov	r0, r3
 8005058:	f7ff ff14 	bl	8004e84 <send_command_to_ROM>
	for(j=0;j<2;j++)
 800505c:	2300      	movs	r3, #0
 800505e:	73bb      	strb	r3, [r7, #14]
 8005060:	e01c      	b.n	800509c <get_and_write_8x16+0x84>
	{
		lcd_address(page+j,column);
 8005062:	78fa      	ldrb	r2, [r7, #3]
 8005064:	7bbb      	ldrb	r3, [r7, #14]
 8005066:	4413      	add	r3, r2
 8005068:	461a      	mov	r2, r3
 800506a:	78bb      	ldrb	r3, [r7, #2]
 800506c:	4619      	mov	r1, r3
 800506e:	4610      	mov	r0, r2
 8005070:	f7ff fec0 	bl	8004df4 <lcd_address>
		for(i=0; i<8; i++ )
 8005074:	2300      	movs	r3, #0
 8005076:	73fb      	strb	r3, [r7, #15]
 8005078:	e00a      	b.n	8005090 <get_and_write_8x16+0x78>
		{
			disp_data=get_data_from_ROM();
 800507a:	f7ff ff41 	bl	8004f00 <get_data_from_ROM>
 800507e:	4603      	mov	r3, r0
 8005080:	737b      	strb	r3, [r7, #13]
			transfer_data_lcd(disp_data); //写数据到LCD,每写完1 字节的数据后列地址自动加1
 8005082:	7b7b      	ldrb	r3, [r7, #13]
 8005084:	4618      	mov	r0, r3
 8005086:	f7ff fe2b 	bl	8004ce0 <transfer_data_lcd>
		for(i=0; i<8; i++ )
 800508a:	7bfb      	ldrb	r3, [r7, #15]
 800508c:	3301      	adds	r3, #1
 800508e:	73fb      	strb	r3, [r7, #15]
 8005090:	7bfb      	ldrb	r3, [r7, #15]
 8005092:	2b07      	cmp	r3, #7
 8005094:	d9f1      	bls.n	800507a <get_and_write_8x16+0x62>
	for(j=0;j<2;j++)
 8005096:	7bbb      	ldrb	r3, [r7, #14]
 8005098:	3301      	adds	r3, #1
 800509a:	73bb      	strb	r3, [r7, #14]
 800509c:	7bbb      	ldrb	r3, [r7, #14]
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d9df      	bls.n	8005062 <get_and_write_8x16+0x4a>
		}
	}
	Rom_CS(1);
 80050a2:	2201      	movs	r2, #1
 80050a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80050a8:	4803      	ldr	r0, [pc, #12]	; (80050b8 <get_and_write_8x16+0xa0>)
 80050aa:	f7fe f838 	bl	800311e <HAL_GPIO_WritePin>
}
 80050ae:	bf00      	nop
 80050b0:	3710      	adds	r7, #16
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	bf00      	nop
 80050b8:	40010c00 	.word	0x40010c00

080050bc <display_GB2312_string>:
	Rom_CS(1);
}

ulong fontaddr=0;
void display_GB2312_string(uchar page,uchar column,uchar *text)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	4603      	mov	r3, r0
 80050c4:	603a      	str	r2, [r7, #0]
 80050c6:	71fb      	strb	r3, [r7, #7]
 80050c8:	460b      	mov	r3, r1
 80050ca:	71bb      	strb	r3, [r7, #6]
	uchar i= 0;
 80050cc:	2300      	movs	r3, #0
 80050ce:	73fb      	strb	r3, [r7, #15]
	while((text[i]>0x00))
 80050d0:	e0ac      	b.n	800522c <display_GB2312_string+0x170>
	{
		if(((text[i]>=0xb0) &&(text[i]<=0xf7))&&(text[i+1]>=0xa1))
 80050d2:	7bfb      	ldrb	r3, [r7, #15]
 80050d4:	683a      	ldr	r2, [r7, #0]
 80050d6:	4413      	add	r3, r2
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	2baf      	cmp	r3, #175	; 0xaf
 80050dc:	d937      	bls.n	800514e <display_GB2312_string+0x92>
 80050de:	7bfb      	ldrb	r3, [r7, #15]
 80050e0:	683a      	ldr	r2, [r7, #0]
 80050e2:	4413      	add	r3, r2
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	2bf7      	cmp	r3, #247	; 0xf7
 80050e8:	d831      	bhi.n	800514e <display_GB2312_string+0x92>
 80050ea:	7bfb      	ldrb	r3, [r7, #15]
 80050ec:	3301      	adds	r3, #1
 80050ee:	683a      	ldr	r2, [r7, #0]
 80050f0:	4413      	add	r3, r2
 80050f2:	781b      	ldrb	r3, [r3, #0]
 80050f4:	2ba0      	cmp	r3, #160	; 0xa0
 80050f6:	d92a      	bls.n	800514e <display_GB2312_string+0x92>
		{
			//国标简体（GB2312）汉字在晶联讯字库IC 中的地址由以下公式来计算：
			//Address = ((MSB - 0xB0) * 94 + (LSB - 0xA1)+ 846)*32+ BaseAdd;BaseAdd=0
			//由于担心8 位单片机有乘法溢出问题，所以分三部取地址
			fontaddr = (text[i]- 0xb0)*94;
 80050f8:	7bfb      	ldrb	r3, [r7, #15]
 80050fa:	683a      	ldr	r2, [r7, #0]
 80050fc:	4413      	add	r3, r2
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	3bb0      	subs	r3, #176	; 0xb0
 8005102:	225e      	movs	r2, #94	; 0x5e
 8005104:	fb02 f303 	mul.w	r3, r2, r3
 8005108:	461a      	mov	r2, r3
 800510a:	4b4e      	ldr	r3, [pc, #312]	; (8005244 <display_GB2312_string+0x188>)
 800510c:	601a      	str	r2, [r3, #0]
			fontaddr += (text[i+1]-0xa1)+846;
 800510e:	7bfb      	ldrb	r3, [r7, #15]
 8005110:	3301      	adds	r3, #1
 8005112:	683a      	ldr	r2, [r7, #0]
 8005114:	4413      	add	r3, r2
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	461a      	mov	r2, r3
 800511a:	4b4a      	ldr	r3, [pc, #296]	; (8005244 <display_GB2312_string+0x188>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4413      	add	r3, r2
 8005120:	f203 23ad 	addw	r3, r3, #685	; 0x2ad
 8005124:	4a47      	ldr	r2, [pc, #284]	; (8005244 <display_GB2312_string+0x188>)
 8005126:	6013      	str	r3, [r2, #0]
			fontaddr = (ulong)(fontaddr*32);
 8005128:	4b46      	ldr	r3, [pc, #280]	; (8005244 <display_GB2312_string+0x188>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	015b      	lsls	r3, r3, #5
 800512e:	4a45      	ldr	r2, [pc, #276]	; (8005244 <display_GB2312_string+0x188>)
 8005130:	6013      	str	r3, [r2, #0]
			get_and_write_16x16(fontaddr,page,column); //从指定地址读出数据写到液晶屏指定（page,column)座标中
 8005132:	4b44      	ldr	r3, [pc, #272]	; (8005244 <display_GB2312_string+0x188>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	79ba      	ldrb	r2, [r7, #6]
 8005138:	79f9      	ldrb	r1, [r7, #7]
 800513a:	4618      	mov	r0, r3
 800513c:	f7ff ff1a 	bl	8004f74 <get_and_write_16x16>
			i+=2;
 8005140:	7bfb      	ldrb	r3, [r7, #15]
 8005142:	3302      	adds	r3, #2
 8005144:	73fb      	strb	r3, [r7, #15]
			column+=16;
 8005146:	79bb      	ldrb	r3, [r7, #6]
 8005148:	3310      	adds	r3, #16
 800514a:	71bb      	strb	r3, [r7, #6]
 800514c:	e06e      	b.n	800522c <display_GB2312_string+0x170>
		}
		else if(((text[i]>=0xa1) &&(text[i]<=0xa3))&&(text[i+1]>=0xa1))
 800514e:	7bfb      	ldrb	r3, [r7, #15]
 8005150:	683a      	ldr	r2, [r7, #0]
 8005152:	4413      	add	r3, r2
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	2ba0      	cmp	r3, #160	; 0xa0
 8005158:	d936      	bls.n	80051c8 <display_GB2312_string+0x10c>
 800515a:	7bfb      	ldrb	r3, [r7, #15]
 800515c:	683a      	ldr	r2, [r7, #0]
 800515e:	4413      	add	r3, r2
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	2ba3      	cmp	r3, #163	; 0xa3
 8005164:	d830      	bhi.n	80051c8 <display_GB2312_string+0x10c>
 8005166:	7bfb      	ldrb	r3, [r7, #15]
 8005168:	3301      	adds	r3, #1
 800516a:	683a      	ldr	r2, [r7, #0]
 800516c:	4413      	add	r3, r2
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	2ba0      	cmp	r3, #160	; 0xa0
 8005172:	d929      	bls.n	80051c8 <display_GB2312_string+0x10c>
		{
			//国标简体（GB2312）15x16 点的字符在晶联讯字库IC 中的地址由以下公式来计算：
			//Address = ((MSB - 0xa1) * 94 + (LSB - 0xA1))*32+ BaseAdd;BaseAdd=0
			//由于担心8 位单片机有乘法溢出问题，所以分三部取地址
			fontaddr = (text[i]- 0xa1)*94;
 8005174:	7bfb      	ldrb	r3, [r7, #15]
 8005176:	683a      	ldr	r2, [r7, #0]
 8005178:	4413      	add	r3, r2
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	3ba1      	subs	r3, #161	; 0xa1
 800517e:	225e      	movs	r2, #94	; 0x5e
 8005180:	fb02 f303 	mul.w	r3, r2, r3
 8005184:	461a      	mov	r2, r3
 8005186:	4b2f      	ldr	r3, [pc, #188]	; (8005244 <display_GB2312_string+0x188>)
 8005188:	601a      	str	r2, [r3, #0]
			fontaddr += (text[i+1]-0xa1);
 800518a:	7bfb      	ldrb	r3, [r7, #15]
 800518c:	3301      	adds	r3, #1
 800518e:	683a      	ldr	r2, [r7, #0]
 8005190:	4413      	add	r3, r2
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	461a      	mov	r2, r3
 8005196:	4b2b      	ldr	r3, [pc, #172]	; (8005244 <display_GB2312_string+0x188>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4413      	add	r3, r2
 800519c:	3ba1      	subs	r3, #161	; 0xa1
 800519e:	4a29      	ldr	r2, [pc, #164]	; (8005244 <display_GB2312_string+0x188>)
 80051a0:	6013      	str	r3, [r2, #0]
			fontaddr = (ulong)(fontaddr*32);
 80051a2:	4b28      	ldr	r3, [pc, #160]	; (8005244 <display_GB2312_string+0x188>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	015b      	lsls	r3, r3, #5
 80051a8:	4a26      	ldr	r2, [pc, #152]	; (8005244 <display_GB2312_string+0x188>)
 80051aa:	6013      	str	r3, [r2, #0]
			get_and_write_16x16(fontaddr,page,column); //从指定地址读出数据写到液晶屏指定（page,column)座标中
 80051ac:	4b25      	ldr	r3, [pc, #148]	; (8005244 <display_GB2312_string+0x188>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	79ba      	ldrb	r2, [r7, #6]
 80051b2:	79f9      	ldrb	r1, [r7, #7]
 80051b4:	4618      	mov	r0, r3
 80051b6:	f7ff fedd 	bl	8004f74 <get_and_write_16x16>
			i+=2;
 80051ba:	7bfb      	ldrb	r3, [r7, #15]
 80051bc:	3302      	adds	r3, #2
 80051be:	73fb      	strb	r3, [r7, #15]
			column+=16;
 80051c0:	79bb      	ldrb	r3, [r7, #6]
 80051c2:	3310      	adds	r3, #16
 80051c4:	71bb      	strb	r3, [r7, #6]
 80051c6:	e031      	b.n	800522c <display_GB2312_string+0x170>
		}
		else if((text[i]>=0x20) &&(text[i]<=0x7e))
 80051c8:	7bfb      	ldrb	r3, [r7, #15]
 80051ca:	683a      	ldr	r2, [r7, #0]
 80051cc:	4413      	add	r3, r2
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	2b1f      	cmp	r3, #31
 80051d2:	d928      	bls.n	8005226 <display_GB2312_string+0x16a>
 80051d4:	7bfb      	ldrb	r3, [r7, #15]
 80051d6:	683a      	ldr	r2, [r7, #0]
 80051d8:	4413      	add	r3, r2
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	2b7e      	cmp	r3, #126	; 0x7e
 80051de:	d822      	bhi.n	8005226 <display_GB2312_string+0x16a>
		{
			fontaddr = (text[i]- 0x20);
 80051e0:	7bfb      	ldrb	r3, [r7, #15]
 80051e2:	683a      	ldr	r2, [r7, #0]
 80051e4:	4413      	add	r3, r2
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	3b20      	subs	r3, #32
 80051ea:	461a      	mov	r2, r3
 80051ec:	4b15      	ldr	r3, [pc, #84]	; (8005244 <display_GB2312_string+0x188>)
 80051ee:	601a      	str	r2, [r3, #0]
			fontaddr = (unsigned long)(fontaddr*16);
 80051f0:	4b14      	ldr	r3, [pc, #80]	; (8005244 <display_GB2312_string+0x188>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	011b      	lsls	r3, r3, #4
 80051f6:	4a13      	ldr	r2, [pc, #76]	; (8005244 <display_GB2312_string+0x188>)
 80051f8:	6013      	str	r3, [r2, #0]
			fontaddr = (unsigned long)(fontaddr+0x3cf80);
 80051fa:	4b12      	ldr	r3, [pc, #72]	; (8005244 <display_GB2312_string+0x188>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f503 3373 	add.w	r3, r3, #248832	; 0x3cc00
 8005202:	f503 7360 	add.w	r3, r3, #896	; 0x380
 8005206:	4a0f      	ldr	r2, [pc, #60]	; (8005244 <display_GB2312_string+0x188>)
 8005208:	6013      	str	r3, [r2, #0]
			get_and_write_8x16(fontaddr,page,column); //从指定地址读出数据写到液晶屏指定（page,column)座标中
 800520a:	4b0e      	ldr	r3, [pc, #56]	; (8005244 <display_GB2312_string+0x188>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	79ba      	ldrb	r2, [r7, #6]
 8005210:	79f9      	ldrb	r1, [r7, #7]
 8005212:	4618      	mov	r0, r3
 8005214:	f7ff ff00 	bl	8005018 <get_and_write_8x16>
			i+=1;
 8005218:	7bfb      	ldrb	r3, [r7, #15]
 800521a:	3301      	adds	r3, #1
 800521c:	73fb      	strb	r3, [r7, #15]
			column+=8;
 800521e:	79bb      	ldrb	r3, [r7, #6]
 8005220:	3308      	adds	r3, #8
 8005222:	71bb      	strb	r3, [r7, #6]
 8005224:	e002      	b.n	800522c <display_GB2312_string+0x170>
		}
		else
			i++;
 8005226:	7bfb      	ldrb	r3, [r7, #15]
 8005228:	3301      	adds	r3, #1
 800522a:	73fb      	strb	r3, [r7, #15]
	while((text[i]>0x00))
 800522c:	7bfb      	ldrb	r3, [r7, #15]
 800522e:	683a      	ldr	r2, [r7, #0]
 8005230:	4413      	add	r3, r2
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	2b00      	cmp	r3, #0
 8005236:	f47f af4c 	bne.w	80050d2 <display_GB2312_string+0x16>
	}
}
 800523a:	bf00      	nop
 800523c:	bf00      	nop
 800523e:	3710      	adds	r7, #16
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}
 8005244:	20000320 	.word	0x20000320

08005248 <MPU_Init>:
#include "mpu6050iic.h"
//初始化MPU6050
//返回值:0,成功
//    其他,错误代码
uint8_t MPU_Init(void)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b082      	sub	sp, #8
 800524c:	af00      	add	r7, sp, #0
	uint8_t res;
	MPU_IIC_Init();//初始化IIC总线
 800524e:	f000 f9d7 	bl	8005600 <MPU_IIC_Init>
	MPU_Write_Byte(MPU_PWR_MGMT1_REG,0X80);	//复位MPU6050
 8005252:	2180      	movs	r1, #128	; 0x80
 8005254:	206b      	movs	r0, #107	; 0x6b
 8005256:	f000 f97e 	bl	8005556 <MPU_Write_Byte>
	HAL_msDelay(100);
 800525a:	2064      	movs	r0, #100	; 0x64
 800525c:	f7fc fec2 	bl	8001fe4 <HAL_msDelay>
	MPU_Write_Byte(MPU_PWR_MGMT1_REG,0X00);	//唤醒MPU6050
 8005260:	2100      	movs	r1, #0
 8005262:	206b      	movs	r0, #107	; 0x6b
 8005264:	f000 f977 	bl	8005556 <MPU_Write_Byte>
	MPU_Set_Gyro_Fsr(3);					//陀螺仪传感器,±2000dps
 8005268:	2003      	movs	r0, #3
 800526a:	f000 f830 	bl	80052ce <MPU_Set_Gyro_Fsr>
	MPU_Set_Accel_Fsr(0);					//加速度传感器,±2g
 800526e:	2000      	movs	r0, #0
 8005270:	f000 f83e 	bl	80052f0 <MPU_Set_Accel_Fsr>
	MPU_Set_Rate(50);						//设置采样率50Hz
 8005274:	2032      	movs	r0, #50	; 0x32
 8005276:	f000 f87d 	bl	8005374 <MPU_Set_Rate>
	MPU_Write_Byte(MPU_INT_EN_REG,0X00);	//关闭所有中断
 800527a:	2100      	movs	r1, #0
 800527c:	2038      	movs	r0, #56	; 0x38
 800527e:	f000 f96a 	bl	8005556 <MPU_Write_Byte>
	MPU_Write_Byte(MPU_USER_CTRL_REG,0X00);	//I2C主模式关闭
 8005282:	2100      	movs	r1, #0
 8005284:	206a      	movs	r0, #106	; 0x6a
 8005286:	f000 f966 	bl	8005556 <MPU_Write_Byte>
	MPU_Write_Byte(MPU_FIFO_EN_REG,0X00);	//关闭FIFO
 800528a:	2100      	movs	r1, #0
 800528c:	2023      	movs	r0, #35	; 0x23
 800528e:	f000 f962 	bl	8005556 <MPU_Write_Byte>
	MPU_Write_Byte(MPU_INTBP_CFG_REG,0X80);	//INT引脚低电平有效
 8005292:	2180      	movs	r1, #128	; 0x80
 8005294:	2037      	movs	r0, #55	; 0x37
 8005296:	f000 f95e 	bl	8005556 <MPU_Write_Byte>
	res=MPU_Read_Byte(MPU_DEVICE_ID_REG);
 800529a:	2075      	movs	r0, #117	; 0x75
 800529c:	f000 f98b 	bl	80055b6 <MPU_Read_Byte>
 80052a0:	4603      	mov	r3, r0
 80052a2:	71fb      	strb	r3, [r7, #7]
	if(res==MPU_ADDR)//器件ID正确
 80052a4:	79fb      	ldrb	r3, [r7, #7]
 80052a6:	2b68      	cmp	r3, #104	; 0x68
 80052a8:	d10c      	bne.n	80052c4 <MPU_Init+0x7c>
	{
		MPU_Write_Byte(MPU_PWR_MGMT1_REG,0X01);	//设置CLKSEL,PLL X轴为参考
 80052aa:	2101      	movs	r1, #1
 80052ac:	206b      	movs	r0, #107	; 0x6b
 80052ae:	f000 f952 	bl	8005556 <MPU_Write_Byte>
		MPU_Write_Byte(MPU_PWR_MGMT2_REG,0X00);	//加速度与陀螺仪都工作
 80052b2:	2100      	movs	r1, #0
 80052b4:	206c      	movs	r0, #108	; 0x6c
 80052b6:	f000 f94e 	bl	8005556 <MPU_Write_Byte>
		MPU_Set_Rate(50);						//设置采样率为50Hz
 80052ba:	2032      	movs	r0, #50	; 0x32
 80052bc:	f000 f85a 	bl	8005374 <MPU_Set_Rate>
 	}else return 1;
	return 0;
 80052c0:	2300      	movs	r3, #0
 80052c2:	e000      	b.n	80052c6 <MPU_Init+0x7e>
 	}else return 1;
 80052c4:	2301      	movs	r3, #1
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3708      	adds	r7, #8
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}

080052ce <MPU_Set_Gyro_Fsr>:
//设置MPU6050陀螺仪传感器满量程范围
//fsr:0,±250dps;1,±500dps;2,±1000dps;3,±2000dps
//返回值:0,设置成功
//    其他,设置失败
uint8_t MPU_Set_Gyro_Fsr(uint8_t fsr)
{
 80052ce:	b580      	push	{r7, lr}
 80052d0:	b082      	sub	sp, #8
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	4603      	mov	r3, r0
 80052d6:	71fb      	strb	r3, [r7, #7]
	return MPU_Write_Byte(MPU_GYRO_CFG_REG,fsr<<3);//设置陀螺仪满量程范围
 80052d8:	79fb      	ldrb	r3, [r7, #7]
 80052da:	00db      	lsls	r3, r3, #3
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	4619      	mov	r1, r3
 80052e0:	201b      	movs	r0, #27
 80052e2:	f000 f938 	bl	8005556 <MPU_Write_Byte>
 80052e6:	4603      	mov	r3, r0
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3708      	adds	r7, #8
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}

080052f0 <MPU_Set_Accel_Fsr>:
//设置MPU6050加速度传感器满量程范围
//fsr:0,±2g;1,±4g;2,±8g;3,±16g
//返回值:0,设置成功
//    其他,设置失败
uint8_t MPU_Set_Accel_Fsr(uint8_t fsr)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b082      	sub	sp, #8
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	4603      	mov	r3, r0
 80052f8:	71fb      	strb	r3, [r7, #7]
	return MPU_Write_Byte(MPU_ACCEL_CFG_REG,fsr<<3);//设置加速度传感器满量程范围
 80052fa:	79fb      	ldrb	r3, [r7, #7]
 80052fc:	00db      	lsls	r3, r3, #3
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	4619      	mov	r1, r3
 8005302:	201c      	movs	r0, #28
 8005304:	f000 f927 	bl	8005556 <MPU_Write_Byte>
 8005308:	4603      	mov	r3, r0
}
 800530a:	4618      	mov	r0, r3
 800530c:	3708      	adds	r7, #8
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}

08005312 <MPU_Set_LPF>:
//设置MPU6050的数字低通滤波器
//lpf:数字低通滤波频率(Hz)
//返回值:0,设置成功
//    其他,设置失败
uint8_t MPU_Set_LPF(uint16_t lpf)
{
 8005312:	b580      	push	{r7, lr}
 8005314:	b084      	sub	sp, #16
 8005316:	af00      	add	r7, sp, #0
 8005318:	4603      	mov	r3, r0
 800531a:	80fb      	strh	r3, [r7, #6]
	uint8_t data=0;
 800531c:	2300      	movs	r3, #0
 800531e:	73fb      	strb	r3, [r7, #15]
	if(lpf>=188)data=1;
 8005320:	88fb      	ldrh	r3, [r7, #6]
 8005322:	2bbb      	cmp	r3, #187	; 0xbb
 8005324:	d902      	bls.n	800532c <MPU_Set_LPF+0x1a>
 8005326:	2301      	movs	r3, #1
 8005328:	73fb      	strb	r3, [r7, #15]
 800532a:	e019      	b.n	8005360 <MPU_Set_LPF+0x4e>
	else if(lpf>=98)data=2;
 800532c:	88fb      	ldrh	r3, [r7, #6]
 800532e:	2b61      	cmp	r3, #97	; 0x61
 8005330:	d902      	bls.n	8005338 <MPU_Set_LPF+0x26>
 8005332:	2302      	movs	r3, #2
 8005334:	73fb      	strb	r3, [r7, #15]
 8005336:	e013      	b.n	8005360 <MPU_Set_LPF+0x4e>
	else if(lpf>=42)data=3;
 8005338:	88fb      	ldrh	r3, [r7, #6]
 800533a:	2b29      	cmp	r3, #41	; 0x29
 800533c:	d902      	bls.n	8005344 <MPU_Set_LPF+0x32>
 800533e:	2303      	movs	r3, #3
 8005340:	73fb      	strb	r3, [r7, #15]
 8005342:	e00d      	b.n	8005360 <MPU_Set_LPF+0x4e>
	else if(lpf>=20)data=4;
 8005344:	88fb      	ldrh	r3, [r7, #6]
 8005346:	2b13      	cmp	r3, #19
 8005348:	d902      	bls.n	8005350 <MPU_Set_LPF+0x3e>
 800534a:	2304      	movs	r3, #4
 800534c:	73fb      	strb	r3, [r7, #15]
 800534e:	e007      	b.n	8005360 <MPU_Set_LPF+0x4e>
	else if(lpf>=10)data=5;
 8005350:	88fb      	ldrh	r3, [r7, #6]
 8005352:	2b09      	cmp	r3, #9
 8005354:	d902      	bls.n	800535c <MPU_Set_LPF+0x4a>
 8005356:	2305      	movs	r3, #5
 8005358:	73fb      	strb	r3, [r7, #15]
 800535a:	e001      	b.n	8005360 <MPU_Set_LPF+0x4e>
	else data=6;
 800535c:	2306      	movs	r3, #6
 800535e:	73fb      	strb	r3, [r7, #15]
	return MPU_Write_Byte(MPU_CFG_REG,data);//设置数字低通滤波器
 8005360:	7bfb      	ldrb	r3, [r7, #15]
 8005362:	4619      	mov	r1, r3
 8005364:	201a      	movs	r0, #26
 8005366:	f000 f8f6 	bl	8005556 <MPU_Write_Byte>
 800536a:	4603      	mov	r3, r0
}
 800536c:	4618      	mov	r0, r3
 800536e:	3710      	adds	r7, #16
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}

08005374 <MPU_Set_Rate>:
//设置MPU6050的采样率(假定Fs=1KHz)
//rate:4~1000(Hz)
//返回值:0,设置成功
//    其他,设置失败
uint8_t MPU_Set_Rate(uint16_t rate)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b084      	sub	sp, #16
 8005378:	af00      	add	r7, sp, #0
 800537a:	4603      	mov	r3, r0
 800537c:	80fb      	strh	r3, [r7, #6]
	uint8_t data;
	if(rate>1000)rate=1000;
 800537e:	88fb      	ldrh	r3, [r7, #6]
 8005380:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005384:	d902      	bls.n	800538c <MPU_Set_Rate+0x18>
 8005386:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800538a:	80fb      	strh	r3, [r7, #6]
	if(rate<4)rate=4;
 800538c:	88fb      	ldrh	r3, [r7, #6]
 800538e:	2b03      	cmp	r3, #3
 8005390:	d801      	bhi.n	8005396 <MPU_Set_Rate+0x22>
 8005392:	2304      	movs	r3, #4
 8005394:	80fb      	strh	r3, [r7, #6]
	data=1000/rate-1;
 8005396:	88fb      	ldrh	r3, [r7, #6]
 8005398:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800539c:	fb92 f3f3 	sdiv	r3, r2, r3
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	3b01      	subs	r3, #1
 80053a4:	73fb      	strb	r3, [r7, #15]
	data=MPU_Write_Byte(MPU_SAMPLE_RATE_REG,data);	//设置数字低通滤波器
 80053a6:	7bfb      	ldrb	r3, [r7, #15]
 80053a8:	4619      	mov	r1, r3
 80053aa:	2019      	movs	r0, #25
 80053ac:	f000 f8d3 	bl	8005556 <MPU_Write_Byte>
 80053b0:	4603      	mov	r3, r0
 80053b2:	73fb      	strb	r3, [r7, #15]
 	return MPU_Set_LPF(rate/2);	//自动设置LPF为采样率的一半
 80053b4:	88fb      	ldrh	r3, [r7, #6]
 80053b6:	085b      	lsrs	r3, r3, #1
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	4618      	mov	r0, r3
 80053bc:	f7ff ffa9 	bl	8005312 <MPU_Set_LPF>
 80053c0:	4603      	mov	r3, r0
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3710      	adds	r7, #16
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}

080053ca <MPU_Get_Accelerometer>:
//得到加速度值(原始值)
//gx,gy,gz:陀螺仪x,y,z轴的原始读数(带符号)
//返回值:0,成功
//    其他,错误代码
uint8_t MPU_Get_Accelerometer(int16_t *ax,int16_t *ay,int16_t *az)
{
 80053ca:	b580      	push	{r7, lr}
 80053cc:	b086      	sub	sp, #24
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	60f8      	str	r0, [r7, #12]
 80053d2:	60b9      	str	r1, [r7, #8]
 80053d4:	607a      	str	r2, [r7, #4]
	uint8_t buf[6],res;
	res=MPU_Read_Len(MPU_ADDR,MPU_ACCEL_XOUTH_REG,6,buf);
 80053d6:	f107 0310 	add.w	r3, r7, #16
 80053da:	2206      	movs	r2, #6
 80053dc:	213b      	movs	r1, #59	; 0x3b
 80053de:	2068      	movs	r0, #104	; 0x68
 80053e0:	f000 f867 	bl	80054b2 <MPU_Read_Len>
 80053e4:	4603      	mov	r3, r0
 80053e6:	75fb      	strb	r3, [r7, #23]
	if(res==0)
 80053e8:	7dfb      	ldrb	r3, [r7, #23]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d11a      	bne.n	8005424 <MPU_Get_Accelerometer+0x5a>
	{
		*ax=((uint16_t)buf[0]<<8)|buf[1];
 80053ee:	7c3b      	ldrb	r3, [r7, #16]
 80053f0:	021b      	lsls	r3, r3, #8
 80053f2:	b21a      	sxth	r2, r3
 80053f4:	7c7b      	ldrb	r3, [r7, #17]
 80053f6:	b21b      	sxth	r3, r3
 80053f8:	4313      	orrs	r3, r2
 80053fa:	b21a      	sxth	r2, r3
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	801a      	strh	r2, [r3, #0]
		*ay=((uint16_t)buf[2]<<8)|buf[3];
 8005400:	7cbb      	ldrb	r3, [r7, #18]
 8005402:	021b      	lsls	r3, r3, #8
 8005404:	b21a      	sxth	r2, r3
 8005406:	7cfb      	ldrb	r3, [r7, #19]
 8005408:	b21b      	sxth	r3, r3
 800540a:	4313      	orrs	r3, r2
 800540c:	b21a      	sxth	r2, r3
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	801a      	strh	r2, [r3, #0]
		*az=((uint16_t)buf[4]<<8)|buf[5];
 8005412:	7d3b      	ldrb	r3, [r7, #20]
 8005414:	021b      	lsls	r3, r3, #8
 8005416:	b21a      	sxth	r2, r3
 8005418:	7d7b      	ldrb	r3, [r7, #21]
 800541a:	b21b      	sxth	r3, r3
 800541c:	4313      	orrs	r3, r2
 800541e:	b21a      	sxth	r2, r3
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	801a      	strh	r2, [r3, #0]
	}
    return res;;
 8005424:	7dfb      	ldrb	r3, [r7, #23]
}
 8005426:	4618      	mov	r0, r3
 8005428:	3718      	adds	r7, #24
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}

0800542e <MPU_Write_Len>:
//len:写入长度
//buf:数据区
//返回值:0,正常
//    其他,错误代码
uint8_t MPU_Write_Len(uint8_t addr,uint8_t reg,uint8_t len,uint8_t *buf)
{
 800542e:	b580      	push	{r7, lr}
 8005430:	b084      	sub	sp, #16
 8005432:	af00      	add	r7, sp, #0
 8005434:	603b      	str	r3, [r7, #0]
 8005436:	4603      	mov	r3, r0
 8005438:	71fb      	strb	r3, [r7, #7]
 800543a:	460b      	mov	r3, r1
 800543c:	71bb      	strb	r3, [r7, #6]
 800543e:	4613      	mov	r3, r2
 8005440:	717b      	strb	r3, [r7, #5]
	uint8_t i;
    MPU_IIC_Start();
 8005442:	f000 f937 	bl	80056b4 <MPU_IIC_Start>
	MPU_IIC_Send_Byte((addr<<1)|0);//发送器件地址+写命令
 8005446:	79fb      	ldrb	r3, [r7, #7]
 8005448:	005b      	lsls	r3, r3, #1
 800544a:	b2db      	uxtb	r3, r3
 800544c:	4618      	mov	r0, r3
 800544e:	f000 f9ef 	bl	8005830 <MPU_IIC_Send_Byte>
	if(MPU_IIC_Wait_Ack())	//等待应答
 8005452:	f000 f973 	bl	800573c <MPU_IIC_Wait_Ack>
 8005456:	4603      	mov	r3, r0
 8005458:	2b00      	cmp	r3, #0
 800545a:	d003      	beq.n	8005464 <MPU_Write_Len+0x36>
	{
		MPU_IIC_Stop();
 800545c:	f000 f94c 	bl	80056f8 <MPU_IIC_Stop>
		return 1;
 8005460:	2301      	movs	r3, #1
 8005462:	e022      	b.n	80054aa <MPU_Write_Len+0x7c>
	}
    MPU_IIC_Send_Byte(reg);	//写寄存器地址
 8005464:	79bb      	ldrb	r3, [r7, #6]
 8005466:	4618      	mov	r0, r3
 8005468:	f000 f9e2 	bl	8005830 <MPU_IIC_Send_Byte>
    MPU_IIC_Wait_Ack();		//等待应答
 800546c:	f000 f966 	bl	800573c <MPU_IIC_Wait_Ack>
	for(i=0;i<len;i++)
 8005470:	2300      	movs	r3, #0
 8005472:	73fb      	strb	r3, [r7, #15]
 8005474:	e012      	b.n	800549c <MPU_Write_Len+0x6e>
	{
		MPU_IIC_Send_Byte(buf[i]);	//发送数据
 8005476:	7bfb      	ldrb	r3, [r7, #15]
 8005478:	683a      	ldr	r2, [r7, #0]
 800547a:	4413      	add	r3, r2
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	4618      	mov	r0, r3
 8005480:	f000 f9d6 	bl	8005830 <MPU_IIC_Send_Byte>
		if(MPU_IIC_Wait_Ack())		//等待ACK
 8005484:	f000 f95a 	bl	800573c <MPU_IIC_Wait_Ack>
 8005488:	4603      	mov	r3, r0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d003      	beq.n	8005496 <MPU_Write_Len+0x68>
		{
			MPU_IIC_Stop();
 800548e:	f000 f933 	bl	80056f8 <MPU_IIC_Stop>
			return 1;
 8005492:	2301      	movs	r3, #1
 8005494:	e009      	b.n	80054aa <MPU_Write_Len+0x7c>
	for(i=0;i<len;i++)
 8005496:	7bfb      	ldrb	r3, [r7, #15]
 8005498:	3301      	adds	r3, #1
 800549a:	73fb      	strb	r3, [r7, #15]
 800549c:	7bfa      	ldrb	r2, [r7, #15]
 800549e:	797b      	ldrb	r3, [r7, #5]
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d3e8      	bcc.n	8005476 <MPU_Write_Len+0x48>
		}
	}
    MPU_IIC_Stop();
 80054a4:	f000 f928 	bl	80056f8 <MPU_IIC_Stop>
	return 0;
 80054a8:	2300      	movs	r3, #0
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3710      	adds	r7, #16
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}

080054b2 <MPU_Read_Len>:
//len:要读取的长度
//buf:读取到的数据存储区
//返回值:0,正常
//    其他,错误代码
uint8_t MPU_Read_Len(uint8_t addr,uint8_t reg,uint8_t len,uint8_t *buf)
{
 80054b2:	b580      	push	{r7, lr}
 80054b4:	b082      	sub	sp, #8
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	603b      	str	r3, [r7, #0]
 80054ba:	4603      	mov	r3, r0
 80054bc:	71fb      	strb	r3, [r7, #7]
 80054be:	460b      	mov	r3, r1
 80054c0:	71bb      	strb	r3, [r7, #6]
 80054c2:	4613      	mov	r3, r2
 80054c4:	717b      	strb	r3, [r7, #5]
 	MPU_IIC_Start();
 80054c6:	f000 f8f5 	bl	80056b4 <MPU_IIC_Start>
	MPU_IIC_Send_Byte((addr<<1)|0);//发送器件地址+写命令
 80054ca:	79fb      	ldrb	r3, [r7, #7]
 80054cc:	005b      	lsls	r3, r3, #1
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	4618      	mov	r0, r3
 80054d2:	f000 f9ad 	bl	8005830 <MPU_IIC_Send_Byte>
	if(MPU_IIC_Wait_Ack())	//等待应答
 80054d6:	f000 f931 	bl	800573c <MPU_IIC_Wait_Ack>
 80054da:	4603      	mov	r3, r0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d003      	beq.n	80054e8 <MPU_Read_Len+0x36>
	{
		MPU_IIC_Stop();
 80054e0:	f000 f90a 	bl	80056f8 <MPU_IIC_Stop>
		return 1;
 80054e4:	2301      	movs	r3, #1
 80054e6:	e032      	b.n	800554e <MPU_Read_Len+0x9c>
	}
    MPU_IIC_Send_Byte(reg);	//写寄存器地址
 80054e8:	79bb      	ldrb	r3, [r7, #6]
 80054ea:	4618      	mov	r0, r3
 80054ec:	f000 f9a0 	bl	8005830 <MPU_IIC_Send_Byte>
    MPU_IIC_Wait_Ack();		//等待应答
 80054f0:	f000 f924 	bl	800573c <MPU_IIC_Wait_Ack>
    MPU_IIC_Start();
 80054f4:	f000 f8de 	bl	80056b4 <MPU_IIC_Start>
	MPU_IIC_Send_Byte((addr<<1)|1);//发送器件地址+读命令
 80054f8:	79fb      	ldrb	r3, [r7, #7]
 80054fa:	005b      	lsls	r3, r3, #1
 80054fc:	b25b      	sxtb	r3, r3
 80054fe:	f043 0301 	orr.w	r3, r3, #1
 8005502:	b25b      	sxtb	r3, r3
 8005504:	b2db      	uxtb	r3, r3
 8005506:	4618      	mov	r0, r3
 8005508:	f000 f992 	bl	8005830 <MPU_IIC_Send_Byte>
    MPU_IIC_Wait_Ack();		//等待应答
 800550c:	f000 f916 	bl	800573c <MPU_IIC_Wait_Ack>
	while(len)
 8005510:	e017      	b.n	8005542 <MPU_Read_Len+0x90>
	{
		if(len==1)*buf=MPU_IIC_Read_Byte(0);//读数据,发送nACK
 8005512:	797b      	ldrb	r3, [r7, #5]
 8005514:	2b01      	cmp	r3, #1
 8005516:	d107      	bne.n	8005528 <MPU_Read_Len+0x76>
 8005518:	2000      	movs	r0, #0
 800551a:	f000 f9c1 	bl	80058a0 <MPU_IIC_Read_Byte>
 800551e:	4603      	mov	r3, r0
 8005520:	461a      	mov	r2, r3
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	701a      	strb	r2, [r3, #0]
 8005526:	e006      	b.n	8005536 <MPU_Read_Len+0x84>
		else *buf=MPU_IIC_Read_Byte(1);		//读数据,发送ACK
 8005528:	2001      	movs	r0, #1
 800552a:	f000 f9b9 	bl	80058a0 <MPU_IIC_Read_Byte>
 800552e:	4603      	mov	r3, r0
 8005530:	461a      	mov	r2, r3
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	701a      	strb	r2, [r3, #0]
		len--;
 8005536:	797b      	ldrb	r3, [r7, #5]
 8005538:	3b01      	subs	r3, #1
 800553a:	717b      	strb	r3, [r7, #5]
		buf++;
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	3301      	adds	r3, #1
 8005540:	603b      	str	r3, [r7, #0]
	while(len)
 8005542:	797b      	ldrb	r3, [r7, #5]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d1e4      	bne.n	8005512 <MPU_Read_Len+0x60>
	}
    MPU_IIC_Stop();	//产生一个停止条件
 8005548:	f000 f8d6 	bl	80056f8 <MPU_IIC_Stop>
	return 0;
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	3708      	adds	r7, #8
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}

08005556 <MPU_Write_Byte>:
//reg:寄存器地址
//data:数据
//返回值:0,正常
//    其他,错误代码
uint8_t MPU_Write_Byte(uint8_t reg,uint8_t data)
{
 8005556:	b580      	push	{r7, lr}
 8005558:	b082      	sub	sp, #8
 800555a:	af00      	add	r7, sp, #0
 800555c:	4603      	mov	r3, r0
 800555e:	460a      	mov	r2, r1
 8005560:	71fb      	strb	r3, [r7, #7]
 8005562:	4613      	mov	r3, r2
 8005564:	71bb      	strb	r3, [r7, #6]
    MPU_IIC_Start();
 8005566:	f000 f8a5 	bl	80056b4 <MPU_IIC_Start>
	MPU_IIC_Send_Byte((MPU_ADDR<<1)|0);//发送器件地址+写命令
 800556a:	20d0      	movs	r0, #208	; 0xd0
 800556c:	f000 f960 	bl	8005830 <MPU_IIC_Send_Byte>
	if(MPU_IIC_Wait_Ack())	//等待应答
 8005570:	f000 f8e4 	bl	800573c <MPU_IIC_Wait_Ack>
 8005574:	4603      	mov	r3, r0
 8005576:	2b00      	cmp	r3, #0
 8005578:	d003      	beq.n	8005582 <MPU_Write_Byte+0x2c>
	{
		MPU_IIC_Stop();
 800557a:	f000 f8bd 	bl	80056f8 <MPU_IIC_Stop>
		return 1;
 800557e:	2301      	movs	r3, #1
 8005580:	e015      	b.n	80055ae <MPU_Write_Byte+0x58>
	}
    MPU_IIC_Send_Byte(reg);	//写寄存器地址
 8005582:	79fb      	ldrb	r3, [r7, #7]
 8005584:	4618      	mov	r0, r3
 8005586:	f000 f953 	bl	8005830 <MPU_IIC_Send_Byte>
    MPU_IIC_Wait_Ack();		//等待应答
 800558a:	f000 f8d7 	bl	800573c <MPU_IIC_Wait_Ack>
	MPU_IIC_Send_Byte(data);//发送数据
 800558e:	79bb      	ldrb	r3, [r7, #6]
 8005590:	4618      	mov	r0, r3
 8005592:	f000 f94d 	bl	8005830 <MPU_IIC_Send_Byte>
	if(MPU_IIC_Wait_Ack())	//等待ACK
 8005596:	f000 f8d1 	bl	800573c <MPU_IIC_Wait_Ack>
 800559a:	4603      	mov	r3, r0
 800559c:	2b00      	cmp	r3, #0
 800559e:	d003      	beq.n	80055a8 <MPU_Write_Byte+0x52>
	{
		MPU_IIC_Stop();
 80055a0:	f000 f8aa 	bl	80056f8 <MPU_IIC_Stop>
		return 1;
 80055a4:	2301      	movs	r3, #1
 80055a6:	e002      	b.n	80055ae <MPU_Write_Byte+0x58>
	}
    MPU_IIC_Stop();
 80055a8:	f000 f8a6 	bl	80056f8 <MPU_IIC_Stop>
	return 0;
 80055ac:	2300      	movs	r3, #0
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3708      	adds	r7, #8
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}

080055b6 <MPU_Read_Byte>:
//IIC读一个字节
//reg:寄存器地址
//返回值:读到的数据
uint8_t MPU_Read_Byte(uint8_t reg)
{
 80055b6:	b580      	push	{r7, lr}
 80055b8:	b084      	sub	sp, #16
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	4603      	mov	r3, r0
 80055be:	71fb      	strb	r3, [r7, #7]
	uint8_t res;
    MPU_IIC_Start();
 80055c0:	f000 f878 	bl	80056b4 <MPU_IIC_Start>
	MPU_IIC_Send_Byte((MPU_ADDR<<1)|0);//发送器件地址+写命令
 80055c4:	20d0      	movs	r0, #208	; 0xd0
 80055c6:	f000 f933 	bl	8005830 <MPU_IIC_Send_Byte>
	MPU_IIC_Wait_Ack();		//等待应答
 80055ca:	f000 f8b7 	bl	800573c <MPU_IIC_Wait_Ack>
    MPU_IIC_Send_Byte(reg);	//写寄存器地址
 80055ce:	79fb      	ldrb	r3, [r7, #7]
 80055d0:	4618      	mov	r0, r3
 80055d2:	f000 f92d 	bl	8005830 <MPU_IIC_Send_Byte>
    MPU_IIC_Wait_Ack();		//等待应答
 80055d6:	f000 f8b1 	bl	800573c <MPU_IIC_Wait_Ack>
    MPU_IIC_Start();
 80055da:	f000 f86b 	bl	80056b4 <MPU_IIC_Start>
	MPU_IIC_Send_Byte((MPU_ADDR<<1)|1);//发送器件地址+读命令
 80055de:	20d1      	movs	r0, #209	; 0xd1
 80055e0:	f000 f926 	bl	8005830 <MPU_IIC_Send_Byte>
    MPU_IIC_Wait_Ack();		//等待应答
 80055e4:	f000 f8aa 	bl	800573c <MPU_IIC_Wait_Ack>
	res=MPU_IIC_Read_Byte(0);//读取数据,发送nACK
 80055e8:	2000      	movs	r0, #0
 80055ea:	f000 f959 	bl	80058a0 <MPU_IIC_Read_Byte>
 80055ee:	4603      	mov	r3, r0
 80055f0:	73fb      	strb	r3, [r7, #15]
    MPU_IIC_Stop();			//产生一个停止条件
 80055f2:	f000 f881 	bl	80056f8 <MPU_IIC_Stop>
	return res;
 80055f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3710      	adds	r7, #16
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}

08005600 <MPU_IIC_Init>:
 */
#include "mpu6050iic.h"

//初始化IIC
void MPU_IIC_Init(void)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005606:	463b      	mov	r3, r7
 8005608:	2200      	movs	r2, #0
 800560a:	601a      	str	r2, [r3, #0]
 800560c:	605a      	str	r2, [r3, #4]
 800560e:	609a      	str	r2, [r3, #8]
 8005610:	60da      	str	r2, [r3, #12]

  GPIO_InitStruct.Pin = MPU_SCL_Pin|MPU_SDA_Pin;
 8005612:	23c0      	movs	r3, #192	; 0xc0
 8005614:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005616:	2301      	movs	r3, #1
 8005618:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800561a:	2300      	movs	r3, #0
 800561c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800561e:	2303      	movs	r3, #3
 8005620:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005622:	463b      	mov	r3, r7
 8005624:	4619      	mov	r1, r3
 8005626:	4806      	ldr	r0, [pc, #24]	; (8005640 <MPU_IIC_Init+0x40>)
 8005628:	f7fd fbde 	bl	8002de8 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA, MPU_SCL_Pin|MPU_SDA_Pin, GPIO_PIN_SET);
 800562c:	2201      	movs	r2, #1
 800562e:	21c0      	movs	r1, #192	; 0xc0
 8005630:	4803      	ldr	r0, [pc, #12]	; (8005640 <MPU_IIC_Init+0x40>)
 8005632:	f7fd fd74 	bl	800311e <HAL_GPIO_WritePin>
}
 8005636:	bf00      	nop
 8005638:	3710      	adds	r7, #16
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}
 800563e:	bf00      	nop
 8005640:	40010800 	.word	0x40010800

08005644 <MPU_SDA_OUT>:
//IO方向设置z
void MPU_SDA_OUT()
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b084      	sub	sp, #16
 8005648:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800564a:	463b      	mov	r3, r7
 800564c:	2200      	movs	r2, #0
 800564e:	601a      	str	r2, [r3, #0]
 8005650:	605a      	str	r2, [r3, #4]
 8005652:	609a      	str	r2, [r3, #8]
 8005654:	60da      	str	r2, [r3, #12]

	GPIO_InitStruct.Pin = MPU_SDA_Pin;
 8005656:	2380      	movs	r3, #128	; 0x80
 8005658:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800565a:	2301      	movs	r3, #1
 800565c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800565e:	2300      	movs	r3, #0
 8005660:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005662:	2303      	movs	r3, #3
 8005664:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005666:	463b      	mov	r3, r7
 8005668:	4619      	mov	r1, r3
 800566a:	4803      	ldr	r0, [pc, #12]	; (8005678 <MPU_SDA_OUT+0x34>)
 800566c:	f7fd fbbc 	bl	8002de8 <HAL_GPIO_Init>
}
 8005670:	bf00      	nop
 8005672:	3710      	adds	r7, #16
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}
 8005678:	40010800 	.word	0x40010800

0800567c <MPU_SDA_IN>:
void MPU_SDA_IN()
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b084      	sub	sp, #16
 8005680:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005682:	463b      	mov	r3, r7
 8005684:	2200      	movs	r2, #0
 8005686:	601a      	str	r2, [r3, #0]
 8005688:	605a      	str	r2, [r3, #4]
 800568a:	609a      	str	r2, [r3, #8]
 800568c:	60da      	str	r2, [r3, #12]

	GPIO_InitStruct.Pin = MPU_SDA_Pin;
 800568e:	2380      	movs	r3, #128	; 0x80
 8005690:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005692:	2300      	movs	r3, #0
 8005694:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005696:	2300      	movs	r3, #0
 8005698:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800569a:	2303      	movs	r3, #3
 800569c:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800569e:	463b      	mov	r3, r7
 80056a0:	4619      	mov	r1, r3
 80056a2:	4803      	ldr	r0, [pc, #12]	; (80056b0 <MPU_SDA_IN+0x34>)
 80056a4:	f7fd fba0 	bl	8002de8 <HAL_GPIO_Init>
}
 80056a8:	bf00      	nop
 80056aa:	3710      	adds	r7, #16
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}
 80056b0:	40010800 	.word	0x40010800

080056b4 <MPU_IIC_Start>:
//产生IIC起始信号
void MPU_IIC_Start(void)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	af00      	add	r7, sp, #0
	MPU_SDA_OUT();     //sda线输出
 80056b8:	f7ff ffc4 	bl	8005644 <MPU_SDA_OUT>
	MPU_IIC_SDA(1);
 80056bc:	2201      	movs	r2, #1
 80056be:	2180      	movs	r1, #128	; 0x80
 80056c0:	480c      	ldr	r0, [pc, #48]	; (80056f4 <MPU_IIC_Start+0x40>)
 80056c2:	f7fd fd2c 	bl	800311e <HAL_GPIO_WritePin>
	MPU_IIC_SCL(1);
 80056c6:	2201      	movs	r2, #1
 80056c8:	2140      	movs	r1, #64	; 0x40
 80056ca:	480a      	ldr	r0, [pc, #40]	; (80056f4 <MPU_IIC_Start+0x40>)
 80056cc:	f7fd fd27 	bl	800311e <HAL_GPIO_WritePin>
	HAL_usDelay(2);
 80056d0:	2002      	movs	r0, #2
 80056d2:	f7fc fc47 	bl	8001f64 <HAL_usDelay>
	MPU_IIC_SDA(0);//START:when CLK is high,DATA change form high to low
 80056d6:	2200      	movs	r2, #0
 80056d8:	2180      	movs	r1, #128	; 0x80
 80056da:	4806      	ldr	r0, [pc, #24]	; (80056f4 <MPU_IIC_Start+0x40>)
 80056dc:	f7fd fd1f 	bl	800311e <HAL_GPIO_WritePin>
	HAL_usDelay(2);
 80056e0:	2002      	movs	r0, #2
 80056e2:	f7fc fc3f 	bl	8001f64 <HAL_usDelay>
	MPU_IIC_SCL(0);//钳住I2C总线，准备发送或接收数据
 80056e6:	2200      	movs	r2, #0
 80056e8:	2140      	movs	r1, #64	; 0x40
 80056ea:	4802      	ldr	r0, [pc, #8]	; (80056f4 <MPU_IIC_Start+0x40>)
 80056ec:	f7fd fd17 	bl	800311e <HAL_GPIO_WritePin>
}
 80056f0:	bf00      	nop
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	40010800 	.word	0x40010800

080056f8 <MPU_IIC_Stop>:
//产生IIC停止信号
void MPU_IIC_Stop(void)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	af00      	add	r7, sp, #0
	MPU_SDA_OUT();//sda线输出
 80056fc:	f7ff ffa2 	bl	8005644 <MPU_SDA_OUT>
	MPU_IIC_SCL(0);
 8005700:	2200      	movs	r2, #0
 8005702:	2140      	movs	r1, #64	; 0x40
 8005704:	480c      	ldr	r0, [pc, #48]	; (8005738 <MPU_IIC_Stop+0x40>)
 8005706:	f7fd fd0a 	bl	800311e <HAL_GPIO_WritePin>
	MPU_IIC_SDA(0);//STOP:when CLK is high DATA change form low to high
 800570a:	2200      	movs	r2, #0
 800570c:	2180      	movs	r1, #128	; 0x80
 800570e:	480a      	ldr	r0, [pc, #40]	; (8005738 <MPU_IIC_Stop+0x40>)
 8005710:	f7fd fd05 	bl	800311e <HAL_GPIO_WritePin>
	HAL_usDelay(2);
 8005714:	2002      	movs	r0, #2
 8005716:	f7fc fc25 	bl	8001f64 <HAL_usDelay>
	MPU_IIC_SCL(1);
 800571a:	2201      	movs	r2, #1
 800571c:	2140      	movs	r1, #64	; 0x40
 800571e:	4806      	ldr	r0, [pc, #24]	; (8005738 <MPU_IIC_Stop+0x40>)
 8005720:	f7fd fcfd 	bl	800311e <HAL_GPIO_WritePin>
	MPU_IIC_SDA(1);//发送I2C总线结束信号
 8005724:	2201      	movs	r2, #1
 8005726:	2180      	movs	r1, #128	; 0x80
 8005728:	4803      	ldr	r0, [pc, #12]	; (8005738 <MPU_IIC_Stop+0x40>)
 800572a:	f7fd fcf8 	bl	800311e <HAL_GPIO_WritePin>
	HAL_usDelay(2);
 800572e:	2002      	movs	r0, #2
 8005730:	f7fc fc18 	bl	8001f64 <HAL_usDelay>
}
 8005734:	bf00      	nop
 8005736:	bd80      	pop	{r7, pc}
 8005738:	40010800 	.word	0x40010800

0800573c <MPU_IIC_Wait_Ack>:
//等待应答信号到来
//返回值：1，接收应答失败
//        0，接收应答成功
uint8_t MPU_IIC_Wait_Ack(void)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b082      	sub	sp, #8
 8005740:	af00      	add	r7, sp, #0
	uint8_t ucErrTime=0;
 8005742:	2300      	movs	r3, #0
 8005744:	71fb      	strb	r3, [r7, #7]
	MPU_SDA_IN();      //SDA设置为输入
 8005746:	f7ff ff99 	bl	800567c <MPU_SDA_IN>
	MPU_IIC_SDA(1);HAL_usDelay(2);
 800574a:	2201      	movs	r2, #1
 800574c:	2180      	movs	r1, #128	; 0x80
 800574e:	4815      	ldr	r0, [pc, #84]	; (80057a4 <MPU_IIC_Wait_Ack+0x68>)
 8005750:	f7fd fce5 	bl	800311e <HAL_GPIO_WritePin>
 8005754:	2002      	movs	r0, #2
 8005756:	f7fc fc05 	bl	8001f64 <HAL_usDelay>
	MPU_IIC_SCL(1);HAL_usDelay(2);
 800575a:	2201      	movs	r2, #1
 800575c:	2140      	movs	r1, #64	; 0x40
 800575e:	4811      	ldr	r0, [pc, #68]	; (80057a4 <MPU_IIC_Wait_Ack+0x68>)
 8005760:	f7fd fcdd 	bl	800311e <HAL_GPIO_WritePin>
 8005764:	2002      	movs	r0, #2
 8005766:	f7fc fbfd 	bl	8001f64 <HAL_usDelay>
	while(MPU_READ_SDA)
 800576a:	e009      	b.n	8005780 <MPU_IIC_Wait_Ack+0x44>
	{
		ucErrTime++;
 800576c:	79fb      	ldrb	r3, [r7, #7]
 800576e:	3301      	adds	r3, #1
 8005770:	71fb      	strb	r3, [r7, #7]
		if(ucErrTime>250)
 8005772:	79fb      	ldrb	r3, [r7, #7]
 8005774:	2bfa      	cmp	r3, #250	; 0xfa
 8005776:	d903      	bls.n	8005780 <MPU_IIC_Wait_Ack+0x44>
		{
			MPU_IIC_Stop();
 8005778:	f7ff ffbe 	bl	80056f8 <MPU_IIC_Stop>
			return 1;
 800577c:	2301      	movs	r3, #1
 800577e:	e00c      	b.n	800579a <MPU_IIC_Wait_Ack+0x5e>
	while(MPU_READ_SDA)
 8005780:	2180      	movs	r1, #128	; 0x80
 8005782:	4808      	ldr	r0, [pc, #32]	; (80057a4 <MPU_IIC_Wait_Ack+0x68>)
 8005784:	f7fd fcb4 	bl	80030f0 <HAL_GPIO_ReadPin>
 8005788:	4603      	mov	r3, r0
 800578a:	2b00      	cmp	r3, #0
 800578c:	d1ee      	bne.n	800576c <MPU_IIC_Wait_Ack+0x30>
		}
	}
	MPU_IIC_SCL(0);//时钟输出0
 800578e:	2200      	movs	r2, #0
 8005790:	2140      	movs	r1, #64	; 0x40
 8005792:	4804      	ldr	r0, [pc, #16]	; (80057a4 <MPU_IIC_Wait_Ack+0x68>)
 8005794:	f7fd fcc3 	bl	800311e <HAL_GPIO_WritePin>
	return 0;
 8005798:	2300      	movs	r3, #0
}
 800579a:	4618      	mov	r0, r3
 800579c:	3708      	adds	r7, #8
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop
 80057a4:	40010800 	.word	0x40010800

080057a8 <MPU_IIC_Ack>:
//产生ACK应答
void MPU_IIC_Ack(void)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	af00      	add	r7, sp, #0
	MPU_IIC_SCL(0);
 80057ac:	2200      	movs	r2, #0
 80057ae:	2140      	movs	r1, #64	; 0x40
 80057b0:	480d      	ldr	r0, [pc, #52]	; (80057e8 <MPU_IIC_Ack+0x40>)
 80057b2:	f7fd fcb4 	bl	800311e <HAL_GPIO_WritePin>
	MPU_SDA_OUT();
 80057b6:	f7ff ff45 	bl	8005644 <MPU_SDA_OUT>
	MPU_IIC_SDA(0);
 80057ba:	2200      	movs	r2, #0
 80057bc:	2180      	movs	r1, #128	; 0x80
 80057be:	480a      	ldr	r0, [pc, #40]	; (80057e8 <MPU_IIC_Ack+0x40>)
 80057c0:	f7fd fcad 	bl	800311e <HAL_GPIO_WritePin>
	HAL_usDelay(2);
 80057c4:	2002      	movs	r0, #2
 80057c6:	f7fc fbcd 	bl	8001f64 <HAL_usDelay>
	MPU_IIC_SCL(1);
 80057ca:	2201      	movs	r2, #1
 80057cc:	2140      	movs	r1, #64	; 0x40
 80057ce:	4806      	ldr	r0, [pc, #24]	; (80057e8 <MPU_IIC_Ack+0x40>)
 80057d0:	f7fd fca5 	bl	800311e <HAL_GPIO_WritePin>
	HAL_usDelay(2);
 80057d4:	2002      	movs	r0, #2
 80057d6:	f7fc fbc5 	bl	8001f64 <HAL_usDelay>
	MPU_IIC_SCL(0);
 80057da:	2200      	movs	r2, #0
 80057dc:	2140      	movs	r1, #64	; 0x40
 80057de:	4802      	ldr	r0, [pc, #8]	; (80057e8 <MPU_IIC_Ack+0x40>)
 80057e0:	f7fd fc9d 	bl	800311e <HAL_GPIO_WritePin>
}
 80057e4:	bf00      	nop
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	40010800 	.word	0x40010800

080057ec <MPU_IIC_NAck>:
//不产生ACK应答
void MPU_IIC_NAck(void)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	af00      	add	r7, sp, #0
	MPU_IIC_SCL(0);
 80057f0:	2200      	movs	r2, #0
 80057f2:	2140      	movs	r1, #64	; 0x40
 80057f4:	480d      	ldr	r0, [pc, #52]	; (800582c <MPU_IIC_NAck+0x40>)
 80057f6:	f7fd fc92 	bl	800311e <HAL_GPIO_WritePin>
	MPU_SDA_OUT();
 80057fa:	f7ff ff23 	bl	8005644 <MPU_SDA_OUT>
	MPU_IIC_SDA(1);
 80057fe:	2201      	movs	r2, #1
 8005800:	2180      	movs	r1, #128	; 0x80
 8005802:	480a      	ldr	r0, [pc, #40]	; (800582c <MPU_IIC_NAck+0x40>)
 8005804:	f7fd fc8b 	bl	800311e <HAL_GPIO_WritePin>
	HAL_usDelay(2);
 8005808:	2002      	movs	r0, #2
 800580a:	f7fc fbab 	bl	8001f64 <HAL_usDelay>
	MPU_IIC_SCL(1);
 800580e:	2201      	movs	r2, #1
 8005810:	2140      	movs	r1, #64	; 0x40
 8005812:	4806      	ldr	r0, [pc, #24]	; (800582c <MPU_IIC_NAck+0x40>)
 8005814:	f7fd fc83 	bl	800311e <HAL_GPIO_WritePin>
	HAL_usDelay(2);
 8005818:	2002      	movs	r0, #2
 800581a:	f7fc fba3 	bl	8001f64 <HAL_usDelay>
	MPU_IIC_SCL(0);
 800581e:	2200      	movs	r2, #0
 8005820:	2140      	movs	r1, #64	; 0x40
 8005822:	4802      	ldr	r0, [pc, #8]	; (800582c <MPU_IIC_NAck+0x40>)
 8005824:	f7fd fc7b 	bl	800311e <HAL_GPIO_WritePin>
}
 8005828:	bf00      	nop
 800582a:	bd80      	pop	{r7, pc}
 800582c:	40010800 	.word	0x40010800

08005830 <MPU_IIC_Send_Byte>:
//IIC发送一个字节
//返回从机有无应答
//1，有应答
//0，无应答
void MPU_IIC_Send_Byte(uint8_t txd)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	4603      	mov	r3, r0
 8005838:	71fb      	strb	r3, [r7, #7]
	uint8_t t;
	MPU_SDA_OUT();
 800583a:	f7ff ff03 	bl	8005644 <MPU_SDA_OUT>
	MPU_IIC_SCL(0);//拉低时钟开始数据传输
 800583e:	2200      	movs	r2, #0
 8005840:	2140      	movs	r1, #64	; 0x40
 8005842:	4816      	ldr	r0, [pc, #88]	; (800589c <MPU_IIC_Send_Byte+0x6c>)
 8005844:	f7fd fc6b 	bl	800311e <HAL_GPIO_WritePin>
    for(t=0;t<8;t++)
 8005848:	2300      	movs	r3, #0
 800584a:	73fb      	strb	r3, [r7, #15]
 800584c:	e01d      	b.n	800588a <MPU_IIC_Send_Byte+0x5a>
    {
    	MPU_IIC_SDA((txd&0x80)>>7);
 800584e:	79fb      	ldrb	r3, [r7, #7]
 8005850:	09db      	lsrs	r3, r3, #7
 8005852:	b2db      	uxtb	r3, r3
 8005854:	461a      	mov	r2, r3
 8005856:	2180      	movs	r1, #128	; 0x80
 8005858:	4810      	ldr	r0, [pc, #64]	; (800589c <MPU_IIC_Send_Byte+0x6c>)
 800585a:	f7fd fc60 	bl	800311e <HAL_GPIO_WritePin>
        txd<<=1;
 800585e:	79fb      	ldrb	r3, [r7, #7]
 8005860:	005b      	lsls	r3, r3, #1
 8005862:	71fb      	strb	r3, [r7, #7]
        MPU_IIC_SCL(1);
 8005864:	2201      	movs	r2, #1
 8005866:	2140      	movs	r1, #64	; 0x40
 8005868:	480c      	ldr	r0, [pc, #48]	; (800589c <MPU_IIC_Send_Byte+0x6c>)
 800586a:	f7fd fc58 	bl	800311e <HAL_GPIO_WritePin>
        HAL_usDelay(2);
 800586e:	2002      	movs	r0, #2
 8005870:	f7fc fb78 	bl	8001f64 <HAL_usDelay>
        MPU_IIC_SCL(0);
 8005874:	2200      	movs	r2, #0
 8005876:	2140      	movs	r1, #64	; 0x40
 8005878:	4808      	ldr	r0, [pc, #32]	; (800589c <MPU_IIC_Send_Byte+0x6c>)
 800587a:	f7fd fc50 	bl	800311e <HAL_GPIO_WritePin>
		HAL_usDelay(2);
 800587e:	2002      	movs	r0, #2
 8005880:	f7fc fb70 	bl	8001f64 <HAL_usDelay>
    for(t=0;t<8;t++)
 8005884:	7bfb      	ldrb	r3, [r7, #15]
 8005886:	3301      	adds	r3, #1
 8005888:	73fb      	strb	r3, [r7, #15]
 800588a:	7bfb      	ldrb	r3, [r7, #15]
 800588c:	2b07      	cmp	r3, #7
 800588e:	d9de      	bls.n	800584e <MPU_IIC_Send_Byte+0x1e>
    }
}
 8005890:	bf00      	nop
 8005892:	bf00      	nop
 8005894:	3710      	adds	r7, #16
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop
 800589c:	40010800 	.word	0x40010800

080058a0 <MPU_IIC_Read_Byte>:
//读1个字节，ack=1时，发送ACK，ack=0，发送nACK
uint8_t MPU_IIC_Read_Byte(uint8_t ack)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b084      	sub	sp, #16
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	4603      	mov	r3, r0
 80058a8:	71fb      	strb	r3, [r7, #7]
	uint8_t i,receive=0;
 80058aa:	2300      	movs	r3, #0
 80058ac:	73bb      	strb	r3, [r7, #14]
	MPU_SDA_IN();//SDA设置为输入
 80058ae:	f7ff fee5 	bl	800567c <MPU_SDA_IN>
    for(i=0;i<8;i++ )
 80058b2:	2300      	movs	r3, #0
 80058b4:	73fb      	strb	r3, [r7, #15]
 80058b6:	e01f      	b.n	80058f8 <MPU_IIC_Read_Byte+0x58>
	{
    	MPU_IIC_SCL(0);
 80058b8:	2200      	movs	r2, #0
 80058ba:	2140      	movs	r1, #64	; 0x40
 80058bc:	4816      	ldr	r0, [pc, #88]	; (8005918 <MPU_IIC_Read_Byte+0x78>)
 80058be:	f7fd fc2e 	bl	800311e <HAL_GPIO_WritePin>
    	HAL_usDelay(2);
 80058c2:	2002      	movs	r0, #2
 80058c4:	f7fc fb4e 	bl	8001f64 <HAL_usDelay>
    	MPU_IIC_SCL(1);
 80058c8:	2201      	movs	r2, #1
 80058ca:	2140      	movs	r1, #64	; 0x40
 80058cc:	4812      	ldr	r0, [pc, #72]	; (8005918 <MPU_IIC_Read_Byte+0x78>)
 80058ce:	f7fd fc26 	bl	800311e <HAL_GPIO_WritePin>
        receive<<=1;
 80058d2:	7bbb      	ldrb	r3, [r7, #14]
 80058d4:	005b      	lsls	r3, r3, #1
 80058d6:	73bb      	strb	r3, [r7, #14]
        if(MPU_READ_SDA)receive++;
 80058d8:	2180      	movs	r1, #128	; 0x80
 80058da:	480f      	ldr	r0, [pc, #60]	; (8005918 <MPU_IIC_Read_Byte+0x78>)
 80058dc:	f7fd fc08 	bl	80030f0 <HAL_GPIO_ReadPin>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d002      	beq.n	80058ec <MPU_IIC_Read_Byte+0x4c>
 80058e6:	7bbb      	ldrb	r3, [r7, #14]
 80058e8:	3301      	adds	r3, #1
 80058ea:	73bb      	strb	r3, [r7, #14]
        HAL_usDelay(2);
 80058ec:	2002      	movs	r0, #2
 80058ee:	f7fc fb39 	bl	8001f64 <HAL_usDelay>
    for(i=0;i<8;i++ )
 80058f2:	7bfb      	ldrb	r3, [r7, #15]
 80058f4:	3301      	adds	r3, #1
 80058f6:	73fb      	strb	r3, [r7, #15]
 80058f8:	7bfb      	ldrb	r3, [r7, #15]
 80058fa:	2b07      	cmp	r3, #7
 80058fc:	d9dc      	bls.n	80058b8 <MPU_IIC_Read_Byte+0x18>
    }
    if (!ack)
 80058fe:	79fb      	ldrb	r3, [r7, #7]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d102      	bne.n	800590a <MPU_IIC_Read_Byte+0x6a>
        MPU_IIC_NAck();//发送nACK
 8005904:	f7ff ff72 	bl	80057ec <MPU_IIC_NAck>
 8005908:	e001      	b.n	800590e <MPU_IIC_Read_Byte+0x6e>
    else
        MPU_IIC_Ack(); //发送ACK
 800590a:	f7ff ff4d 	bl	80057a8 <MPU_IIC_Ack>
    return receive;
 800590e:	7bbb      	ldrb	r3, [r7, #14]
}
 8005910:	4618      	mov	r0, r3
 8005912:	3710      	adds	r7, #16
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}
 8005918:	40010800 	.word	0x40010800

0800591c <set_int_enable>:
 *  interrupt is used.
 *  @param[in]  enable      1 to enable interrupt.
 *  @return     0 if successful.
 */
static int set_int_enable(unsigned char enable)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b084      	sub	sp, #16
 8005920:	af00      	add	r7, sp, #0
 8005922:	4603      	mov	r3, r0
 8005924:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
 8005926:	4b29      	ldr	r3, [pc, #164]	; (80059cc <set_int_enable+0xb0>)
 8005928:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800592c:	2b00      	cmp	r3, #0
 800592e:	d01c      	beq.n	800596a <set_int_enable+0x4e>
        if (enable)
 8005930:	79fb      	ldrb	r3, [r7, #7]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d002      	beq.n	800593c <set_int_enable+0x20>
            tmp = BIT_DMP_INT_EN;
 8005936:	2302      	movs	r3, #2
 8005938:	73fb      	strb	r3, [r7, #15]
 800593a:	e001      	b.n	8005940 <set_int_enable+0x24>
        else
            tmp = 0x00;
 800593c:	2300      	movs	r3, #0
 800593e:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8005940:	4b22      	ldr	r3, [pc, #136]	; (80059cc <set_int_enable+0xb0>)
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	7818      	ldrb	r0, [r3, #0]
 8005946:	4b21      	ldr	r3, [pc, #132]	; (80059cc <set_int_enable+0xb0>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	7bd9      	ldrb	r1, [r3, #15]
 800594c:	f107 030f 	add.w	r3, r7, #15
 8005950:	2201      	movs	r2, #1
 8005952:	f7ff fd6c 	bl	800542e <MPU_Write_Len>
 8005956:	4603      	mov	r3, r0
 8005958:	2b00      	cmp	r3, #0
 800595a:	d002      	beq.n	8005962 <set_int_enable+0x46>
            return -1;
 800595c:	f04f 33ff 	mov.w	r3, #4294967295
 8005960:	e030      	b.n	80059c4 <set_int_enable+0xa8>
        st.chip_cfg.int_enable = tmp;
 8005962:	7bfa      	ldrb	r2, [r7, #15]
 8005964:	4b19      	ldr	r3, [pc, #100]	; (80059cc <set_int_enable+0xb0>)
 8005966:	745a      	strb	r2, [r3, #17]
 8005968:	e02b      	b.n	80059c2 <set_int_enable+0xa6>
    } else {
        if (!st.chip_cfg.sensors)
 800596a:	4b18      	ldr	r3, [pc, #96]	; (80059cc <set_int_enable+0xb0>)
 800596c:	7a9b      	ldrb	r3, [r3, #10]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d102      	bne.n	8005978 <set_int_enable+0x5c>
            return -1;
 8005972:	f04f 33ff 	mov.w	r3, #4294967295
 8005976:	e025      	b.n	80059c4 <set_int_enable+0xa8>
        if (enable && st.chip_cfg.int_enable)
 8005978:	79fb      	ldrb	r3, [r7, #7]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d005      	beq.n	800598a <set_int_enable+0x6e>
 800597e:	4b13      	ldr	r3, [pc, #76]	; (80059cc <set_int_enable+0xb0>)
 8005980:	7c5b      	ldrb	r3, [r3, #17]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d001      	beq.n	800598a <set_int_enable+0x6e>
            return 0;
 8005986:	2300      	movs	r3, #0
 8005988:	e01c      	b.n	80059c4 <set_int_enable+0xa8>
        if (enable)
 800598a:	79fb      	ldrb	r3, [r7, #7]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d002      	beq.n	8005996 <set_int_enable+0x7a>
            tmp = BIT_DATA_RDY_EN;
 8005990:	2301      	movs	r3, #1
 8005992:	73fb      	strb	r3, [r7, #15]
 8005994:	e001      	b.n	800599a <set_int_enable+0x7e>
        else
            tmp = 0x00;
 8005996:	2300      	movs	r3, #0
 8005998:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 800599a:	4b0c      	ldr	r3, [pc, #48]	; (80059cc <set_int_enable+0xb0>)
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	7818      	ldrb	r0, [r3, #0]
 80059a0:	4b0a      	ldr	r3, [pc, #40]	; (80059cc <set_int_enable+0xb0>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	7bd9      	ldrb	r1, [r3, #15]
 80059a6:	f107 030f 	add.w	r3, r7, #15
 80059aa:	2201      	movs	r2, #1
 80059ac:	f7ff fd3f 	bl	800542e <MPU_Write_Len>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d002      	beq.n	80059bc <set_int_enable+0xa0>
            return -1;
 80059b6:	f04f 33ff 	mov.w	r3, #4294967295
 80059ba:	e003      	b.n	80059c4 <set_int_enable+0xa8>
        st.chip_cfg.int_enable = tmp;
 80059bc:	7bfa      	ldrb	r2, [r7, #15]
 80059be:	4b03      	ldr	r3, [pc, #12]	; (80059cc <set_int_enable+0xb0>)
 80059c0:	745a      	strb	r2, [r3, #17]
    }
    return 0;
 80059c2:	2300      	movs	r3, #0
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3710      	adds	r7, #16
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}
 80059cc:	2000000c 	.word	0x2000000c

080059d0 <mpu_init>:
 *  Data ready interrupt: Disabled, active low, unlatched.
 *  @param[in]  int_param   Platform-specific parameters to interrupt API.
 *  @return     0 if successful.
 */
int mpu_init(void)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b082      	sub	sp, #8
 80059d4:	af00      	add	r7, sp, #0
    unsigned char data[6], rev;

    /* Reset device. */
    data[0] = BIT_RESET;
 80059d6:	2380      	movs	r3, #128	; 0x80
 80059d8:	703b      	strb	r3, [r7, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 80059da:	4b82      	ldr	r3, [pc, #520]	; (8005be4 <mpu_init+0x214>)
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	7818      	ldrb	r0, [r3, #0]
 80059e0:	4b80      	ldr	r3, [pc, #512]	; (8005be4 <mpu_init+0x214>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	7c99      	ldrb	r1, [r3, #18]
 80059e6:	463b      	mov	r3, r7
 80059e8:	2201      	movs	r2, #1
 80059ea:	f7ff fd20 	bl	800542e <MPU_Write_Len>
 80059ee:	4603      	mov	r3, r0
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d002      	beq.n	80059fa <mpu_init+0x2a>
        return -1;
 80059f4:	f04f 33ff 	mov.w	r3, #4294967295
 80059f8:	e0ef      	b.n	8005bda <mpu_init+0x20a>
    delay_ms(100);
 80059fa:	2064      	movs	r0, #100	; 0x64
 80059fc:	f7fc faf2 	bl	8001fe4 <HAL_msDelay>

    /* Wake up chip. */
    data[0] = 0x00;
 8005a00:	2300      	movs	r3, #0
 8005a02:	703b      	strb	r3, [r7, #0]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 8005a04:	4b77      	ldr	r3, [pc, #476]	; (8005be4 <mpu_init+0x214>)
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	7818      	ldrb	r0, [r3, #0]
 8005a0a:	4b76      	ldr	r3, [pc, #472]	; (8005be4 <mpu_init+0x214>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	7c99      	ldrb	r1, [r3, #18]
 8005a10:	463b      	mov	r3, r7
 8005a12:	2201      	movs	r2, #1
 8005a14:	f7ff fd0b 	bl	800542e <MPU_Write_Len>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d002      	beq.n	8005a24 <mpu_init+0x54>
        return -1;
 8005a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8005a22:	e0da      	b.n	8005bda <mpu_init+0x20a>

#if defined MPU6050
    /* Check product revision. */
    if (i2c_read(st.hw->addr, st.reg->accel_offs, 6, data))
 8005a24:	4b6f      	ldr	r3, [pc, #444]	; (8005be4 <mpu_init+0x214>)
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	7818      	ldrb	r0, [r3, #0]
 8005a2a:	4b6e      	ldr	r3, [pc, #440]	; (8005be4 <mpu_init+0x214>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	7d99      	ldrb	r1, [r3, #22]
 8005a30:	463b      	mov	r3, r7
 8005a32:	2206      	movs	r2, #6
 8005a34:	f7ff fd3d 	bl	80054b2 <MPU_Read_Len>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d002      	beq.n	8005a44 <mpu_init+0x74>
        return -1;
 8005a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8005a42:	e0ca      	b.n	8005bda <mpu_init+0x20a>
    rev = ((data[5] & 0x01) << 2) | ((data[3] & 0x01) << 1) |
 8005a44:	797b      	ldrb	r3, [r7, #5]
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	b25b      	sxtb	r3, r3
 8005a4a:	f003 0304 	and.w	r3, r3, #4
 8005a4e:	b25a      	sxtb	r2, r3
 8005a50:	78fb      	ldrb	r3, [r7, #3]
 8005a52:	005b      	lsls	r3, r3, #1
 8005a54:	b25b      	sxtb	r3, r3
 8005a56:	f003 0302 	and.w	r3, r3, #2
 8005a5a:	b25b      	sxtb	r3, r3
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	b25a      	sxtb	r2, r3
        (data[1] & 0x01);
 8005a60:	787b      	ldrb	r3, [r7, #1]
 8005a62:	b25b      	sxtb	r3, r3
 8005a64:	f003 0301 	and.w	r3, r3, #1
 8005a68:	b25b      	sxtb	r3, r3
    rev = ((data[5] & 0x01) << 2) | ((data[3] & 0x01) << 1) |
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	b25b      	sxtb	r3, r3
 8005a6e:	71fb      	strb	r3, [r7, #7]

    if (rev) {
 8005a70:	79fb      	ldrb	r3, [r7, #7]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d015      	beq.n	8005aa2 <mpu_init+0xd2>
        /* Congrats, these parts are better. */
        if (rev == 1)
 8005a76:	79fb      	ldrb	r3, [r7, #7]
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d103      	bne.n	8005a84 <mpu_init+0xb4>
            st.chip_cfg.accel_half = 1;
 8005a7c:	4b59      	ldr	r3, [pc, #356]	; (8005be4 <mpu_init+0x214>)
 8005a7e:	2201      	movs	r2, #1
 8005a80:	74da      	strb	r2, [r3, #19]
 8005a82:	e038      	b.n	8005af6 <mpu_init+0x126>
        else if (rev == 2)
 8005a84:	79fb      	ldrb	r3, [r7, #7]
 8005a86:	2b02      	cmp	r3, #2
 8005a88:	d103      	bne.n	8005a92 <mpu_init+0xc2>
            st.chip_cfg.accel_half = 0;
 8005a8a:	4b56      	ldr	r3, [pc, #344]	; (8005be4 <mpu_init+0x214>)
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	74da      	strb	r2, [r3, #19]
 8005a90:	e031      	b.n	8005af6 <mpu_init+0x126>
        else {
            log_e("Unsupported software product rev %d.\n", rev);
 8005a92:	79fb      	ldrb	r3, [r7, #7]
 8005a94:	4619      	mov	r1, r3
 8005a96:	4854      	ldr	r0, [pc, #336]	; (8005be8 <mpu_init+0x218>)
 8005a98:	f003 ff6c 	bl	8009974 <iprintf>
            return -1;
 8005a9c:	f04f 33ff 	mov.w	r3, #4294967295
 8005aa0:	e09b      	b.n	8005bda <mpu_init+0x20a>
        }
    } else {
        if (i2c_read(st.hw->addr, st.reg->prod_id, 1, data))
 8005aa2:	4b50      	ldr	r3, [pc, #320]	; (8005be4 <mpu_init+0x214>)
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	7818      	ldrb	r0, [r3, #0]
 8005aa8:	4b4e      	ldr	r3, [pc, #312]	; (8005be4 <mpu_init+0x214>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	78d9      	ldrb	r1, [r3, #3]
 8005aae:	463b      	mov	r3, r7
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	f7ff fcfe 	bl	80054b2 <MPU_Read_Len>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d002      	beq.n	8005ac2 <mpu_init+0xf2>
            return -1;
 8005abc:	f04f 33ff 	mov.w	r3, #4294967295
 8005ac0:	e08b      	b.n	8005bda <mpu_init+0x20a>
        rev = data[0] & 0x0F;
 8005ac2:	783b      	ldrb	r3, [r7, #0]
 8005ac4:	f003 030f 	and.w	r3, r3, #15
 8005ac8:	71fb      	strb	r3, [r7, #7]
        if (!rev) {
 8005aca:	79fb      	ldrb	r3, [r7, #7]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d105      	bne.n	8005adc <mpu_init+0x10c>
            log_e("Product ID read as 0 indicates device is either "
 8005ad0:	4846      	ldr	r0, [pc, #280]	; (8005bec <mpu_init+0x21c>)
 8005ad2:	f003 ffb5 	bl	8009a40 <puts>
                "incompatible or an MPU3050.\n");
            return -1;
 8005ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8005ada:	e07e      	b.n	8005bda <mpu_init+0x20a>
        } else if (rev == 4) {
 8005adc:	79fb      	ldrb	r3, [r7, #7]
 8005ade:	2b04      	cmp	r3, #4
 8005ae0:	d106      	bne.n	8005af0 <mpu_init+0x120>
            log_i("Half sensitivity part found.\n");
 8005ae2:	4843      	ldr	r0, [pc, #268]	; (8005bf0 <mpu_init+0x220>)
 8005ae4:	f003 ffac 	bl	8009a40 <puts>
            st.chip_cfg.accel_half = 1;
 8005ae8:	4b3e      	ldr	r3, [pc, #248]	; (8005be4 <mpu_init+0x214>)
 8005aea:	2201      	movs	r2, #1
 8005aec:	74da      	strb	r2, [r3, #19]
 8005aee:	e002      	b.n	8005af6 <mpu_init+0x126>
        } else
            st.chip_cfg.accel_half = 0;
 8005af0:	4b3c      	ldr	r3, [pc, #240]	; (8005be4 <mpu_init+0x214>)
 8005af2:	2200      	movs	r2, #0
 8005af4:	74da      	strb	r2, [r3, #19]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
        return -1;
#endif

    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.sensors = 0xFF;
 8005af6:	4b3b      	ldr	r3, [pc, #236]	; (8005be4 <mpu_init+0x214>)
 8005af8:	22ff      	movs	r2, #255	; 0xff
 8005afa:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.gyro_fsr = 0xFF;
 8005afc:	4b39      	ldr	r3, [pc, #228]	; (8005be4 <mpu_init+0x214>)
 8005afe:	22ff      	movs	r2, #255	; 0xff
 8005b00:	721a      	strb	r2, [r3, #8]
    st.chip_cfg.accel_fsr = 0xFF;
 8005b02:	4b38      	ldr	r3, [pc, #224]	; (8005be4 <mpu_init+0x214>)
 8005b04:	22ff      	movs	r2, #255	; 0xff
 8005b06:	725a      	strb	r2, [r3, #9]
    st.chip_cfg.lpf = 0xFF;
 8005b08:	4b36      	ldr	r3, [pc, #216]	; (8005be4 <mpu_init+0x214>)
 8005b0a:	22ff      	movs	r2, #255	; 0xff
 8005b0c:	72da      	strb	r2, [r3, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
 8005b0e:	4b35      	ldr	r3, [pc, #212]	; (8005be4 <mpu_init+0x214>)
 8005b10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b14:	81da      	strh	r2, [r3, #14]
    st.chip_cfg.fifo_enable = 0xFF;
 8005b16:	4b33      	ldr	r3, [pc, #204]	; (8005be4 <mpu_init+0x214>)
 8005b18:	22ff      	movs	r2, #255	; 0xff
 8005b1a:	741a      	strb	r2, [r3, #16]
    st.chip_cfg.bypass_mode = 0xFF;
 8005b1c:	4b31      	ldr	r3, [pc, #196]	; (8005be4 <mpu_init+0x214>)
 8005b1e:	22ff      	movs	r2, #255	; 0xff
 8005b20:	749a      	strb	r2, [r3, #18]
#ifdef AK89xx_SECONDARY
    st.chip_cfg.compass_sample_rate = 0xFFFF;
#endif
    /* mpu_set_sensors always preserves this setting. */
    st.chip_cfg.clk_src = INV_CLK_PLL;
 8005b22:	4b30      	ldr	r3, [pc, #192]	; (8005be4 <mpu_init+0x214>)
 8005b24:	2201      	movs	r2, #1
 8005b26:	731a      	strb	r2, [r3, #12]
    /* Handled in next call to mpu_set_bypass. */
    st.chip_cfg.active_low_int = 1;
 8005b28:	4b2e      	ldr	r3, [pc, #184]	; (8005be4 <mpu_init+0x214>)
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    st.chip_cfg.latched_int = 0;
 8005b30:	4b2c      	ldr	r3, [pc, #176]	; (8005be4 <mpu_init+0x214>)
 8005b32:	2200      	movs	r2, #0
 8005b34:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    st.chip_cfg.int_motion_only = 0;
 8005b38:	4b2a      	ldr	r3, [pc, #168]	; (8005be4 <mpu_init+0x214>)
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	755a      	strb	r2, [r3, #21]
    st.chip_cfg.lp_accel_mode = 0;
 8005b3e:	4b29      	ldr	r3, [pc, #164]	; (8005be4 <mpu_init+0x214>)
 8005b40:	2200      	movs	r2, #0
 8005b42:	751a      	strb	r2, [r3, #20]
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
 8005b44:	220c      	movs	r2, #12
 8005b46:	2100      	movs	r1, #0
 8005b48:	482a      	ldr	r0, [pc, #168]	; (8005bf4 <mpu_init+0x224>)
 8005b4a:	f004 f889 	bl	8009c60 <memset>
    st.chip_cfg.dmp_on = 0;
 8005b4e:	4b25      	ldr	r3, [pc, #148]	; (8005be4 <mpu_init+0x214>)
 8005b50:	2200      	movs	r2, #0
 8005b52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    st.chip_cfg.dmp_loaded = 0;
 8005b56:	4b23      	ldr	r3, [pc, #140]	; (8005be4 <mpu_init+0x214>)
 8005b58:	2200      	movs	r2, #0
 8005b5a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    st.chip_cfg.dmp_sample_rate = 0;
 8005b5e:	4b21      	ldr	r3, [pc, #132]	; (8005be4 <mpu_init+0x214>)
 8005b60:	2200      	movs	r2, #0
 8005b62:	84da      	strh	r2, [r3, #38]	; 0x26

    if (mpu_set_gyro_fsr(2000))
 8005b64:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005b68:	f000 f9fa 	bl	8005f60 <mpu_set_gyro_fsr>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d002      	beq.n	8005b78 <mpu_init+0x1a8>
        return -1;
 8005b72:	f04f 33ff 	mov.w	r3, #4294967295
 8005b76:	e030      	b.n	8005bda <mpu_init+0x20a>
    if (mpu_set_accel_fsr(2))
 8005b78:	2002      	movs	r0, #2
 8005b7a:	f000 fa7f 	bl	800607c <mpu_set_accel_fsr>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d002      	beq.n	8005b8a <mpu_init+0x1ba>
        return -1;
 8005b84:	f04f 33ff 	mov.w	r3, #4294967295
 8005b88:	e027      	b.n	8005bda <mpu_init+0x20a>
    if (mpu_set_lpf(42))
 8005b8a:	202a      	movs	r0, #42	; 0x2a
 8005b8c:	f000 fb1a 	bl	80061c4 <mpu_set_lpf>
 8005b90:	4603      	mov	r3, r0
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d002      	beq.n	8005b9c <mpu_init+0x1cc>
        return -1;
 8005b96:	f04f 33ff 	mov.w	r3, #4294967295
 8005b9a:	e01e      	b.n	8005bda <mpu_init+0x20a>
    if (mpu_set_sample_rate(50))
 8005b9c:	2032      	movs	r0, #50	; 0x32
 8005b9e:	f000 fb77 	bl	8006290 <mpu_set_sample_rate>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d002      	beq.n	8005bae <mpu_init+0x1de>
        return -1;
 8005ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8005bac:	e015      	b.n	8005bda <mpu_init+0x20a>
    if (mpu_configure_fifo(0))
 8005bae:	2000      	movs	r0, #0
 8005bb0:	f000 fc5a 	bl	8006468 <mpu_configure_fifo>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d002      	beq.n	8005bc0 <mpu_init+0x1f0>
        return -1;
 8005bba:	f04f 33ff 	mov.w	r3, #4294967295
 8005bbe:	e00c      	b.n	8005bda <mpu_init+0x20a>
    setup_compass();
    if (mpu_set_compass_sample_rate(10))
        return -1;
#else
    /* Already disabled by setup_compass. */
    if (mpu_set_bypass(0))
 8005bc0:	2000      	movs	r0, #0
 8005bc2:	f000 fda7 	bl	8006714 <mpu_set_bypass>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d002      	beq.n	8005bd2 <mpu_init+0x202>
        return -1;
 8005bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8005bd0:	e003      	b.n	8005bda <mpu_init+0x20a>
#endif

    mpu_set_sensors(0);
 8005bd2:	2000      	movs	r0, #0
 8005bd4:	f000 fc9a 	bl	800650c <mpu_set_sensors>
    return 0;
 8005bd8:	2300      	movs	r3, #0
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3708      	adds	r7, #8
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}
 8005be2:	bf00      	nop
 8005be4:	2000000c 	.word	0x2000000c
 8005be8:	0800c8b0 	.word	0x0800c8b0
 8005bec:	0800c8d8 	.word	0x0800c8d8
 8005bf0:	0800c924 	.word	0x0800c924
 8005bf4:	20000022 	.word	0x20000022

08005bf8 <mpu_lp_accel_mode>:
 *  @param[in]  rate        Minimum sampling rate, or zero to disable LP
 *                          accel mode.
 *  @return     0 if successful.
 */
int mpu_lp_accel_mode(unsigned char rate)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b084      	sub	sp, #16
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	4603      	mov	r3, r0
 8005c00:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp[2];

    if (rate > 40)
 8005c02:	79fb      	ldrb	r3, [r7, #7]
 8005c04:	2b28      	cmp	r3, #40	; 0x28
 8005c06:	d902      	bls.n	8005c0e <mpu_lp_accel_mode+0x16>
        return -1;
 8005c08:	f04f 33ff 	mov.w	r3, #4294967295
 8005c0c:	e06a      	b.n	8005ce4 <mpu_lp_accel_mode+0xec>

    if (!rate) {
 8005c0e:	79fb      	ldrb	r3, [r7, #7]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d11c      	bne.n	8005c4e <mpu_lp_accel_mode+0x56>
        mpu_set_int_latched(0);
 8005c14:	2000      	movs	r0, #0
 8005c16:	f000 fe43 	bl	80068a0 <mpu_set_int_latched>
        tmp[0] = 0;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	733b      	strb	r3, [r7, #12]
        tmp[1] = BIT_STBY_XYZG;
 8005c1e:	2307      	movs	r3, #7
 8005c20:	737b      	strb	r3, [r7, #13]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 8005c22:	4b32      	ldr	r3, [pc, #200]	; (8005cec <mpu_lp_accel_mode+0xf4>)
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	7818      	ldrb	r0, [r3, #0]
 8005c28:	4b30      	ldr	r3, [pc, #192]	; (8005cec <mpu_lp_accel_mode+0xf4>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	7c99      	ldrb	r1, [r3, #18]
 8005c2e:	f107 030c 	add.w	r3, r7, #12
 8005c32:	2202      	movs	r2, #2
 8005c34:	f7ff fbfb 	bl	800542e <MPU_Write_Len>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d002      	beq.n	8005c44 <mpu_lp_accel_mode+0x4c>
            return -1;
 8005c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8005c42:	e04f      	b.n	8005ce4 <mpu_lp_accel_mode+0xec>
        st.chip_cfg.lp_accel_mode = 0;
 8005c44:	4b29      	ldr	r3, [pc, #164]	; (8005cec <mpu_lp_accel_mode+0xf4>)
 8005c46:	2200      	movs	r2, #0
 8005c48:	751a      	strb	r2, [r3, #20]
        return 0;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	e04a      	b.n	8005ce4 <mpu_lp_accel_mode+0xec>
     * it gets a chance to deassert the interrupt pin; therefore, we shift this
     * responsibility over to the MCU.
     *
     * Any register read will clear the interrupt.
     */
    mpu_set_int_latched(1);
 8005c4e:	2001      	movs	r0, #1
 8005c50:	f000 fe26 	bl	80068a0 <mpu_set_int_latched>
#if defined MPU6050
    tmp[0] = BIT_LPA_CYCLE;
 8005c54:	2320      	movs	r3, #32
 8005c56:	733b      	strb	r3, [r7, #12]
    if (rate == 1) {
 8005c58:	79fb      	ldrb	r3, [r7, #7]
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d105      	bne.n	8005c6a <mpu_lp_accel_mode+0x72>
        tmp[1] = INV_LPA_1_25HZ;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(5);
 8005c62:	2005      	movs	r0, #5
 8005c64:	f000 faae 	bl	80061c4 <mpu_set_lpf>
 8005c68:	e016      	b.n	8005c98 <mpu_lp_accel_mode+0xa0>
    } else if (rate <= 5) {
 8005c6a:	79fb      	ldrb	r3, [r7, #7]
 8005c6c:	2b05      	cmp	r3, #5
 8005c6e:	d805      	bhi.n	8005c7c <mpu_lp_accel_mode+0x84>
        tmp[1] = INV_LPA_5HZ;
 8005c70:	2301      	movs	r3, #1
 8005c72:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(5);
 8005c74:	2005      	movs	r0, #5
 8005c76:	f000 faa5 	bl	80061c4 <mpu_set_lpf>
 8005c7a:	e00d      	b.n	8005c98 <mpu_lp_accel_mode+0xa0>
    } else if (rate <= 20) {
 8005c7c:	79fb      	ldrb	r3, [r7, #7]
 8005c7e:	2b14      	cmp	r3, #20
 8005c80:	d805      	bhi.n	8005c8e <mpu_lp_accel_mode+0x96>
        tmp[1] = INV_LPA_20HZ;
 8005c82:	2302      	movs	r3, #2
 8005c84:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(10);
 8005c86:	200a      	movs	r0, #10
 8005c88:	f000 fa9c 	bl	80061c4 <mpu_set_lpf>
 8005c8c:	e004      	b.n	8005c98 <mpu_lp_accel_mode+0xa0>
    } else {
        tmp[1] = INV_LPA_40HZ;
 8005c8e:	2303      	movs	r3, #3
 8005c90:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(20);
 8005c92:	2014      	movs	r0, #20
 8005c94:	f000 fa96 	bl	80061c4 <mpu_set_lpf>
    }
    tmp[1] = (tmp[1] << 6) | BIT_STBY_XYZG;
 8005c98:	7b7b      	ldrb	r3, [r7, #13]
 8005c9a:	019b      	lsls	r3, r3, #6
 8005c9c:	b25b      	sxtb	r3, r3
 8005c9e:	f043 0307 	orr.w	r3, r3, #7
 8005ca2:	b25b      	sxtb	r3, r3
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	737b      	strb	r3, [r7, #13]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 8005ca8:	4b10      	ldr	r3, [pc, #64]	; (8005cec <mpu_lp_accel_mode+0xf4>)
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	7818      	ldrb	r0, [r3, #0]
 8005cae:	4b0f      	ldr	r3, [pc, #60]	; (8005cec <mpu_lp_accel_mode+0xf4>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	7c99      	ldrb	r1, [r3, #18]
 8005cb4:	f107 030c 	add.w	r3, r7, #12
 8005cb8:	2202      	movs	r2, #2
 8005cba:	f7ff fbb8 	bl	800542e <MPU_Write_Len>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d002      	beq.n	8005cca <mpu_lp_accel_mode+0xd2>
        return -1;
 8005cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8005cc8:	e00c      	b.n	8005ce4 <mpu_lp_accel_mode+0xec>
        return -1;
    tmp[0] = BIT_LPA_CYCLE;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
        return -1;
#endif
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
 8005cca:	4b08      	ldr	r3, [pc, #32]	; (8005cec <mpu_lp_accel_mode+0xf4>)
 8005ccc:	2208      	movs	r2, #8
 8005cce:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.clk_src = 0;
 8005cd0:	4b06      	ldr	r3, [pc, #24]	; (8005cec <mpu_lp_accel_mode+0xf4>)
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	731a      	strb	r2, [r3, #12]
    st.chip_cfg.lp_accel_mode = 1;
 8005cd6:	4b05      	ldr	r3, [pc, #20]	; (8005cec <mpu_lp_accel_mode+0xf4>)
 8005cd8:	2201      	movs	r2, #1
 8005cda:	751a      	strb	r2, [r3, #20]
    mpu_configure_fifo(0);
 8005cdc:	2000      	movs	r0, #0
 8005cde:	f000 fbc3 	bl	8006468 <mpu_configure_fifo>

    return 0;
 8005ce2:	2300      	movs	r3, #0
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3710      	adds	r7, #16
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}
 8005cec:	2000000c 	.word	0x2000000c

08005cf0 <mpu_reset_fifo>:
/**
 *  @brief  Reset FIFO read/write pointers.
 *  @return 0 if successful.
 */
int mpu_reset_fifo(void)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b082      	sub	sp, #8
 8005cf4:	af00      	add	r7, sp, #0
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8005cf6:	4b7e      	ldr	r3, [pc, #504]	; (8005ef0 <mpu_reset_fifo+0x200>)
 8005cf8:	7a9b      	ldrb	r3, [r3, #10]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d102      	bne.n	8005d04 <mpu_reset_fifo+0x14>
        return -1;
 8005cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8005d02:	e0f1      	b.n	8005ee8 <mpu_reset_fifo+0x1f8>

    data = 0;
 8005d04:	2300      	movs	r3, #0
 8005d06:	71fb      	strb	r3, [r7, #7]
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8005d08:	4b79      	ldr	r3, [pc, #484]	; (8005ef0 <mpu_reset_fifo+0x200>)
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	7818      	ldrb	r0, [r3, #0]
 8005d0e:	4b78      	ldr	r3, [pc, #480]	; (8005ef0 <mpu_reset_fifo+0x200>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	7bd9      	ldrb	r1, [r3, #15]
 8005d14:	1dfb      	adds	r3, r7, #7
 8005d16:	2201      	movs	r2, #1
 8005d18:	f7ff fb89 	bl	800542e <MPU_Write_Len>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d002      	beq.n	8005d28 <mpu_reset_fifo+0x38>
        return -1;
 8005d22:	f04f 33ff 	mov.w	r3, #4294967295
 8005d26:	e0df      	b.n	8005ee8 <mpu_reset_fifo+0x1f8>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 8005d28:	4b71      	ldr	r3, [pc, #452]	; (8005ef0 <mpu_reset_fifo+0x200>)
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	7818      	ldrb	r0, [r3, #0]
 8005d2e:	4b70      	ldr	r3, [pc, #448]	; (8005ef0 <mpu_reset_fifo+0x200>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	7959      	ldrb	r1, [r3, #5]
 8005d34:	1dfb      	adds	r3, r7, #7
 8005d36:	2201      	movs	r2, #1
 8005d38:	f7ff fb79 	bl	800542e <MPU_Write_Len>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d002      	beq.n	8005d48 <mpu_reset_fifo+0x58>
        return -1;
 8005d42:	f04f 33ff 	mov.w	r3, #4294967295
 8005d46:	e0cf      	b.n	8005ee8 <mpu_reset_fifo+0x1f8>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8005d48:	4b69      	ldr	r3, [pc, #420]	; (8005ef0 <mpu_reset_fifo+0x200>)
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	7818      	ldrb	r0, [r3, #0]
 8005d4e:	4b68      	ldr	r3, [pc, #416]	; (8005ef0 <mpu_reset_fifo+0x200>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	7919      	ldrb	r1, [r3, #4]
 8005d54:	1dfb      	adds	r3, r7, #7
 8005d56:	2201      	movs	r2, #1
 8005d58:	f7ff fb69 	bl	800542e <MPU_Write_Len>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d002      	beq.n	8005d68 <mpu_reset_fifo+0x78>
        return -1;
 8005d62:	f04f 33ff 	mov.w	r3, #4294967295
 8005d66:	e0bf      	b.n	8005ee8 <mpu_reset_fifo+0x1f8>

    if (st.chip_cfg.dmp_on) {
 8005d68:	4b61      	ldr	r3, [pc, #388]	; (8005ef0 <mpu_reset_fifo+0x200>)
 8005d6a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d05c      	beq.n	8005e2c <mpu_reset_fifo+0x13c>
        data = BIT_FIFO_RST | BIT_DMP_RST;
 8005d72:	230c      	movs	r3, #12
 8005d74:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8005d76:	4b5e      	ldr	r3, [pc, #376]	; (8005ef0 <mpu_reset_fifo+0x200>)
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	7818      	ldrb	r0, [r3, #0]
 8005d7c:	4b5c      	ldr	r3, [pc, #368]	; (8005ef0 <mpu_reset_fifo+0x200>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	7919      	ldrb	r1, [r3, #4]
 8005d82:	1dfb      	adds	r3, r7, #7
 8005d84:	2201      	movs	r2, #1
 8005d86:	f7ff fb52 	bl	800542e <MPU_Write_Len>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d002      	beq.n	8005d96 <mpu_reset_fifo+0xa6>
            return -1;
 8005d90:	f04f 33ff 	mov.w	r3, #4294967295
 8005d94:	e0a8      	b.n	8005ee8 <mpu_reset_fifo+0x1f8>
        delay_ms(50);
 8005d96:	2032      	movs	r0, #50	; 0x32
 8005d98:	f7fc f924 	bl	8001fe4 <HAL_msDelay>
        data = BIT_DMP_EN | BIT_FIFO_EN;
 8005d9c:	23c0      	movs	r3, #192	; 0xc0
 8005d9e:	71fb      	strb	r3, [r7, #7]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 8005da0:	4b53      	ldr	r3, [pc, #332]	; (8005ef0 <mpu_reset_fifo+0x200>)
 8005da2:	7a9b      	ldrb	r3, [r3, #10]
 8005da4:	f003 0301 	and.w	r3, r3, #1
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d004      	beq.n	8005db6 <mpu_reset_fifo+0xc6>
            data |= BIT_AUX_IF_EN;
 8005dac:	79fb      	ldrb	r3, [r7, #7]
 8005dae:	f043 0320 	orr.w	r3, r3, #32
 8005db2:	b2db      	uxtb	r3, r3
 8005db4:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8005db6:	4b4e      	ldr	r3, [pc, #312]	; (8005ef0 <mpu_reset_fifo+0x200>)
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	7818      	ldrb	r0, [r3, #0]
 8005dbc:	4b4c      	ldr	r3, [pc, #304]	; (8005ef0 <mpu_reset_fifo+0x200>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	7919      	ldrb	r1, [r3, #4]
 8005dc2:	1dfb      	adds	r3, r7, #7
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	f7ff fb32 	bl	800542e <MPU_Write_Len>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d002      	beq.n	8005dd6 <mpu_reset_fifo+0xe6>
            return -1;
 8005dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8005dd4:	e088      	b.n	8005ee8 <mpu_reset_fifo+0x1f8>
        if (st.chip_cfg.int_enable)
 8005dd6:	4b46      	ldr	r3, [pc, #280]	; (8005ef0 <mpu_reset_fifo+0x200>)
 8005dd8:	7c5b      	ldrb	r3, [r3, #17]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d002      	beq.n	8005de4 <mpu_reset_fifo+0xf4>
            data = BIT_DMP_INT_EN;
 8005dde:	2302      	movs	r3, #2
 8005de0:	71fb      	strb	r3, [r7, #7]
 8005de2:	e001      	b.n	8005de8 <mpu_reset_fifo+0xf8>
        else
            data = 0;
 8005de4:	2300      	movs	r3, #0
 8005de6:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8005de8:	4b41      	ldr	r3, [pc, #260]	; (8005ef0 <mpu_reset_fifo+0x200>)
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	7818      	ldrb	r0, [r3, #0]
 8005dee:	4b40      	ldr	r3, [pc, #256]	; (8005ef0 <mpu_reset_fifo+0x200>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	7bd9      	ldrb	r1, [r3, #15]
 8005df4:	1dfb      	adds	r3, r7, #7
 8005df6:	2201      	movs	r2, #1
 8005df8:	f7ff fb19 	bl	800542e <MPU_Write_Len>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d002      	beq.n	8005e08 <mpu_reset_fifo+0x118>
            return -1;
 8005e02:	f04f 33ff 	mov.w	r3, #4294967295
 8005e06:	e06f      	b.n	8005ee8 <mpu_reset_fifo+0x1f8>
        data = 0;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 8005e0c:	4b38      	ldr	r3, [pc, #224]	; (8005ef0 <mpu_reset_fifo+0x200>)
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	7818      	ldrb	r0, [r3, #0]
 8005e12:	4b37      	ldr	r3, [pc, #220]	; (8005ef0 <mpu_reset_fifo+0x200>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	7959      	ldrb	r1, [r3, #5]
 8005e18:	1dfb      	adds	r3, r7, #7
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f7ff fb07 	bl	800542e <MPU_Write_Len>
 8005e20:	4603      	mov	r3, r0
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d05f      	beq.n	8005ee6 <mpu_reset_fifo+0x1f6>
            return -1;
 8005e26:	f04f 33ff 	mov.w	r3, #4294967295
 8005e2a:	e05d      	b.n	8005ee8 <mpu_reset_fifo+0x1f8>
    } else {
        data = BIT_FIFO_RST;
 8005e2c:	2304      	movs	r3, #4
 8005e2e:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8005e30:	4b2f      	ldr	r3, [pc, #188]	; (8005ef0 <mpu_reset_fifo+0x200>)
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	7818      	ldrb	r0, [r3, #0]
 8005e36:	4b2e      	ldr	r3, [pc, #184]	; (8005ef0 <mpu_reset_fifo+0x200>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	7919      	ldrb	r1, [r3, #4]
 8005e3c:	1dfb      	adds	r3, r7, #7
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f7ff faf5 	bl	800542e <MPU_Write_Len>
 8005e44:	4603      	mov	r3, r0
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d002      	beq.n	8005e50 <mpu_reset_fifo+0x160>
            return -1;
 8005e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8005e4e:	e04b      	b.n	8005ee8 <mpu_reset_fifo+0x1f8>
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
 8005e50:	4b27      	ldr	r3, [pc, #156]	; (8005ef0 <mpu_reset_fifo+0x200>)
 8005e52:	7c9b      	ldrb	r3, [r3, #18]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d105      	bne.n	8005e64 <mpu_reset_fifo+0x174>
 8005e58:	4b25      	ldr	r3, [pc, #148]	; (8005ef0 <mpu_reset_fifo+0x200>)
 8005e5a:	7a9b      	ldrb	r3, [r3, #10]
 8005e5c:	f003 0301 	and.w	r3, r3, #1
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d102      	bne.n	8005e6a <mpu_reset_fifo+0x17a>
            data = BIT_FIFO_EN;
 8005e64:	2340      	movs	r3, #64	; 0x40
 8005e66:	71fb      	strb	r3, [r7, #7]
 8005e68:	e001      	b.n	8005e6e <mpu_reset_fifo+0x17e>
        else
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
 8005e6a:	2360      	movs	r3, #96	; 0x60
 8005e6c:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8005e6e:	4b20      	ldr	r3, [pc, #128]	; (8005ef0 <mpu_reset_fifo+0x200>)
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	7818      	ldrb	r0, [r3, #0]
 8005e74:	4b1e      	ldr	r3, [pc, #120]	; (8005ef0 <mpu_reset_fifo+0x200>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	7919      	ldrb	r1, [r3, #4]
 8005e7a:	1dfb      	adds	r3, r7, #7
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	f7ff fad6 	bl	800542e <MPU_Write_Len>
 8005e82:	4603      	mov	r3, r0
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d002      	beq.n	8005e8e <mpu_reset_fifo+0x19e>
            return -1;
 8005e88:	f04f 33ff 	mov.w	r3, #4294967295
 8005e8c:	e02c      	b.n	8005ee8 <mpu_reset_fifo+0x1f8>
        delay_ms(50);
 8005e8e:	2032      	movs	r0, #50	; 0x32
 8005e90:	f7fc f8a8 	bl	8001fe4 <HAL_msDelay>
        if (st.chip_cfg.int_enable)
 8005e94:	4b16      	ldr	r3, [pc, #88]	; (8005ef0 <mpu_reset_fifo+0x200>)
 8005e96:	7c5b      	ldrb	r3, [r3, #17]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d002      	beq.n	8005ea2 <mpu_reset_fifo+0x1b2>
            data = BIT_DATA_RDY_EN;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	71fb      	strb	r3, [r7, #7]
 8005ea0:	e001      	b.n	8005ea6 <mpu_reset_fifo+0x1b6>
        else
            data = 0;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8005ea6:	4b12      	ldr	r3, [pc, #72]	; (8005ef0 <mpu_reset_fifo+0x200>)
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	7818      	ldrb	r0, [r3, #0]
 8005eac:	4b10      	ldr	r3, [pc, #64]	; (8005ef0 <mpu_reset_fifo+0x200>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	7bd9      	ldrb	r1, [r3, #15]
 8005eb2:	1dfb      	adds	r3, r7, #7
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	f7ff faba 	bl	800542e <MPU_Write_Len>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d002      	beq.n	8005ec6 <mpu_reset_fifo+0x1d6>
            return -1;
 8005ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8005ec4:	e010      	b.n	8005ee8 <mpu_reset_fifo+0x1f8>
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
 8005ec6:	4b0a      	ldr	r3, [pc, #40]	; (8005ef0 <mpu_reset_fifo+0x200>)
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	7818      	ldrb	r0, [r3, #0]
 8005ecc:	4b08      	ldr	r3, [pc, #32]	; (8005ef0 <mpu_reset_fifo+0x200>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	7959      	ldrb	r1, [r3, #5]
 8005ed2:	4b08      	ldr	r3, [pc, #32]	; (8005ef4 <mpu_reset_fifo+0x204>)
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	f7ff faaa 	bl	800542e <MPU_Write_Len>
 8005eda:	4603      	mov	r3, r0
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d002      	beq.n	8005ee6 <mpu_reset_fifo+0x1f6>
            return -1;
 8005ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8005ee4:	e000      	b.n	8005ee8 <mpu_reset_fifo+0x1f8>
    }
    return 0;
 8005ee6:	2300      	movs	r3, #0
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3708      	adds	r7, #8
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}
 8005ef0:	2000000c 	.word	0x2000000c
 8005ef4:	2000001c 	.word	0x2000001c

08005ef8 <mpu_get_gyro_fsr>:
 *  @brief      Get the gyro full-scale range.
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_gyro_fsr(unsigned short *fsr)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b083      	sub	sp, #12
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.gyro_fsr) {
 8005f00:	4b16      	ldr	r3, [pc, #88]	; (8005f5c <mpu_get_gyro_fsr+0x64>)
 8005f02:	7a1b      	ldrb	r3, [r3, #8]
 8005f04:	2b03      	cmp	r3, #3
 8005f06:	d81e      	bhi.n	8005f46 <mpu_get_gyro_fsr+0x4e>
 8005f08:	a201      	add	r2, pc, #4	; (adr r2, 8005f10 <mpu_get_gyro_fsr+0x18>)
 8005f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f0e:	bf00      	nop
 8005f10:	08005f21 	.word	0x08005f21
 8005f14:	08005f29 	.word	0x08005f29
 8005f18:	08005f33 	.word	0x08005f33
 8005f1c:	08005f3d 	.word	0x08005f3d
    case INV_FSR_250DPS:
        fsr[0] = 250;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	22fa      	movs	r2, #250	; 0xfa
 8005f24:	801a      	strh	r2, [r3, #0]
        break;
 8005f26:	e012      	b.n	8005f4e <mpu_get_gyro_fsr+0x56>
    case INV_FSR_500DPS:
        fsr[0] = 500;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005f2e:	801a      	strh	r2, [r3, #0]
        break;
 8005f30:	e00d      	b.n	8005f4e <mpu_get_gyro_fsr+0x56>
    case INV_FSR_1000DPS:
        fsr[0] = 1000;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005f38:	801a      	strh	r2, [r3, #0]
        break;
 8005f3a:	e008      	b.n	8005f4e <mpu_get_gyro_fsr+0x56>
    case INV_FSR_2000DPS:
        fsr[0] = 2000;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005f42:	801a      	strh	r2, [r3, #0]
        break;
 8005f44:	e003      	b.n	8005f4e <mpu_get_gyro_fsr+0x56>
    default:
        fsr[0] = 0;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	801a      	strh	r2, [r3, #0]
        break;
 8005f4c:	bf00      	nop
    }
    return 0;
 8005f4e:	2300      	movs	r3, #0
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	370c      	adds	r7, #12
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bc80      	pop	{r7}
 8005f58:	4770      	bx	lr
 8005f5a:	bf00      	nop
 8005f5c:	2000000c 	.word	0x2000000c

08005f60 <mpu_set_gyro_fsr>:
 *  @brief      Set the gyro full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_gyro_fsr(unsigned short fsr)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b084      	sub	sp, #16
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	4603      	mov	r3, r0
 8005f68:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8005f6a:	4b26      	ldr	r3, [pc, #152]	; (8006004 <mpu_set_gyro_fsr+0xa4>)
 8005f6c:	7a9b      	ldrb	r3, [r3, #10]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d102      	bne.n	8005f78 <mpu_set_gyro_fsr+0x18>
        return -1;
 8005f72:	f04f 33ff 	mov.w	r3, #4294967295
 8005f76:	e041      	b.n	8005ffc <mpu_set_gyro_fsr+0x9c>

    switch (fsr) {
 8005f78:	88fb      	ldrh	r3, [r7, #6]
 8005f7a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005f7e:	d017      	beq.n	8005fb0 <mpu_set_gyro_fsr+0x50>
 8005f80:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005f84:	dc17      	bgt.n	8005fb6 <mpu_set_gyro_fsr+0x56>
 8005f86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f8a:	d00e      	beq.n	8005faa <mpu_set_gyro_fsr+0x4a>
 8005f8c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f90:	dc11      	bgt.n	8005fb6 <mpu_set_gyro_fsr+0x56>
 8005f92:	2bfa      	cmp	r3, #250	; 0xfa
 8005f94:	d003      	beq.n	8005f9e <mpu_set_gyro_fsr+0x3e>
 8005f96:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005f9a:	d003      	beq.n	8005fa4 <mpu_set_gyro_fsr+0x44>
 8005f9c:	e00b      	b.n	8005fb6 <mpu_set_gyro_fsr+0x56>
    case 250:
        data = INV_FSR_250DPS << 3;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	73fb      	strb	r3, [r7, #15]
        break;
 8005fa2:	e00b      	b.n	8005fbc <mpu_set_gyro_fsr+0x5c>
    case 500:
        data = INV_FSR_500DPS << 3;
 8005fa4:	2308      	movs	r3, #8
 8005fa6:	73fb      	strb	r3, [r7, #15]
        break;
 8005fa8:	e008      	b.n	8005fbc <mpu_set_gyro_fsr+0x5c>
    case 1000:
        data = INV_FSR_1000DPS << 3;
 8005faa:	2310      	movs	r3, #16
 8005fac:	73fb      	strb	r3, [r7, #15]
        break;
 8005fae:	e005      	b.n	8005fbc <mpu_set_gyro_fsr+0x5c>
    case 2000:
        data = INV_FSR_2000DPS << 3;
 8005fb0:	2318      	movs	r3, #24
 8005fb2:	73fb      	strb	r3, [r7, #15]
        break;
 8005fb4:	e002      	b.n	8005fbc <mpu_set_gyro_fsr+0x5c>
    default:
        return -1;
 8005fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8005fba:	e01f      	b.n	8005ffc <mpu_set_gyro_fsr+0x9c>
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
 8005fbc:	4b11      	ldr	r3, [pc, #68]	; (8006004 <mpu_set_gyro_fsr+0xa4>)
 8005fbe:	7a1a      	ldrb	r2, [r3, #8]
 8005fc0:	7bfb      	ldrb	r3, [r7, #15]
 8005fc2:	08db      	lsrs	r3, r3, #3
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d101      	bne.n	8005fce <mpu_set_gyro_fsr+0x6e>
        return 0;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	e016      	b.n	8005ffc <mpu_set_gyro_fsr+0x9c>
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
 8005fce:	4b0d      	ldr	r3, [pc, #52]	; (8006004 <mpu_set_gyro_fsr+0xa4>)
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	7818      	ldrb	r0, [r3, #0]
 8005fd4:	4b0b      	ldr	r3, [pc, #44]	; (8006004 <mpu_set_gyro_fsr+0xa4>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	7999      	ldrb	r1, [r3, #6]
 8005fda:	f107 030f 	add.w	r3, r7, #15
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f7ff fa25 	bl	800542e <MPU_Write_Len>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d002      	beq.n	8005ff0 <mpu_set_gyro_fsr+0x90>
        return -1;
 8005fea:	f04f 33ff 	mov.w	r3, #4294967295
 8005fee:	e005      	b.n	8005ffc <mpu_set_gyro_fsr+0x9c>
    st.chip_cfg.gyro_fsr = data >> 3;
 8005ff0:	7bfb      	ldrb	r3, [r7, #15]
 8005ff2:	08db      	lsrs	r3, r3, #3
 8005ff4:	b2da      	uxtb	r2, r3
 8005ff6:	4b03      	ldr	r3, [pc, #12]	; (8006004 <mpu_set_gyro_fsr+0xa4>)
 8005ff8:	721a      	strb	r2, [r3, #8]
    return 0;
 8005ffa:	2300      	movs	r3, #0
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3710      	adds	r7, #16
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}
 8006004:	2000000c 	.word	0x2000000c

08006008 <mpu_get_accel_fsr>:
 *  @brief      Get the accel full-scale range.
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_accel_fsr(unsigned char *fsr)
{
 8006008:	b480      	push	{r7}
 800600a:	b083      	sub	sp, #12
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.accel_fsr) {
 8006010:	4b19      	ldr	r3, [pc, #100]	; (8006078 <mpu_get_accel_fsr+0x70>)
 8006012:	7a5b      	ldrb	r3, [r3, #9]
 8006014:	2b03      	cmp	r3, #3
 8006016:	d81b      	bhi.n	8006050 <mpu_get_accel_fsr+0x48>
 8006018:	a201      	add	r2, pc, #4	; (adr r2, 8006020 <mpu_get_accel_fsr+0x18>)
 800601a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800601e:	bf00      	nop
 8006020:	08006031 	.word	0x08006031
 8006024:	08006039 	.word	0x08006039
 8006028:	08006041 	.word	0x08006041
 800602c:	08006049 	.word	0x08006049
    case INV_FSR_2G:
        fsr[0] = 2;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2202      	movs	r2, #2
 8006034:	701a      	strb	r2, [r3, #0]
        break;
 8006036:	e00e      	b.n	8006056 <mpu_get_accel_fsr+0x4e>
    case INV_FSR_4G:
        fsr[0] = 4;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2204      	movs	r2, #4
 800603c:	701a      	strb	r2, [r3, #0]
        break;
 800603e:	e00a      	b.n	8006056 <mpu_get_accel_fsr+0x4e>
    case INV_FSR_8G:
        fsr[0] = 8;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2208      	movs	r2, #8
 8006044:	701a      	strb	r2, [r3, #0]
        break;
 8006046:	e006      	b.n	8006056 <mpu_get_accel_fsr+0x4e>
    case INV_FSR_16G:
        fsr[0] = 16;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2210      	movs	r2, #16
 800604c:	701a      	strb	r2, [r3, #0]
        break;
 800604e:	e002      	b.n	8006056 <mpu_get_accel_fsr+0x4e>
    default:
        return -1;
 8006050:	f04f 33ff 	mov.w	r3, #4294967295
 8006054:	e00a      	b.n	800606c <mpu_get_accel_fsr+0x64>
    }
    if (st.chip_cfg.accel_half)
 8006056:	4b08      	ldr	r3, [pc, #32]	; (8006078 <mpu_get_accel_fsr+0x70>)
 8006058:	7cdb      	ldrb	r3, [r3, #19]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d005      	beq.n	800606a <mpu_get_accel_fsr+0x62>
        fsr[0] <<= 1;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	005b      	lsls	r3, r3, #1
 8006064:	b2da      	uxtb	r2, r3
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	701a      	strb	r2, [r3, #0]
    return 0;
 800606a:	2300      	movs	r3, #0
}
 800606c:	4618      	mov	r0, r3
 800606e:	370c      	adds	r7, #12
 8006070:	46bd      	mov	sp, r7
 8006072:	bc80      	pop	{r7}
 8006074:	4770      	bx	lr
 8006076:	bf00      	nop
 8006078:	2000000c 	.word	0x2000000c

0800607c <mpu_set_accel_fsr>:
 *  @brief      Set the accel full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_accel_fsr(unsigned char fsr)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b084      	sub	sp, #16
 8006080:	af00      	add	r7, sp, #0
 8006082:	4603      	mov	r3, r0
 8006084:	71fb      	strb	r3, [r7, #7]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8006086:	4b30      	ldr	r3, [pc, #192]	; (8006148 <mpu_set_accel_fsr+0xcc>)
 8006088:	7a9b      	ldrb	r3, [r3, #10]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d102      	bne.n	8006094 <mpu_set_accel_fsr+0x18>
        return -1;
 800608e:	f04f 33ff 	mov.w	r3, #4294967295
 8006092:	e054      	b.n	800613e <mpu_set_accel_fsr+0xc2>

    switch (fsr) {
 8006094:	79fb      	ldrb	r3, [r7, #7]
 8006096:	3b02      	subs	r3, #2
 8006098:	2b0e      	cmp	r3, #14
 800609a:	d82d      	bhi.n	80060f8 <mpu_set_accel_fsr+0x7c>
 800609c:	a201      	add	r2, pc, #4	; (adr r2, 80060a4 <mpu_set_accel_fsr+0x28>)
 800609e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060a2:	bf00      	nop
 80060a4:	080060e1 	.word	0x080060e1
 80060a8:	080060f9 	.word	0x080060f9
 80060ac:	080060e7 	.word	0x080060e7
 80060b0:	080060f9 	.word	0x080060f9
 80060b4:	080060f9 	.word	0x080060f9
 80060b8:	080060f9 	.word	0x080060f9
 80060bc:	080060ed 	.word	0x080060ed
 80060c0:	080060f9 	.word	0x080060f9
 80060c4:	080060f9 	.word	0x080060f9
 80060c8:	080060f9 	.word	0x080060f9
 80060cc:	080060f9 	.word	0x080060f9
 80060d0:	080060f9 	.word	0x080060f9
 80060d4:	080060f9 	.word	0x080060f9
 80060d8:	080060f9 	.word	0x080060f9
 80060dc:	080060f3 	.word	0x080060f3
    case 2:
        data = INV_FSR_2G << 3;
 80060e0:	2300      	movs	r3, #0
 80060e2:	73fb      	strb	r3, [r7, #15]
        break;
 80060e4:	e00b      	b.n	80060fe <mpu_set_accel_fsr+0x82>
    case 4:
        data = INV_FSR_4G << 3;
 80060e6:	2308      	movs	r3, #8
 80060e8:	73fb      	strb	r3, [r7, #15]
        break;
 80060ea:	e008      	b.n	80060fe <mpu_set_accel_fsr+0x82>
    case 8:
        data = INV_FSR_8G << 3;
 80060ec:	2310      	movs	r3, #16
 80060ee:	73fb      	strb	r3, [r7, #15]
        break;
 80060f0:	e005      	b.n	80060fe <mpu_set_accel_fsr+0x82>
    case 16:
        data = INV_FSR_16G << 3;
 80060f2:	2318      	movs	r3, #24
 80060f4:	73fb      	strb	r3, [r7, #15]
        break;
 80060f6:	e002      	b.n	80060fe <mpu_set_accel_fsr+0x82>
    default:
        return -1;
 80060f8:	f04f 33ff 	mov.w	r3, #4294967295
 80060fc:	e01f      	b.n	800613e <mpu_set_accel_fsr+0xc2>
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
 80060fe:	4b12      	ldr	r3, [pc, #72]	; (8006148 <mpu_set_accel_fsr+0xcc>)
 8006100:	7a5a      	ldrb	r2, [r3, #9]
 8006102:	7bfb      	ldrb	r3, [r7, #15]
 8006104:	08db      	lsrs	r3, r3, #3
 8006106:	b2db      	uxtb	r3, r3
 8006108:	429a      	cmp	r2, r3
 800610a:	d101      	bne.n	8006110 <mpu_set_accel_fsr+0x94>
        return 0;
 800610c:	2300      	movs	r3, #0
 800610e:	e016      	b.n	800613e <mpu_set_accel_fsr+0xc2>
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
 8006110:	4b0d      	ldr	r3, [pc, #52]	; (8006148 <mpu_set_accel_fsr+0xcc>)
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	7818      	ldrb	r0, [r3, #0]
 8006116:	4b0c      	ldr	r3, [pc, #48]	; (8006148 <mpu_set_accel_fsr+0xcc>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	79d9      	ldrb	r1, [r3, #7]
 800611c:	f107 030f 	add.w	r3, r7, #15
 8006120:	2201      	movs	r2, #1
 8006122:	f7ff f984 	bl	800542e <MPU_Write_Len>
 8006126:	4603      	mov	r3, r0
 8006128:	2b00      	cmp	r3, #0
 800612a:	d002      	beq.n	8006132 <mpu_set_accel_fsr+0xb6>
        return -1;
 800612c:	f04f 33ff 	mov.w	r3, #4294967295
 8006130:	e005      	b.n	800613e <mpu_set_accel_fsr+0xc2>
    st.chip_cfg.accel_fsr = data >> 3;
 8006132:	7bfb      	ldrb	r3, [r7, #15]
 8006134:	08db      	lsrs	r3, r3, #3
 8006136:	b2da      	uxtb	r2, r3
 8006138:	4b03      	ldr	r3, [pc, #12]	; (8006148 <mpu_set_accel_fsr+0xcc>)
 800613a:	725a      	strb	r2, [r3, #9]
    return 0;
 800613c:	2300      	movs	r3, #0
}
 800613e:	4618      	mov	r0, r3
 8006140:	3710      	adds	r7, #16
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}
 8006146:	bf00      	nop
 8006148:	2000000c 	.word	0x2000000c

0800614c <mpu_get_lpf>:
 *  @brief      Get the current DLPF setting.
 *  @param[out] lpf Current LPF setting.
 *  0 if successful.
 */
int mpu_get_lpf(unsigned short *lpf)
{
 800614c:	b480      	push	{r7}
 800614e:	b083      	sub	sp, #12
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.lpf) {
 8006154:	4b1a      	ldr	r3, [pc, #104]	; (80061c0 <mpu_get_lpf+0x74>)
 8006156:	7adb      	ldrb	r3, [r3, #11]
 8006158:	3b01      	subs	r3, #1
 800615a:	2b05      	cmp	r3, #5
 800615c:	d826      	bhi.n	80061ac <mpu_get_lpf+0x60>
 800615e:	a201      	add	r2, pc, #4	; (adr r2, 8006164 <mpu_get_lpf+0x18>)
 8006160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006164:	0800617d 	.word	0x0800617d
 8006168:	08006185 	.word	0x08006185
 800616c:	0800618d 	.word	0x0800618d
 8006170:	08006195 	.word	0x08006195
 8006174:	0800619d 	.word	0x0800619d
 8006178:	080061a5 	.word	0x080061a5
    case INV_FILTER_188HZ:
        lpf[0] = 188;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	22bc      	movs	r2, #188	; 0xbc
 8006180:	801a      	strh	r2, [r3, #0]
        break;
 8006182:	e017      	b.n	80061b4 <mpu_get_lpf+0x68>
    case INV_FILTER_98HZ:
        lpf[0] = 98;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2262      	movs	r2, #98	; 0x62
 8006188:	801a      	strh	r2, [r3, #0]
        break;
 800618a:	e013      	b.n	80061b4 <mpu_get_lpf+0x68>
    case INV_FILTER_42HZ:
        lpf[0] = 42;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	222a      	movs	r2, #42	; 0x2a
 8006190:	801a      	strh	r2, [r3, #0]
        break;
 8006192:	e00f      	b.n	80061b4 <mpu_get_lpf+0x68>
    case INV_FILTER_20HZ:
        lpf[0] = 20;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2214      	movs	r2, #20
 8006198:	801a      	strh	r2, [r3, #0]
        break;
 800619a:	e00b      	b.n	80061b4 <mpu_get_lpf+0x68>
    case INV_FILTER_10HZ:
        lpf[0] = 10;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	220a      	movs	r2, #10
 80061a0:	801a      	strh	r2, [r3, #0]
        break;
 80061a2:	e007      	b.n	80061b4 <mpu_get_lpf+0x68>
    case INV_FILTER_5HZ:
        lpf[0] = 5;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2205      	movs	r2, #5
 80061a8:	801a      	strh	r2, [r3, #0]
        break;
 80061aa:	e003      	b.n	80061b4 <mpu_get_lpf+0x68>
    case INV_FILTER_256HZ_NOLPF2:
    case INV_FILTER_2100HZ_NOLPF:
    default:
        lpf[0] = 0;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2200      	movs	r2, #0
 80061b0:	801a      	strh	r2, [r3, #0]
        break;
 80061b2:	bf00      	nop
    }
    return 0;
 80061b4:	2300      	movs	r3, #0
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	370c      	adds	r7, #12
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bc80      	pop	{r7}
 80061be:	4770      	bx	lr
 80061c0:	2000000c 	.word	0x2000000c

080061c4 <mpu_set_lpf>:
 *  The following LPF settings are supported: 188, 98, 42, 20, 10, 5.
 *  @param[in]  lpf Desired LPF setting.
 *  @return     0 if successful.
 */
int mpu_set_lpf(unsigned short lpf)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	4603      	mov	r3, r0
 80061cc:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 80061ce:	4b23      	ldr	r3, [pc, #140]	; (800625c <mpu_set_lpf+0x98>)
 80061d0:	7a9b      	ldrb	r3, [r3, #10]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d102      	bne.n	80061dc <mpu_set_lpf+0x18>
        return -1;
 80061d6:	f04f 33ff 	mov.w	r3, #4294967295
 80061da:	e03b      	b.n	8006254 <mpu_set_lpf+0x90>

    if (lpf >= 188)
 80061dc:	88fb      	ldrh	r3, [r7, #6]
 80061de:	2bbb      	cmp	r3, #187	; 0xbb
 80061e0:	d902      	bls.n	80061e8 <mpu_set_lpf+0x24>
        data = INV_FILTER_188HZ;
 80061e2:	2301      	movs	r3, #1
 80061e4:	73fb      	strb	r3, [r7, #15]
 80061e6:	e019      	b.n	800621c <mpu_set_lpf+0x58>
    else if (lpf >= 98)
 80061e8:	88fb      	ldrh	r3, [r7, #6]
 80061ea:	2b61      	cmp	r3, #97	; 0x61
 80061ec:	d902      	bls.n	80061f4 <mpu_set_lpf+0x30>
        data = INV_FILTER_98HZ;
 80061ee:	2302      	movs	r3, #2
 80061f0:	73fb      	strb	r3, [r7, #15]
 80061f2:	e013      	b.n	800621c <mpu_set_lpf+0x58>
    else if (lpf >= 42)
 80061f4:	88fb      	ldrh	r3, [r7, #6]
 80061f6:	2b29      	cmp	r3, #41	; 0x29
 80061f8:	d902      	bls.n	8006200 <mpu_set_lpf+0x3c>
        data = INV_FILTER_42HZ;
 80061fa:	2303      	movs	r3, #3
 80061fc:	73fb      	strb	r3, [r7, #15]
 80061fe:	e00d      	b.n	800621c <mpu_set_lpf+0x58>
    else if (lpf >= 20)
 8006200:	88fb      	ldrh	r3, [r7, #6]
 8006202:	2b13      	cmp	r3, #19
 8006204:	d902      	bls.n	800620c <mpu_set_lpf+0x48>
        data = INV_FILTER_20HZ;
 8006206:	2304      	movs	r3, #4
 8006208:	73fb      	strb	r3, [r7, #15]
 800620a:	e007      	b.n	800621c <mpu_set_lpf+0x58>
    else if (lpf >= 10)
 800620c:	88fb      	ldrh	r3, [r7, #6]
 800620e:	2b09      	cmp	r3, #9
 8006210:	d902      	bls.n	8006218 <mpu_set_lpf+0x54>
        data = INV_FILTER_10HZ;
 8006212:	2305      	movs	r3, #5
 8006214:	73fb      	strb	r3, [r7, #15]
 8006216:	e001      	b.n	800621c <mpu_set_lpf+0x58>
    else
        data = INV_FILTER_5HZ;
 8006218:	2306      	movs	r3, #6
 800621a:	73fb      	strb	r3, [r7, #15]

    if (st.chip_cfg.lpf == data)
 800621c:	4b0f      	ldr	r3, [pc, #60]	; (800625c <mpu_set_lpf+0x98>)
 800621e:	7ada      	ldrb	r2, [r3, #11]
 8006220:	7bfb      	ldrb	r3, [r7, #15]
 8006222:	429a      	cmp	r2, r3
 8006224:	d101      	bne.n	800622a <mpu_set_lpf+0x66>
        return 0;
 8006226:	2300      	movs	r3, #0
 8006228:	e014      	b.n	8006254 <mpu_set_lpf+0x90>
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
 800622a:	4b0c      	ldr	r3, [pc, #48]	; (800625c <mpu_set_lpf+0x98>)
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	7818      	ldrb	r0, [r3, #0]
 8006230:	4b0a      	ldr	r3, [pc, #40]	; (800625c <mpu_set_lpf+0x98>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	7899      	ldrb	r1, [r3, #2]
 8006236:	f107 030f 	add.w	r3, r7, #15
 800623a:	2201      	movs	r2, #1
 800623c:	f7ff f8f7 	bl	800542e <MPU_Write_Len>
 8006240:	4603      	mov	r3, r0
 8006242:	2b00      	cmp	r3, #0
 8006244:	d002      	beq.n	800624c <mpu_set_lpf+0x88>
        return -1;
 8006246:	f04f 33ff 	mov.w	r3, #4294967295
 800624a:	e003      	b.n	8006254 <mpu_set_lpf+0x90>
    st.chip_cfg.lpf = data;
 800624c:	7bfa      	ldrb	r2, [r7, #15]
 800624e:	4b03      	ldr	r3, [pc, #12]	; (800625c <mpu_set_lpf+0x98>)
 8006250:	72da      	strb	r2, [r3, #11]
    return 0;
 8006252:	2300      	movs	r3, #0
}
 8006254:	4618      	mov	r0, r3
 8006256:	3710      	adds	r7, #16
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}
 800625c:	2000000c 	.word	0x2000000c

08006260 <mpu_get_sample_rate>:
 *  @brief      Get sampling rate.
 *  @param[out] rate    Current sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_get_sample_rate(unsigned short *rate)
{
 8006260:	b480      	push	{r7}
 8006262:	b083      	sub	sp, #12
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
    if (st.chip_cfg.dmp_on)
 8006268:	4b08      	ldr	r3, [pc, #32]	; (800628c <mpu_get_sample_rate+0x2c>)
 800626a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800626e:	2b00      	cmp	r3, #0
 8006270:	d002      	beq.n	8006278 <mpu_get_sample_rate+0x18>
        return -1;
 8006272:	f04f 33ff 	mov.w	r3, #4294967295
 8006276:	e004      	b.n	8006282 <mpu_get_sample_rate+0x22>
    else
        rate[0] = st.chip_cfg.sample_rate;
 8006278:	4b04      	ldr	r3, [pc, #16]	; (800628c <mpu_get_sample_rate+0x2c>)
 800627a:	89da      	ldrh	r2, [r3, #14]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	801a      	strh	r2, [r3, #0]
    return 0;
 8006280:	2300      	movs	r3, #0
}
 8006282:	4618      	mov	r0, r3
 8006284:	370c      	adds	r7, #12
 8006286:	46bd      	mov	sp, r7
 8006288:	bc80      	pop	{r7}
 800628a:	4770      	bx	lr
 800628c:	2000000c 	.word	0x2000000c

08006290 <mpu_set_sample_rate>:
 *  Sampling rate must be between 4Hz and 1kHz.
 *  @param[in]  rate    Desired sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_sample_rate(unsigned short rate)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b084      	sub	sp, #16
 8006294:	af00      	add	r7, sp, #0
 8006296:	4603      	mov	r3, r0
 8006298:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 800629a:	4b2f      	ldr	r3, [pc, #188]	; (8006358 <mpu_set_sample_rate+0xc8>)
 800629c:	7a9b      	ldrb	r3, [r3, #10]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d102      	bne.n	80062a8 <mpu_set_sample_rate+0x18>
        return -1;
 80062a2:	f04f 33ff 	mov.w	r3, #4294967295
 80062a6:	e053      	b.n	8006350 <mpu_set_sample_rate+0xc0>

    if (st.chip_cfg.dmp_on)
 80062a8:	4b2b      	ldr	r3, [pc, #172]	; (8006358 <mpu_set_sample_rate+0xc8>)
 80062aa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d002      	beq.n	80062b8 <mpu_set_sample_rate+0x28>
        return -1;
 80062b2:	f04f 33ff 	mov.w	r3, #4294967295
 80062b6:	e04b      	b.n	8006350 <mpu_set_sample_rate+0xc0>
    else {
        if (st.chip_cfg.lp_accel_mode) {
 80062b8:	4b27      	ldr	r3, [pc, #156]	; (8006358 <mpu_set_sample_rate+0xc8>)
 80062ba:	7d1b      	ldrb	r3, [r3, #20]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d00f      	beq.n	80062e0 <mpu_set_sample_rate+0x50>
            if (rate && (rate <= 40)) {
 80062c0:	88fb      	ldrh	r3, [r7, #6]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d009      	beq.n	80062da <mpu_set_sample_rate+0x4a>
 80062c6:	88fb      	ldrh	r3, [r7, #6]
 80062c8:	2b28      	cmp	r3, #40	; 0x28
 80062ca:	d806      	bhi.n	80062da <mpu_set_sample_rate+0x4a>
                /* Just stay in low-power accel mode. */
                mpu_lp_accel_mode(rate);
 80062cc:	88fb      	ldrh	r3, [r7, #6]
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	4618      	mov	r0, r3
 80062d2:	f7ff fc91 	bl	8005bf8 <mpu_lp_accel_mode>
                return 0;
 80062d6:	2300      	movs	r3, #0
 80062d8:	e03a      	b.n	8006350 <mpu_set_sample_rate+0xc0>
            }
            /* Requested rate exceeds the allowed frequencies in LP accel mode,
             * switch back to full-power mode.
             */
            mpu_lp_accel_mode(0);
 80062da:	2000      	movs	r0, #0
 80062dc:	f7ff fc8c 	bl	8005bf8 <mpu_lp_accel_mode>
        }
        if (rate < 4)
 80062e0:	88fb      	ldrh	r3, [r7, #6]
 80062e2:	2b03      	cmp	r3, #3
 80062e4:	d802      	bhi.n	80062ec <mpu_set_sample_rate+0x5c>
            rate = 4;
 80062e6:	2304      	movs	r3, #4
 80062e8:	80fb      	strh	r3, [r7, #6]
 80062ea:	e006      	b.n	80062fa <mpu_set_sample_rate+0x6a>
        else if (rate > 1000)
 80062ec:	88fb      	ldrh	r3, [r7, #6]
 80062ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062f2:	d902      	bls.n	80062fa <mpu_set_sample_rate+0x6a>
            rate = 1000;
 80062f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80062f8:	80fb      	strh	r3, [r7, #6]

        data = 1000 / rate - 1;
 80062fa:	88fb      	ldrh	r3, [r7, #6]
 80062fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006300:	fb92 f3f3 	sdiv	r3, r2, r3
 8006304:	b2db      	uxtb	r3, r3
 8006306:	3b01      	subs	r3, #1
 8006308:	b2db      	uxtb	r3, r3
 800630a:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
 800630c:	4b12      	ldr	r3, [pc, #72]	; (8006358 <mpu_set_sample_rate+0xc8>)
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	7818      	ldrb	r0, [r3, #0]
 8006312:	4b11      	ldr	r3, [pc, #68]	; (8006358 <mpu_set_sample_rate+0xc8>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	7859      	ldrb	r1, [r3, #1]
 8006318:	f107 030f 	add.w	r3, r7, #15
 800631c:	2201      	movs	r2, #1
 800631e:	f7ff f886 	bl	800542e <MPU_Write_Len>
 8006322:	4603      	mov	r3, r0
 8006324:	2b00      	cmp	r3, #0
 8006326:	d002      	beq.n	800632e <mpu_set_sample_rate+0x9e>
            return -1;
 8006328:	f04f 33ff 	mov.w	r3, #4294967295
 800632c:	e010      	b.n	8006350 <mpu_set_sample_rate+0xc0>

        st.chip_cfg.sample_rate = 1000 / (1 + data);
 800632e:	7bfb      	ldrb	r3, [r7, #15]
 8006330:	3301      	adds	r3, #1
 8006332:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006336:	fb92 f3f3 	sdiv	r3, r2, r3
 800633a:	b29a      	uxth	r2, r3
 800633c:	4b06      	ldr	r3, [pc, #24]	; (8006358 <mpu_set_sample_rate+0xc8>)
 800633e:	81da      	strh	r2, [r3, #14]
#ifdef AK89xx_SECONDARY
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
#endif

        /* Automatically set LPF to 1/2 sampling rate. */
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
 8006340:	4b05      	ldr	r3, [pc, #20]	; (8006358 <mpu_set_sample_rate+0xc8>)
 8006342:	89db      	ldrh	r3, [r3, #14]
 8006344:	085b      	lsrs	r3, r3, #1
 8006346:	b29b      	uxth	r3, r3
 8006348:	4618      	mov	r0, r3
 800634a:	f7ff ff3b 	bl	80061c4 <mpu_set_lpf>
        return 0;
 800634e:	2300      	movs	r3, #0
    }
}
 8006350:	4618      	mov	r0, r3
 8006352:	3710      	adds	r7, #16
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}
 8006358:	2000000c 	.word	0x2000000c

0800635c <mpu_get_gyro_sens>:
 *  @brief      Get gyro sensitivity scale factor.
 *  @param[out] sens    Conversion from hardware units to dps.
 *  @return     0 if successful.
 */
int mpu_get_gyro_sens(float *sens)
{
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.gyro_fsr) {
 8006364:	4b14      	ldr	r3, [pc, #80]	; (80063b8 <mpu_get_gyro_sens+0x5c>)
 8006366:	7a1b      	ldrb	r3, [r3, #8]
 8006368:	2b03      	cmp	r3, #3
 800636a:	d81b      	bhi.n	80063a4 <mpu_get_gyro_sens+0x48>
 800636c:	a201      	add	r2, pc, #4	; (adr r2, 8006374 <mpu_get_gyro_sens+0x18>)
 800636e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006372:	bf00      	nop
 8006374:	08006385 	.word	0x08006385
 8006378:	0800638d 	.word	0x0800638d
 800637c:	08006395 	.word	0x08006395
 8006380:	0800639d 	.word	0x0800639d
    case INV_FSR_250DPS:
        sens[0] = 131.f;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	4a0d      	ldr	r2, [pc, #52]	; (80063bc <mpu_get_gyro_sens+0x60>)
 8006388:	601a      	str	r2, [r3, #0]
        break;
 800638a:	e00e      	b.n	80063aa <mpu_get_gyro_sens+0x4e>
    case INV_FSR_500DPS:
        sens[0] = 65.5f;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	4a0c      	ldr	r2, [pc, #48]	; (80063c0 <mpu_get_gyro_sens+0x64>)
 8006390:	601a      	str	r2, [r3, #0]
        break;
 8006392:	e00a      	b.n	80063aa <mpu_get_gyro_sens+0x4e>
    case INV_FSR_1000DPS:
        sens[0] = 32.8f;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	4a0b      	ldr	r2, [pc, #44]	; (80063c4 <mpu_get_gyro_sens+0x68>)
 8006398:	601a      	str	r2, [r3, #0]
        break;
 800639a:	e006      	b.n	80063aa <mpu_get_gyro_sens+0x4e>
    case INV_FSR_2000DPS:
        sens[0] = 16.4f;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	4a0a      	ldr	r2, [pc, #40]	; (80063c8 <mpu_get_gyro_sens+0x6c>)
 80063a0:	601a      	str	r2, [r3, #0]
        break;
 80063a2:	e002      	b.n	80063aa <mpu_get_gyro_sens+0x4e>
    default:
        return -1;
 80063a4:	f04f 33ff 	mov.w	r3, #4294967295
 80063a8:	e000      	b.n	80063ac <mpu_get_gyro_sens+0x50>
    }
    return 0;
 80063aa:	2300      	movs	r3, #0
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	370c      	adds	r7, #12
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bc80      	pop	{r7}
 80063b4:	4770      	bx	lr
 80063b6:	bf00      	nop
 80063b8:	2000000c 	.word	0x2000000c
 80063bc:	43030000 	.word	0x43030000
 80063c0:	42830000 	.word	0x42830000
 80063c4:	42033333 	.word	0x42033333
 80063c8:	41833333 	.word	0x41833333

080063cc <mpu_get_accel_sens>:
 *  @brief      Get accel sensitivity scale factor.
 *  @param[out] sens    Conversion from hardware units to g's.
 *  @return     0 if successful.
 */
int mpu_get_accel_sens(unsigned short *sens)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b083      	sub	sp, #12
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.accel_fsr) {
 80063d4:	4b1b      	ldr	r3, [pc, #108]	; (8006444 <mpu_get_accel_sens+0x78>)
 80063d6:	7a5b      	ldrb	r3, [r3, #9]
 80063d8:	2b03      	cmp	r3, #3
 80063da:	d81f      	bhi.n	800641c <mpu_get_accel_sens+0x50>
 80063dc:	a201      	add	r2, pc, #4	; (adr r2, 80063e4 <mpu_get_accel_sens+0x18>)
 80063de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063e2:	bf00      	nop
 80063e4:	080063f5 	.word	0x080063f5
 80063e8:	080063ff 	.word	0x080063ff
 80063ec:	08006409 	.word	0x08006409
 80063f0:	08006413 	.word	0x08006413
    case INV_FSR_2G:
        sens[0] = 16384;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80063fa:	801a      	strh	r2, [r3, #0]
        break;
 80063fc:	e011      	b.n	8006422 <mpu_get_accel_sens+0x56>
    case INV_FSR_4G:
        sens[0] = 8092;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f641 729c 	movw	r2, #8092	; 0x1f9c
 8006404:	801a      	strh	r2, [r3, #0]
        break;
 8006406:	e00c      	b.n	8006422 <mpu_get_accel_sens+0x56>
    case INV_FSR_8G:
        sens[0] = 4096;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800640e:	801a      	strh	r2, [r3, #0]
        break;
 8006410:	e007      	b.n	8006422 <mpu_get_accel_sens+0x56>
    case INV_FSR_16G:
        sens[0] = 2048;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006418:	801a      	strh	r2, [r3, #0]
        break;
 800641a:	e002      	b.n	8006422 <mpu_get_accel_sens+0x56>
    default:
        return -1;
 800641c:	f04f 33ff 	mov.w	r3, #4294967295
 8006420:	e00a      	b.n	8006438 <mpu_get_accel_sens+0x6c>
    }
    if (st.chip_cfg.accel_half)
 8006422:	4b08      	ldr	r3, [pc, #32]	; (8006444 <mpu_get_accel_sens+0x78>)
 8006424:	7cdb      	ldrb	r3, [r3, #19]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d005      	beq.n	8006436 <mpu_get_accel_sens+0x6a>
        sens[0] >>= 1;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	881b      	ldrh	r3, [r3, #0]
 800642e:	085b      	lsrs	r3, r3, #1
 8006430:	b29a      	uxth	r2, r3
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	801a      	strh	r2, [r3, #0]
    return 0;
 8006436:	2300      	movs	r3, #0
}
 8006438:	4618      	mov	r0, r3
 800643a:	370c      	adds	r7, #12
 800643c:	46bd      	mov	sp, r7
 800643e:	bc80      	pop	{r7}
 8006440:	4770      	bx	lr
 8006442:	bf00      	nop
 8006444:	2000000c 	.word	0x2000000c

08006448 <mpu_get_fifo_config>:
 *  \n INV_XYZ_ACCEL
 *  @param[out] sensors Mask of sensors in FIFO.
 *  @return     0 if successful.
 */
int mpu_get_fifo_config(unsigned char *sensors)
{
 8006448:	b480      	push	{r7}
 800644a:	b083      	sub	sp, #12
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
    sensors[0] = st.chip_cfg.fifo_enable;
 8006450:	4b04      	ldr	r3, [pc, #16]	; (8006464 <mpu_get_fifo_config+0x1c>)
 8006452:	7c1a      	ldrb	r2, [r3, #16]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	701a      	strb	r2, [r3, #0]
    return 0;
 8006458:	2300      	movs	r3, #0
}
 800645a:	4618      	mov	r0, r3
 800645c:	370c      	adds	r7, #12
 800645e:	46bd      	mov	sp, r7
 8006460:	bc80      	pop	{r7}
 8006462:	4770      	bx	lr
 8006464:	2000000c 	.word	0x2000000c

08006468 <mpu_configure_fifo>:
 *  \n INV_XYZ_ACCEL
 *  @param[in]  sensors Mask of sensors to push to FIFO.
 *  @return     0 if successful.
 */
int mpu_configure_fifo(unsigned char sensors)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b084      	sub	sp, #16
 800646c:	af00      	add	r7, sp, #0
 800646e:	4603      	mov	r3, r0
 8006470:	71fb      	strb	r3, [r7, #7]
    unsigned char prev;
    int result = 0;
 8006472:	2300      	movs	r3, #0
 8006474:	60fb      	str	r3, [r7, #12]

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;
 8006476:	79fb      	ldrb	r3, [r7, #7]
 8006478:	f023 0301 	bic.w	r3, r3, #1
 800647c:	71fb      	strb	r3, [r7, #7]

    if (st.chip_cfg.dmp_on)
 800647e:	4b22      	ldr	r3, [pc, #136]	; (8006508 <mpu_configure_fifo+0xa0>)
 8006480:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006484:	2b00      	cmp	r3, #0
 8006486:	d001      	beq.n	800648c <mpu_configure_fifo+0x24>
        return 0;
 8006488:	2300      	movs	r3, #0
 800648a:	e038      	b.n	80064fe <mpu_configure_fifo+0x96>
    else {
        if (!(st.chip_cfg.sensors))
 800648c:	4b1e      	ldr	r3, [pc, #120]	; (8006508 <mpu_configure_fifo+0xa0>)
 800648e:	7a9b      	ldrb	r3, [r3, #10]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d102      	bne.n	800649a <mpu_configure_fifo+0x32>
            return -1;
 8006494:	f04f 33ff 	mov.w	r3, #4294967295
 8006498:	e031      	b.n	80064fe <mpu_configure_fifo+0x96>
        prev = st.chip_cfg.fifo_enable;
 800649a:	4b1b      	ldr	r3, [pc, #108]	; (8006508 <mpu_configure_fifo+0xa0>)
 800649c:	7c1b      	ldrb	r3, [r3, #16]
 800649e:	72fb      	strb	r3, [r7, #11]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
 80064a0:	4b19      	ldr	r3, [pc, #100]	; (8006508 <mpu_configure_fifo+0xa0>)
 80064a2:	7a9a      	ldrb	r2, [r3, #10]
 80064a4:	79fb      	ldrb	r3, [r7, #7]
 80064a6:	4013      	ands	r3, r2
 80064a8:	b2da      	uxtb	r2, r3
 80064aa:	4b17      	ldr	r3, [pc, #92]	; (8006508 <mpu_configure_fifo+0xa0>)
 80064ac:	741a      	strb	r2, [r3, #16]
        if (st.chip_cfg.fifo_enable != sensors)
 80064ae:	4b16      	ldr	r3, [pc, #88]	; (8006508 <mpu_configure_fifo+0xa0>)
 80064b0:	7c1b      	ldrb	r3, [r3, #16]
 80064b2:	79fa      	ldrb	r2, [r7, #7]
 80064b4:	429a      	cmp	r2, r3
 80064b6:	d003      	beq.n	80064c0 <mpu_configure_fifo+0x58>
            /* You're not getting what you asked for. Some sensors are
             * asleep.
             */
            result = -1;
 80064b8:	f04f 33ff 	mov.w	r3, #4294967295
 80064bc:	60fb      	str	r3, [r7, #12]
 80064be:	e001      	b.n	80064c4 <mpu_configure_fifo+0x5c>
        else
            result = 0;
 80064c0:	2300      	movs	r3, #0
 80064c2:	60fb      	str	r3, [r7, #12]
        if (sensors || st.chip_cfg.lp_accel_mode)
 80064c4:	79fb      	ldrb	r3, [r7, #7]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d103      	bne.n	80064d2 <mpu_configure_fifo+0x6a>
 80064ca:	4b0f      	ldr	r3, [pc, #60]	; (8006508 <mpu_configure_fifo+0xa0>)
 80064cc:	7d1b      	ldrb	r3, [r3, #20]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d003      	beq.n	80064da <mpu_configure_fifo+0x72>
            set_int_enable(1);
 80064d2:	2001      	movs	r0, #1
 80064d4:	f7ff fa22 	bl	800591c <set_int_enable>
 80064d8:	e002      	b.n	80064e0 <mpu_configure_fifo+0x78>
        else
            set_int_enable(0);
 80064da:	2000      	movs	r0, #0
 80064dc:	f7ff fa1e 	bl	800591c <set_int_enable>
        if (sensors) {
 80064e0:	79fb      	ldrb	r3, [r7, #7]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d00a      	beq.n	80064fc <mpu_configure_fifo+0x94>
            if (mpu_reset_fifo()) {
 80064e6:	f7ff fc03 	bl	8005cf0 <mpu_reset_fifo>
 80064ea:	4603      	mov	r3, r0
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d005      	beq.n	80064fc <mpu_configure_fifo+0x94>
                st.chip_cfg.fifo_enable = prev;
 80064f0:	4a05      	ldr	r2, [pc, #20]	; (8006508 <mpu_configure_fifo+0xa0>)
 80064f2:	7afb      	ldrb	r3, [r7, #11]
 80064f4:	7413      	strb	r3, [r2, #16]
                return -1;
 80064f6:	f04f 33ff 	mov.w	r3, #4294967295
 80064fa:	e000      	b.n	80064fe <mpu_configure_fifo+0x96>
            }
        }
    }

    return result;
 80064fc:	68fb      	ldr	r3, [r7, #12]
}
 80064fe:	4618      	mov	r0, r3
 8006500:	3710      	adds	r7, #16
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}
 8006506:	bf00      	nop
 8006508:	2000000c 	.word	0x2000000c

0800650c <mpu_set_sensors>:
 *  \n INV_XYZ_COMPASS
 *  @param[in]  sensors    Mask of sensors to wake.
 *  @return     0 if successful.
 */
int mpu_set_sensors(unsigned char sensors)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b084      	sub	sp, #16
 8006510:	af00      	add	r7, sp, #0
 8006512:	4603      	mov	r3, r0
 8006514:	71fb      	strb	r3, [r7, #7]
    unsigned char data;
#ifdef AK89xx_SECONDARY
    unsigned char user_ctrl;
#endif

    if (sensors & INV_XYZ_GYRO)
 8006516:	79fb      	ldrb	r3, [r7, #7]
 8006518:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800651c:	2b00      	cmp	r3, #0
 800651e:	d002      	beq.n	8006526 <mpu_set_sensors+0x1a>
        data = INV_CLK_PLL;
 8006520:	2301      	movs	r3, #1
 8006522:	73fb      	strb	r3, [r7, #15]
 8006524:	e007      	b.n	8006536 <mpu_set_sensors+0x2a>
    else if (sensors)
 8006526:	79fb      	ldrb	r3, [r7, #7]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d002      	beq.n	8006532 <mpu_set_sensors+0x26>
        data = 0;
 800652c:	2300      	movs	r3, #0
 800652e:	73fb      	strb	r3, [r7, #15]
 8006530:	e001      	b.n	8006536 <mpu_set_sensors+0x2a>
    else
        data = BIT_SLEEP;
 8006532:	2340      	movs	r3, #64	; 0x40
 8006534:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
 8006536:	4b37      	ldr	r3, [pc, #220]	; (8006614 <mpu_set_sensors+0x108>)
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	7818      	ldrb	r0, [r3, #0]
 800653c:	4b35      	ldr	r3, [pc, #212]	; (8006614 <mpu_set_sensors+0x108>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	7c99      	ldrb	r1, [r3, #18]
 8006542:	f107 030f 	add.w	r3, r7, #15
 8006546:	2201      	movs	r2, #1
 8006548:	f7fe ff71 	bl	800542e <MPU_Write_Len>
 800654c:	4603      	mov	r3, r0
 800654e:	2b00      	cmp	r3, #0
 8006550:	d005      	beq.n	800655e <mpu_set_sensors+0x52>
        st.chip_cfg.sensors = 0;
 8006552:	4b30      	ldr	r3, [pc, #192]	; (8006614 <mpu_set_sensors+0x108>)
 8006554:	2200      	movs	r2, #0
 8006556:	729a      	strb	r2, [r3, #10]
        return -1;
 8006558:	f04f 33ff 	mov.w	r3, #4294967295
 800655c:	e056      	b.n	800660c <mpu_set_sensors+0x100>
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
 800655e:	7bfb      	ldrb	r3, [r7, #15]
 8006560:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006564:	b2da      	uxtb	r2, r3
 8006566:	4b2b      	ldr	r3, [pc, #172]	; (8006614 <mpu_set_sensors+0x108>)
 8006568:	731a      	strb	r2, [r3, #12]

    data = 0;
 800656a:	2300      	movs	r3, #0
 800656c:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_X_GYRO))
 800656e:	79fb      	ldrb	r3, [r7, #7]
 8006570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006574:	2b00      	cmp	r3, #0
 8006576:	d104      	bne.n	8006582 <mpu_set_sensors+0x76>
        data |= BIT_STBY_XG;
 8006578:	7bfb      	ldrb	r3, [r7, #15]
 800657a:	f043 0304 	orr.w	r3, r3, #4
 800657e:	b2db      	uxtb	r3, r3
 8006580:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_Y_GYRO))
 8006582:	79fb      	ldrb	r3, [r7, #7]
 8006584:	f003 0320 	and.w	r3, r3, #32
 8006588:	2b00      	cmp	r3, #0
 800658a:	d104      	bne.n	8006596 <mpu_set_sensors+0x8a>
        data |= BIT_STBY_YG;
 800658c:	7bfb      	ldrb	r3, [r7, #15]
 800658e:	f043 0302 	orr.w	r3, r3, #2
 8006592:	b2db      	uxtb	r3, r3
 8006594:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_Z_GYRO))
 8006596:	79fb      	ldrb	r3, [r7, #7]
 8006598:	f003 0310 	and.w	r3, r3, #16
 800659c:	2b00      	cmp	r3, #0
 800659e:	d104      	bne.n	80065aa <mpu_set_sensors+0x9e>
        data |= BIT_STBY_ZG;
 80065a0:	7bfb      	ldrb	r3, [r7, #15]
 80065a2:	f043 0301 	orr.w	r3, r3, #1
 80065a6:	b2db      	uxtb	r3, r3
 80065a8:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_XYZ_ACCEL))
 80065aa:	79fb      	ldrb	r3, [r7, #7]
 80065ac:	f003 0308 	and.w	r3, r3, #8
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d104      	bne.n	80065be <mpu_set_sensors+0xb2>
        data |= BIT_STBY_XYZA;
 80065b4:	7bfb      	ldrb	r3, [r7, #15]
 80065b6:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 80065ba:	b2db      	uxtb	r3, r3
 80065bc:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
 80065be:	4b15      	ldr	r3, [pc, #84]	; (8006614 <mpu_set_sensors+0x108>)
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	7818      	ldrb	r0, [r3, #0]
 80065c4:	4b13      	ldr	r3, [pc, #76]	; (8006614 <mpu_set_sensors+0x108>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	7cd9      	ldrb	r1, [r3, #19]
 80065ca:	f107 030f 	add.w	r3, r7, #15
 80065ce:	2201      	movs	r2, #1
 80065d0:	f7fe ff2d 	bl	800542e <MPU_Write_Len>
 80065d4:	4603      	mov	r3, r0
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d005      	beq.n	80065e6 <mpu_set_sensors+0xda>
        st.chip_cfg.sensors = 0;
 80065da:	4b0e      	ldr	r3, [pc, #56]	; (8006614 <mpu_set_sensors+0x108>)
 80065dc:	2200      	movs	r2, #0
 80065de:	729a      	strb	r2, [r3, #10]
        return -1;
 80065e0:	f04f 33ff 	mov.w	r3, #4294967295
 80065e4:	e012      	b.n	800660c <mpu_set_sensors+0x100>
    }

    if (sensors && (sensors != INV_XYZ_ACCEL))
 80065e6:	79fb      	ldrb	r3, [r7, #7]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d005      	beq.n	80065f8 <mpu_set_sensors+0xec>
 80065ec:	79fb      	ldrb	r3, [r7, #7]
 80065ee:	2b08      	cmp	r3, #8
 80065f0:	d002      	beq.n	80065f8 <mpu_set_sensors+0xec>
        /* Latched interrupts only used in LP accel mode. */
        mpu_set_int_latched(0);
 80065f2:	2000      	movs	r0, #0
 80065f4:	f000 f954 	bl	80068a0 <mpu_set_int_latched>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
        return -1;
#endif
#endif

    st.chip_cfg.sensors = sensors;
 80065f8:	4a06      	ldr	r2, [pc, #24]	; (8006614 <mpu_set_sensors+0x108>)
 80065fa:	79fb      	ldrb	r3, [r7, #7]
 80065fc:	7293      	strb	r3, [r2, #10]
    st.chip_cfg.lp_accel_mode = 0;
 80065fe:	4b05      	ldr	r3, [pc, #20]	; (8006614 <mpu_set_sensors+0x108>)
 8006600:	2200      	movs	r2, #0
 8006602:	751a      	strb	r2, [r3, #20]
    delay_ms(50);
 8006604:	2032      	movs	r0, #50	; 0x32
 8006606:	f7fb fced 	bl	8001fe4 <HAL_msDelay>
    return 0;
 800660a:	2300      	movs	r3, #0
}
 800660c:	4618      	mov	r0, r3
 800660e:	3710      	adds	r7, #16
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}
 8006614:	2000000c 	.word	0x2000000c

08006618 <mpu_read_fifo_stream>:
 *  @param[in]  data    FIFO packet.
 *  @param[in]  more    Number of remaining packets.
 */
int mpu_read_fifo_stream(unsigned short length, unsigned char *data,
    unsigned char *more)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b086      	sub	sp, #24
 800661c:	af00      	add	r7, sp, #0
 800661e:	4603      	mov	r3, r0
 8006620:	60b9      	str	r1, [r7, #8]
 8006622:	607a      	str	r2, [r7, #4]
 8006624:	81fb      	strh	r3, [r7, #14]
    unsigned char tmp[2];
    unsigned short fifo_count;
    if (!st.chip_cfg.dmp_on)
 8006626:	4b3a      	ldr	r3, [pc, #232]	; (8006710 <mpu_read_fifo_stream+0xf8>)
 8006628:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800662c:	2b00      	cmp	r3, #0
 800662e:	d102      	bne.n	8006636 <mpu_read_fifo_stream+0x1e>
        return -1;
 8006630:	f04f 33ff 	mov.w	r3, #4294967295
 8006634:	e068      	b.n	8006708 <mpu_read_fifo_stream+0xf0>
    if (!st.chip_cfg.sensors)
 8006636:	4b36      	ldr	r3, [pc, #216]	; (8006710 <mpu_read_fifo_stream+0xf8>)
 8006638:	7a9b      	ldrb	r3, [r3, #10]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d102      	bne.n	8006644 <mpu_read_fifo_stream+0x2c>
        return -1;
 800663e:	f04f 33ff 	mov.w	r3, #4294967295
 8006642:	e061      	b.n	8006708 <mpu_read_fifo_stream+0xf0>

    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, tmp))
 8006644:	4b32      	ldr	r3, [pc, #200]	; (8006710 <mpu_read_fifo_stream+0xf8>)
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	7818      	ldrb	r0, [r3, #0]
 800664a:	4b31      	ldr	r3, [pc, #196]	; (8006710 <mpu_read_fifo_stream+0xf8>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	7a99      	ldrb	r1, [r3, #10]
 8006650:	f107 0314 	add.w	r3, r7, #20
 8006654:	2202      	movs	r2, #2
 8006656:	f7fe ff2c 	bl	80054b2 <MPU_Read_Len>
 800665a:	4603      	mov	r3, r0
 800665c:	2b00      	cmp	r3, #0
 800665e:	d002      	beq.n	8006666 <mpu_read_fifo_stream+0x4e>
        return -1;
 8006660:	f04f 33ff 	mov.w	r3, #4294967295
 8006664:	e050      	b.n	8006708 <mpu_read_fifo_stream+0xf0>
    fifo_count = (tmp[0] << 8) | tmp[1];
 8006666:	7d3b      	ldrb	r3, [r7, #20]
 8006668:	021b      	lsls	r3, r3, #8
 800666a:	b21a      	sxth	r2, r3
 800666c:	7d7b      	ldrb	r3, [r7, #21]
 800666e:	b21b      	sxth	r3, r3
 8006670:	4313      	orrs	r3, r2
 8006672:	b21b      	sxth	r3, r3
 8006674:	82fb      	strh	r3, [r7, #22]
    if (fifo_count < length) {
 8006676:	8afa      	ldrh	r2, [r7, #22]
 8006678:	89fb      	ldrh	r3, [r7, #14]
 800667a:	429a      	cmp	r2, r3
 800667c:	d205      	bcs.n	800668a <mpu_read_fifo_stream+0x72>
        more[0] = 0;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2200      	movs	r2, #0
 8006682:	701a      	strb	r2, [r3, #0]
        return -1;
 8006684:	f04f 33ff 	mov.w	r3, #4294967295
 8006688:	e03e      	b.n	8006708 <mpu_read_fifo_stream+0xf0>
    }
    if (fifo_count > (st.hw->max_fifo >> 1)) {
 800668a:	4b21      	ldr	r3, [pc, #132]	; (8006710 <mpu_read_fifo_stream+0xf8>)
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	885b      	ldrh	r3, [r3, #2]
 8006690:	085b      	lsrs	r3, r3, #1
 8006692:	b29b      	uxth	r3, r3
 8006694:	8afa      	ldrh	r2, [r7, #22]
 8006696:	429a      	cmp	r2, r3
 8006698:	d91a      	bls.n	80066d0 <mpu_read_fifo_stream+0xb8>
        /* FIFO is 50% full, better check overflow bit. */
        if (i2c_read(st.hw->addr, st.reg->int_status, 1, tmp))
 800669a:	4b1d      	ldr	r3, [pc, #116]	; (8006710 <mpu_read_fifo_stream+0xf8>)
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	7818      	ldrb	r0, [r3, #0]
 80066a0:	4b1b      	ldr	r3, [pc, #108]	; (8006710 <mpu_read_fifo_stream+0xf8>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	7c59      	ldrb	r1, [r3, #17]
 80066a6:	f107 0314 	add.w	r3, r7, #20
 80066aa:	2201      	movs	r2, #1
 80066ac:	f7fe ff01 	bl	80054b2 <MPU_Read_Len>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d002      	beq.n	80066bc <mpu_read_fifo_stream+0xa4>
            return -1;
 80066b6:	f04f 33ff 	mov.w	r3, #4294967295
 80066ba:	e025      	b.n	8006708 <mpu_read_fifo_stream+0xf0>
        if (tmp[0] & BIT_FIFO_OVERFLOW) {
 80066bc:	7d3b      	ldrb	r3, [r7, #20]
 80066be:	f003 0310 	and.w	r3, r3, #16
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d004      	beq.n	80066d0 <mpu_read_fifo_stream+0xb8>
            mpu_reset_fifo();
 80066c6:	f7ff fb13 	bl	8005cf0 <mpu_reset_fifo>
            return -2;
 80066ca:	f06f 0301 	mvn.w	r3, #1
 80066ce:	e01b      	b.n	8006708 <mpu_read_fifo_stream+0xf0>
        }
    }

    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, length, data))
 80066d0:	4b0f      	ldr	r3, [pc, #60]	; (8006710 <mpu_read_fifo_stream+0xf8>)
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	7818      	ldrb	r0, [r3, #0]
 80066d6:	4b0e      	ldr	r3, [pc, #56]	; (8006710 <mpu_read_fifo_stream+0xf8>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	7ad9      	ldrb	r1, [r3, #11]
 80066dc:	89fb      	ldrh	r3, [r7, #14]
 80066de:	b2da      	uxtb	r2, r3
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	f7fe fee6 	bl	80054b2 <MPU_Read_Len>
 80066e6:	4603      	mov	r3, r0
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d002      	beq.n	80066f2 <mpu_read_fifo_stream+0xda>
        return -1;
 80066ec:	f04f 33ff 	mov.w	r3, #4294967295
 80066f0:	e00a      	b.n	8006708 <mpu_read_fifo_stream+0xf0>
    more[0] = fifo_count / length - 1;
 80066f2:	8afa      	ldrh	r2, [r7, #22]
 80066f4:	89fb      	ldrh	r3, [r7, #14]
 80066f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	3b01      	subs	r3, #1
 8006700:	b2da      	uxtb	r2, r3
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	701a      	strb	r2, [r3, #0]
    return 0;
 8006706:	2300      	movs	r3, #0
}
 8006708:	4618      	mov	r0, r3
 800670a:	3718      	adds	r7, #24
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}
 8006710:	2000000c 	.word	0x2000000c

08006714 <mpu_set_bypass>:
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b084      	sub	sp, #16
 8006718:	af00      	add	r7, sp, #0
 800671a:	4603      	mov	r3, r0
 800671c:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
 800671e:	4b5f      	ldr	r3, [pc, #380]	; (800689c <mpu_set_bypass+0x188>)
 8006720:	7c9b      	ldrb	r3, [r3, #18]
 8006722:	79fa      	ldrb	r2, [r7, #7]
 8006724:	429a      	cmp	r2, r3
 8006726:	d101      	bne.n	800672c <mpu_set_bypass+0x18>
        return 0;
 8006728:	2300      	movs	r3, #0
 800672a:	e0b2      	b.n	8006892 <mpu_set_bypass+0x17e>

    if (bypass_on) {
 800672c:	79fb      	ldrb	r3, [r7, #7]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d050      	beq.n	80067d4 <mpu_set_bypass+0xc0>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8006732:	4b5a      	ldr	r3, [pc, #360]	; (800689c <mpu_set_bypass+0x188>)
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	7818      	ldrb	r0, [r3, #0]
 8006738:	4b58      	ldr	r3, [pc, #352]	; (800689c <mpu_set_bypass+0x188>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	7919      	ldrb	r1, [r3, #4]
 800673e:	f107 030f 	add.w	r3, r7, #15
 8006742:	2201      	movs	r2, #1
 8006744:	f7fe feb5 	bl	80054b2 <MPU_Read_Len>
 8006748:	4603      	mov	r3, r0
 800674a:	2b00      	cmp	r3, #0
 800674c:	d002      	beq.n	8006754 <mpu_set_bypass+0x40>
            return -1;
 800674e:	f04f 33ff 	mov.w	r3, #4294967295
 8006752:	e09e      	b.n	8006892 <mpu_set_bypass+0x17e>
        tmp &= ~BIT_AUX_IF_EN;
 8006754:	7bfb      	ldrb	r3, [r7, #15]
 8006756:	f023 0320 	bic.w	r3, r3, #32
 800675a:	b2db      	uxtb	r3, r3
 800675c:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 800675e:	4b4f      	ldr	r3, [pc, #316]	; (800689c <mpu_set_bypass+0x188>)
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	7818      	ldrb	r0, [r3, #0]
 8006764:	4b4d      	ldr	r3, [pc, #308]	; (800689c <mpu_set_bypass+0x188>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	7919      	ldrb	r1, [r3, #4]
 800676a:	f107 030f 	add.w	r3, r7, #15
 800676e:	2201      	movs	r2, #1
 8006770:	f7fe fe5d 	bl	800542e <MPU_Write_Len>
 8006774:	4603      	mov	r3, r0
 8006776:	2b00      	cmp	r3, #0
 8006778:	d002      	beq.n	8006780 <mpu_set_bypass+0x6c>
            return -1;
 800677a:	f04f 33ff 	mov.w	r3, #4294967295
 800677e:	e088      	b.n	8006892 <mpu_set_bypass+0x17e>
        delay_ms(3);
 8006780:	2003      	movs	r0, #3
 8006782:	f7fb fc2f 	bl	8001fe4 <HAL_msDelay>
        tmp = BIT_BYPASS_EN;
 8006786:	2302      	movs	r3, #2
 8006788:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.active_low_int)
 800678a:	4b44      	ldr	r3, [pc, #272]	; (800689c <mpu_set_bypass+0x188>)
 800678c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8006790:	2b00      	cmp	r3, #0
 8006792:	d004      	beq.n	800679e <mpu_set_bypass+0x8a>
            tmp |= BIT_ACTL;
 8006794:	7bfb      	ldrb	r3, [r7, #15]
 8006796:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800679a:	b2db      	uxtb	r3, r3
 800679c:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.latched_int)
 800679e:	4b3f      	ldr	r3, [pc, #252]	; (800689c <mpu_set_bypass+0x188>)
 80067a0:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d004      	beq.n	80067b2 <mpu_set_bypass+0x9e>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 80067a8:	7bfb      	ldrb	r3, [r7, #15]
 80067aa:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80067ae:	b2db      	uxtb	r3, r3
 80067b0:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 80067b2:	4b3a      	ldr	r3, [pc, #232]	; (800689c <mpu_set_bypass+0x188>)
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	7818      	ldrb	r0, [r3, #0]
 80067b8:	4b38      	ldr	r3, [pc, #224]	; (800689c <mpu_set_bypass+0x188>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	7d19      	ldrb	r1, [r3, #20]
 80067be:	f107 030f 	add.w	r3, r7, #15
 80067c2:	2201      	movs	r2, #1
 80067c4:	f7fe fe33 	bl	800542e <MPU_Write_Len>
 80067c8:	4603      	mov	r3, r0
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d05d      	beq.n	800688a <mpu_set_bypass+0x176>
            return -1;
 80067ce:	f04f 33ff 	mov.w	r3, #4294967295
 80067d2:	e05e      	b.n	8006892 <mpu_set_bypass+0x17e>
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 80067d4:	4b31      	ldr	r3, [pc, #196]	; (800689c <mpu_set_bypass+0x188>)
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	7818      	ldrb	r0, [r3, #0]
 80067da:	4b30      	ldr	r3, [pc, #192]	; (800689c <mpu_set_bypass+0x188>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	7919      	ldrb	r1, [r3, #4]
 80067e0:	f107 030f 	add.w	r3, r7, #15
 80067e4:	2201      	movs	r2, #1
 80067e6:	f7fe fe64 	bl	80054b2 <MPU_Read_Len>
 80067ea:	4603      	mov	r3, r0
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d002      	beq.n	80067f6 <mpu_set_bypass+0xe2>
            return -1;
 80067f0:	f04f 33ff 	mov.w	r3, #4294967295
 80067f4:	e04d      	b.n	8006892 <mpu_set_bypass+0x17e>
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 80067f6:	4b29      	ldr	r3, [pc, #164]	; (800689c <mpu_set_bypass+0x188>)
 80067f8:	7a9b      	ldrb	r3, [r3, #10]
 80067fa:	f003 0301 	and.w	r3, r3, #1
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d005      	beq.n	800680e <mpu_set_bypass+0xfa>
            tmp |= BIT_AUX_IF_EN;
 8006802:	7bfb      	ldrb	r3, [r7, #15]
 8006804:	f043 0320 	orr.w	r3, r3, #32
 8006808:	b2db      	uxtb	r3, r3
 800680a:	73fb      	strb	r3, [r7, #15]
 800680c:	e004      	b.n	8006818 <mpu_set_bypass+0x104>
        else
            tmp &= ~BIT_AUX_IF_EN;
 800680e:	7bfb      	ldrb	r3, [r7, #15]
 8006810:	f023 0320 	bic.w	r3, r3, #32
 8006814:	b2db      	uxtb	r3, r3
 8006816:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8006818:	4b20      	ldr	r3, [pc, #128]	; (800689c <mpu_set_bypass+0x188>)
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	7818      	ldrb	r0, [r3, #0]
 800681e:	4b1f      	ldr	r3, [pc, #124]	; (800689c <mpu_set_bypass+0x188>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	7919      	ldrb	r1, [r3, #4]
 8006824:	f107 030f 	add.w	r3, r7, #15
 8006828:	2201      	movs	r2, #1
 800682a:	f7fe fe00 	bl	800542e <MPU_Write_Len>
 800682e:	4603      	mov	r3, r0
 8006830:	2b00      	cmp	r3, #0
 8006832:	d002      	beq.n	800683a <mpu_set_bypass+0x126>
            return -1;
 8006834:	f04f 33ff 	mov.w	r3, #4294967295
 8006838:	e02b      	b.n	8006892 <mpu_set_bypass+0x17e>
        delay_ms(3);
 800683a:	2003      	movs	r0, #3
 800683c:	f7fb fbd2 	bl	8001fe4 <HAL_msDelay>
        if (st.chip_cfg.active_low_int)
 8006840:	4b16      	ldr	r3, [pc, #88]	; (800689c <mpu_set_bypass+0x188>)
 8006842:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8006846:	2b00      	cmp	r3, #0
 8006848:	d002      	beq.n	8006850 <mpu_set_bypass+0x13c>
            tmp = BIT_ACTL;
 800684a:	2380      	movs	r3, #128	; 0x80
 800684c:	73fb      	strb	r3, [r7, #15]
 800684e:	e001      	b.n	8006854 <mpu_set_bypass+0x140>
        else
            tmp = 0;
 8006850:	2300      	movs	r3, #0
 8006852:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.latched_int)
 8006854:	4b11      	ldr	r3, [pc, #68]	; (800689c <mpu_set_bypass+0x188>)
 8006856:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800685a:	2b00      	cmp	r3, #0
 800685c:	d004      	beq.n	8006868 <mpu_set_bypass+0x154>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 800685e:	7bfb      	ldrb	r3, [r7, #15]
 8006860:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8006864:	b2db      	uxtb	r3, r3
 8006866:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8006868:	4b0c      	ldr	r3, [pc, #48]	; (800689c <mpu_set_bypass+0x188>)
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	7818      	ldrb	r0, [r3, #0]
 800686e:	4b0b      	ldr	r3, [pc, #44]	; (800689c <mpu_set_bypass+0x188>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	7d19      	ldrb	r1, [r3, #20]
 8006874:	f107 030f 	add.w	r3, r7, #15
 8006878:	2201      	movs	r2, #1
 800687a:	f7fe fdd8 	bl	800542e <MPU_Write_Len>
 800687e:	4603      	mov	r3, r0
 8006880:	2b00      	cmp	r3, #0
 8006882:	d002      	beq.n	800688a <mpu_set_bypass+0x176>
            return -1;
 8006884:	f04f 33ff 	mov.w	r3, #4294967295
 8006888:	e003      	b.n	8006892 <mpu_set_bypass+0x17e>
    }
    st.chip_cfg.bypass_mode = bypass_on;
 800688a:	4a04      	ldr	r2, [pc, #16]	; (800689c <mpu_set_bypass+0x188>)
 800688c:	79fb      	ldrb	r3, [r7, #7]
 800688e:	7493      	strb	r3, [r2, #18]
    return 0;
 8006890:	2300      	movs	r3, #0
}
 8006892:	4618      	mov	r0, r3
 8006894:	3710      	adds	r7, #16
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
 800689a:	bf00      	nop
 800689c:	2000000c 	.word	0x2000000c

080068a0 <mpu_set_int_latched>:
 *  Any MPU register will clear the interrupt.
 *  @param[in]  enable  1 to enable, 0 to disable.
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b084      	sub	sp, #16
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	4603      	mov	r3, r0
 80068a8:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
 80068aa:	4b1e      	ldr	r3, [pc, #120]	; (8006924 <mpu_set_int_latched+0x84>)
 80068ac:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80068b0:	79fa      	ldrb	r2, [r7, #7]
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d101      	bne.n	80068ba <mpu_set_int_latched+0x1a>
        return 0;
 80068b6:	2300      	movs	r3, #0
 80068b8:	e030      	b.n	800691c <mpu_set_int_latched+0x7c>

    if (enable)
 80068ba:	79fb      	ldrb	r3, [r7, #7]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d002      	beq.n	80068c6 <mpu_set_int_latched+0x26>
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
 80068c0:	2330      	movs	r3, #48	; 0x30
 80068c2:	73fb      	strb	r3, [r7, #15]
 80068c4:	e001      	b.n	80068ca <mpu_set_int_latched+0x2a>
    else
        tmp = 0;
 80068c6:	2300      	movs	r3, #0
 80068c8:	73fb      	strb	r3, [r7, #15]
    if (st.chip_cfg.bypass_mode)
 80068ca:	4b16      	ldr	r3, [pc, #88]	; (8006924 <mpu_set_int_latched+0x84>)
 80068cc:	7c9b      	ldrb	r3, [r3, #18]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d004      	beq.n	80068dc <mpu_set_int_latched+0x3c>
        tmp |= BIT_BYPASS_EN;
 80068d2:	7bfb      	ldrb	r3, [r7, #15]
 80068d4:	f043 0302 	orr.w	r3, r3, #2
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	73fb      	strb	r3, [r7, #15]
    if (st.chip_cfg.active_low_int)
 80068dc:	4b11      	ldr	r3, [pc, #68]	; (8006924 <mpu_set_int_latched+0x84>)
 80068de:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d004      	beq.n	80068f0 <mpu_set_int_latched+0x50>
        tmp |= BIT_ACTL;
 80068e6:	7bfb      	ldrb	r3, [r7, #15]
 80068e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 80068f0:	4b0c      	ldr	r3, [pc, #48]	; (8006924 <mpu_set_int_latched+0x84>)
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	7818      	ldrb	r0, [r3, #0]
 80068f6:	4b0b      	ldr	r3, [pc, #44]	; (8006924 <mpu_set_int_latched+0x84>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	7d19      	ldrb	r1, [r3, #20]
 80068fc:	f107 030f 	add.w	r3, r7, #15
 8006900:	2201      	movs	r2, #1
 8006902:	f7fe fd94 	bl	800542e <MPU_Write_Len>
 8006906:	4603      	mov	r3, r0
 8006908:	2b00      	cmp	r3, #0
 800690a:	d002      	beq.n	8006912 <mpu_set_int_latched+0x72>
        return -1;
 800690c:	f04f 33ff 	mov.w	r3, #4294967295
 8006910:	e004      	b.n	800691c <mpu_set_int_latched+0x7c>
    st.chip_cfg.latched_int = enable;
 8006912:	4a04      	ldr	r2, [pc, #16]	; (8006924 <mpu_set_int_latched+0x84>)
 8006914:	79fb      	ldrb	r3, [r7, #7]
 8006916:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
    return 0;
 800691a:	2300      	movs	r3, #0
}
 800691c:	4618      	mov	r0, r3
 800691e:	3710      	adds	r7, #16
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}
 8006924:	2000000c 	.word	0x2000000c

08006928 <get_accel_prod_shift>:

#ifdef MPU6050
static int get_accel_prod_shift(float *st_shift)
{
 8006928:	b590      	push	{r4, r7, lr}
 800692a:	b087      	sub	sp, #28
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
    unsigned char tmp[4], shift_code[3], ii;

    if (i2c_read(st.hw->addr, 0x0D, 4, tmp))
 8006930:	4b40      	ldr	r3, [pc, #256]	; (8006a34 <get_accel_prod_shift+0x10c>)
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	7818      	ldrb	r0, [r3, #0]
 8006936:	f107 0310 	add.w	r3, r7, #16
 800693a:	2204      	movs	r2, #4
 800693c:	210d      	movs	r1, #13
 800693e:	f7fe fdb8 	bl	80054b2 <MPU_Read_Len>
 8006942:	4603      	mov	r3, r0
 8006944:	2b00      	cmp	r3, #0
 8006946:	d001      	beq.n	800694c <get_accel_prod_shift+0x24>
        return 0x07;
 8006948:	2307      	movs	r3, #7
 800694a:	e06f      	b.n	8006a2c <get_accel_prod_shift+0x104>

    shift_code[0] = ((tmp[0] & 0xE0) >> 3) | ((tmp[3] & 0x30) >> 4);
 800694c:	7c3b      	ldrb	r3, [r7, #16]
 800694e:	10db      	asrs	r3, r3, #3
 8006950:	b25b      	sxtb	r3, r3
 8006952:	f003 031c 	and.w	r3, r3, #28
 8006956:	b25a      	sxtb	r2, r3
 8006958:	7cfb      	ldrb	r3, [r7, #19]
 800695a:	111b      	asrs	r3, r3, #4
 800695c:	b25b      	sxtb	r3, r3
 800695e:	f003 0303 	and.w	r3, r3, #3
 8006962:	b25b      	sxtb	r3, r3
 8006964:	4313      	orrs	r3, r2
 8006966:	b25b      	sxtb	r3, r3
 8006968:	b2db      	uxtb	r3, r3
 800696a:	733b      	strb	r3, [r7, #12]
    shift_code[1] = ((tmp[1] & 0xE0) >> 3) | ((tmp[3] & 0x0C) >> 2);
 800696c:	7c7b      	ldrb	r3, [r7, #17]
 800696e:	10db      	asrs	r3, r3, #3
 8006970:	b25b      	sxtb	r3, r3
 8006972:	f003 031c 	and.w	r3, r3, #28
 8006976:	b25a      	sxtb	r2, r3
 8006978:	7cfb      	ldrb	r3, [r7, #19]
 800697a:	109b      	asrs	r3, r3, #2
 800697c:	b25b      	sxtb	r3, r3
 800697e:	f003 0303 	and.w	r3, r3, #3
 8006982:	b25b      	sxtb	r3, r3
 8006984:	4313      	orrs	r3, r2
 8006986:	b25b      	sxtb	r3, r3
 8006988:	b2db      	uxtb	r3, r3
 800698a:	737b      	strb	r3, [r7, #13]
    shift_code[2] = ((tmp[2] & 0xE0) >> 3) | (tmp[3] & 0x03);
 800698c:	7cbb      	ldrb	r3, [r7, #18]
 800698e:	10db      	asrs	r3, r3, #3
 8006990:	b25b      	sxtb	r3, r3
 8006992:	f003 031c 	and.w	r3, r3, #28
 8006996:	b25a      	sxtb	r2, r3
 8006998:	7cfb      	ldrb	r3, [r7, #19]
 800699a:	b25b      	sxtb	r3, r3
 800699c:	f003 0303 	and.w	r3, r3, #3
 80069a0:	b25b      	sxtb	r3, r3
 80069a2:	4313      	orrs	r3, r2
 80069a4:	b25b      	sxtb	r3, r3
 80069a6:	b2db      	uxtb	r3, r3
 80069a8:	73bb      	strb	r3, [r7, #14]
    for (ii = 0; ii < 3; ii++) {
 80069aa:	2300      	movs	r3, #0
 80069ac:	75fb      	strb	r3, [r7, #23]
 80069ae:	e039      	b.n	8006a24 <get_accel_prod_shift+0xfc>
        if (!shift_code[ii]) {
 80069b0:	7dfb      	ldrb	r3, [r7, #23]
 80069b2:	3318      	adds	r3, #24
 80069b4:	443b      	add	r3, r7
 80069b6:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d107      	bne.n	80069ce <get_accel_prod_shift+0xa6>
            st_shift[ii] = 0.f;
 80069be:	7dfb      	ldrb	r3, [r7, #23]
 80069c0:	009b      	lsls	r3, r3, #2
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	4413      	add	r3, r2
 80069c6:	f04f 0200 	mov.w	r2, #0
 80069ca:	601a      	str	r2, [r3, #0]
            continue;
 80069cc:	e027      	b.n	8006a1e <get_accel_prod_shift+0xf6>
        }
        /* Equivalent to..
         * st_shift[ii] = 0.34f * powf(0.92f/0.34f, (shift_code[ii]-1) / 30.f)
         */
        st_shift[ii] = 0.34f;
 80069ce:	7dfb      	ldrb	r3, [r7, #23]
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	4413      	add	r3, r2
 80069d6:	4a18      	ldr	r2, [pc, #96]	; (8006a38 <get_accel_prod_shift+0x110>)
 80069d8:	601a      	str	r2, [r3, #0]
        while (--shift_code[ii])
 80069da:	e00d      	b.n	80069f8 <get_accel_prod_shift+0xd0>
            st_shift[ii] *= 1.034f;
 80069dc:	7dfb      	ldrb	r3, [r7, #23]
 80069de:	009b      	lsls	r3, r3, #2
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	4413      	add	r3, r2
 80069e4:	6818      	ldr	r0, [r3, #0]
 80069e6:	7dfb      	ldrb	r3, [r7, #23]
 80069e8:	009b      	lsls	r3, r3, #2
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	18d4      	adds	r4, r2, r3
 80069ee:	4913      	ldr	r1, [pc, #76]	; (8006a3c <get_accel_prod_shift+0x114>)
 80069f0:	f7fa f9a8 	bl	8000d44 <__aeabi_fmul>
 80069f4:	4603      	mov	r3, r0
 80069f6:	6023      	str	r3, [r4, #0]
        while (--shift_code[ii])
 80069f8:	7dfb      	ldrb	r3, [r7, #23]
 80069fa:	f103 0218 	add.w	r2, r3, #24
 80069fe:	443a      	add	r2, r7
 8006a00:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006a04:	3a01      	subs	r2, #1
 8006a06:	b2d1      	uxtb	r1, r2
 8006a08:	f103 0218 	add.w	r2, r3, #24
 8006a0c:	443a      	add	r2, r7
 8006a0e:	f802 1c0c 	strb.w	r1, [r2, #-12]
 8006a12:	3318      	adds	r3, #24
 8006a14:	443b      	add	r3, r7
 8006a16:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d1de      	bne.n	80069dc <get_accel_prod_shift+0xb4>
    for (ii = 0; ii < 3; ii++) {
 8006a1e:	7dfb      	ldrb	r3, [r7, #23]
 8006a20:	3301      	adds	r3, #1
 8006a22:	75fb      	strb	r3, [r7, #23]
 8006a24:	7dfb      	ldrb	r3, [r7, #23]
 8006a26:	2b02      	cmp	r3, #2
 8006a28:	d9c2      	bls.n	80069b0 <get_accel_prod_shift+0x88>
    }
    return 0;
 8006a2a:	2300      	movs	r3, #0
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	371c      	adds	r7, #28
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd90      	pop	{r4, r7, pc}
 8006a34:	2000000c 	.word	0x2000000c
 8006a38:	3eae147b 	.word	0x3eae147b
 8006a3c:	3f845a1d 	.word	0x3f845a1d

08006a40 <accel_self_test>:

static int accel_self_test(long *bias_regular, long *bias_st)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b08a      	sub	sp, #40	; 0x28
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
 8006a48:	6039      	str	r1, [r7, #0]
    int jj, result = 0;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	623b      	str	r3, [r7, #32]
    float st_shift[3], st_shift_cust, st_shift_var;

    get_accel_prod_shift(st_shift);
 8006a4e:	f107 030c 	add.w	r3, r7, #12
 8006a52:	4618      	mov	r0, r3
 8006a54:	f7ff ff68 	bl	8006928 <get_accel_prod_shift>
    for(jj = 0; jj < 3; jj++) {
 8006a58:	2300      	movs	r3, #0
 8006a5a:	627b      	str	r3, [r7, #36]	; 0x24
 8006a5c:	e065      	b.n	8006b2a <accel_self_test+0xea>
        st_shift_cust = labs(bias_regular[jj] - bias_st[jj]) / 65536.f;
 8006a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	4413      	add	r3, r2
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6a:	009b      	lsls	r3, r3, #2
 8006a6c:	6839      	ldr	r1, [r7, #0]
 8006a6e:	440b      	add	r3, r1
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	1ad3      	subs	r3, r2, r3
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	bfb8      	it	lt
 8006a78:	425b      	neglt	r3, r3
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f7fa f90e 	bl	8000c9c <__aeabi_i2f>
 8006a80:	4603      	mov	r3, r0
 8006a82:	f04f 418f 	mov.w	r1, #1199570944	; 0x47800000
 8006a86:	4618      	mov	r0, r3
 8006a88:	f7fa fa10 	bl	8000eac <__aeabi_fdiv>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	61fb      	str	r3, [r7, #28]
        if (st_shift[jj]) {
 8006a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a92:	009b      	lsls	r3, r3, #2
 8006a94:	3328      	adds	r3, #40	; 0x28
 8006a96:	443b      	add	r3, r7
 8006a98:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8006a9c:	f04f 0100 	mov.w	r1, #0
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f7fa fae3 	bl	800106c <__aeabi_fcmpeq>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d124      	bne.n	8006af6 <accel_self_test+0xb6>
            st_shift_var = st_shift_cust / st_shift[jj] - 1.f;
 8006aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aae:	009b      	lsls	r3, r3, #2
 8006ab0:	3328      	adds	r3, #40	; 0x28
 8006ab2:	443b      	add	r3, r7
 8006ab4:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8006ab8:	4619      	mov	r1, r3
 8006aba:	69f8      	ldr	r0, [r7, #28]
 8006abc:	f7fa f9f6 	bl	8000eac <__aeabi_fdiv>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f7fa f832 	bl	8000b30 <__aeabi_fsub>
 8006acc:	4603      	mov	r3, r0
 8006ace:	61bb      	str	r3, [r7, #24]
            if (fabs(st_shift_var) > test.max_accel_var)
 8006ad0:	69bb      	ldr	r3, [r7, #24]
 8006ad2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ad6:	4a19      	ldr	r2, [pc, #100]	; (8006b3c <accel_self_test+0xfc>)
 8006ad8:	4611      	mov	r1, r2
 8006ada:	4618      	mov	r0, r3
 8006adc:	f7fa faee 	bl	80010bc <__aeabi_fcmpgt>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d01e      	beq.n	8006b24 <accel_self_test+0xe4>
                result |= 1 << jj;
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aea:	fa02 f303 	lsl.w	r3, r2, r3
 8006aee:	6a3a      	ldr	r2, [r7, #32]
 8006af0:	4313      	orrs	r3, r2
 8006af2:	623b      	str	r3, [r7, #32]
 8006af4:	e016      	b.n	8006b24 <accel_self_test+0xe4>
        } else if ((st_shift_cust < test.min_g) ||
 8006af6:	4b12      	ldr	r3, [pc, #72]	; (8006b40 <accel_self_test+0x100>)
 8006af8:	4619      	mov	r1, r3
 8006afa:	69f8      	ldr	r0, [r7, #28]
 8006afc:	f7fa fac0 	bl	8001080 <__aeabi_fcmplt>
 8006b00:	4603      	mov	r3, r0
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d107      	bne.n	8006b16 <accel_self_test+0xd6>
            (st_shift_cust > test.max_g))
 8006b06:	4b0f      	ldr	r3, [pc, #60]	; (8006b44 <accel_self_test+0x104>)
        } else if ((st_shift_cust < test.min_g) ||
 8006b08:	4619      	mov	r1, r3
 8006b0a:	69f8      	ldr	r0, [r7, #28]
 8006b0c:	f7fa fad6 	bl	80010bc <__aeabi_fcmpgt>
 8006b10:	4603      	mov	r3, r0
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d006      	beq.n	8006b24 <accel_self_test+0xe4>
            result |= 1 << jj;
 8006b16:	2201      	movs	r2, #1
 8006b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b1e:	6a3a      	ldr	r2, [r7, #32]
 8006b20:	4313      	orrs	r3, r2
 8006b22:	623b      	str	r3, [r7, #32]
    for(jj = 0; jj < 3; jj++) {
 8006b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b26:	3301      	adds	r3, #1
 8006b28:	627b      	str	r3, [r7, #36]	; 0x24
 8006b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b2c:	2b02      	cmp	r3, #2
 8006b2e:	dd96      	ble.n	8006a5e <accel_self_test+0x1e>
    }

    return result;
 8006b30:	6a3b      	ldr	r3, [r7, #32]
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3728      	adds	r7, #40	; 0x28
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}
 8006b3a:	bf00      	nop
 8006b3c:	3e0f5c29 	.word	0x3e0f5c29
 8006b40:	3e99999a 	.word	0x3e99999a
 8006b44:	3f733333 	.word	0x3f733333

08006b48 <gyro_self_test>:

static int gyro_self_test(long *bias_regular, long *bias_st)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b088      	sub	sp, #32
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	6039      	str	r1, [r7, #0]
    int jj, result = 0;
 8006b52:	2300      	movs	r3, #0
 8006b54:	61bb      	str	r3, [r7, #24]
    unsigned char tmp[3];
    float st_shift, st_shift_cust, st_shift_var;

    if (i2c_read(st.hw->addr, 0x0D, 3, tmp))
 8006b56:	4b54      	ldr	r3, [pc, #336]	; (8006ca8 <gyro_self_test+0x160>)
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	7818      	ldrb	r0, [r3, #0]
 8006b5c:	f107 0308 	add.w	r3, r7, #8
 8006b60:	2203      	movs	r2, #3
 8006b62:	210d      	movs	r1, #13
 8006b64:	f7fe fca5 	bl	80054b2 <MPU_Read_Len>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d001      	beq.n	8006b72 <gyro_self_test+0x2a>
        return 0x07;
 8006b6e:	2307      	movs	r3, #7
 8006b70:	e095      	b.n	8006c9e <gyro_self_test+0x156>

    tmp[0] &= 0x1F;
 8006b72:	7a3b      	ldrb	r3, [r7, #8]
 8006b74:	f003 031f 	and.w	r3, r3, #31
 8006b78:	b2db      	uxtb	r3, r3
 8006b7a:	723b      	strb	r3, [r7, #8]
    tmp[1] &= 0x1F;
 8006b7c:	7a7b      	ldrb	r3, [r7, #9]
 8006b7e:	f003 031f 	and.w	r3, r3, #31
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	727b      	strb	r3, [r7, #9]
    tmp[2] &= 0x1F;
 8006b86:	7abb      	ldrb	r3, [r7, #10]
 8006b88:	f003 031f 	and.w	r3, r3, #31
 8006b8c:	b2db      	uxtb	r3, r3
 8006b8e:	72bb      	strb	r3, [r7, #10]

    for (jj = 0; jj < 3; jj++) {
 8006b90:	2300      	movs	r3, #0
 8006b92:	61fb      	str	r3, [r7, #28]
 8006b94:	e07e      	b.n	8006c94 <gyro_self_test+0x14c>
        st_shift_cust = labs(bias_regular[jj] - bias_st[jj]) / 65536.f;
 8006b96:	69fb      	ldr	r3, [r7, #28]
 8006b98:	009b      	lsls	r3, r3, #2
 8006b9a:	687a      	ldr	r2, [r7, #4]
 8006b9c:	4413      	add	r3, r2
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	69fb      	ldr	r3, [r7, #28]
 8006ba2:	009b      	lsls	r3, r3, #2
 8006ba4:	6839      	ldr	r1, [r7, #0]
 8006ba6:	440b      	add	r3, r1
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	1ad3      	subs	r3, r2, r3
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	bfb8      	it	lt
 8006bb0:	425b      	neglt	r3, r3
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f7fa f872 	bl	8000c9c <__aeabi_i2f>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	f04f 418f 	mov.w	r1, #1199570944	; 0x47800000
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f7fa f974 	bl	8000eac <__aeabi_fdiv>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	613b      	str	r3, [r7, #16]
        if (tmp[jj]) {
 8006bc8:	f107 0208 	add.w	r2, r7, #8
 8006bcc:	69fb      	ldr	r3, [r7, #28]
 8006bce:	4413      	add	r3, r2
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d044      	beq.n	8006c60 <gyro_self_test+0x118>
            st_shift = 3275.f / test.gyro_sens;
 8006bd6:	2383      	movs	r3, #131	; 0x83
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f7fa f85b 	bl	8000c94 <__aeabi_ui2f>
 8006bde:	4603      	mov	r3, r0
 8006be0:	4619      	mov	r1, r3
 8006be2:	4832      	ldr	r0, [pc, #200]	; (8006cac <gyro_self_test+0x164>)
 8006be4:	f7fa f962 	bl	8000eac <__aeabi_fdiv>
 8006be8:	4603      	mov	r3, r0
 8006bea:	617b      	str	r3, [r7, #20]
            while (--tmp[jj])
 8006bec:	e005      	b.n	8006bfa <gyro_self_test+0xb2>
                st_shift *= 1.046f;
 8006bee:	4930      	ldr	r1, [pc, #192]	; (8006cb0 <gyro_self_test+0x168>)
 8006bf0:	6978      	ldr	r0, [r7, #20]
 8006bf2:	f7fa f8a7 	bl	8000d44 <__aeabi_fmul>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	617b      	str	r3, [r7, #20]
            while (--tmp[jj])
 8006bfa:	f107 0208 	add.w	r2, r7, #8
 8006bfe:	69fb      	ldr	r3, [r7, #28]
 8006c00:	4413      	add	r3, r2
 8006c02:	781b      	ldrb	r3, [r3, #0]
 8006c04:	3b01      	subs	r3, #1
 8006c06:	b2d9      	uxtb	r1, r3
 8006c08:	f107 0208 	add.w	r2, r7, #8
 8006c0c:	69fb      	ldr	r3, [r7, #28]
 8006c0e:	4413      	add	r3, r2
 8006c10:	460a      	mov	r2, r1
 8006c12:	701a      	strb	r2, [r3, #0]
 8006c14:	f107 0208 	add.w	r2, r7, #8
 8006c18:	69fb      	ldr	r3, [r7, #28]
 8006c1a:	4413      	add	r3, r2
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d1e5      	bne.n	8006bee <gyro_self_test+0xa6>
            st_shift_var = st_shift_cust / st_shift - 1.f;
 8006c22:	6979      	ldr	r1, [r7, #20]
 8006c24:	6938      	ldr	r0, [r7, #16]
 8006c26:	f7fa f941 	bl	8000eac <__aeabi_fdiv>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8006c30:	4618      	mov	r0, r3
 8006c32:	f7f9 ff7d 	bl	8000b30 <__aeabi_fsub>
 8006c36:	4603      	mov	r3, r0
 8006c38:	60fb      	str	r3, [r7, #12]
            if (fabs(st_shift_var) > test.max_gyro_var)
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006c40:	4a1c      	ldr	r2, [pc, #112]	; (8006cb4 <gyro_self_test+0x16c>)
 8006c42:	4611      	mov	r1, r2
 8006c44:	4618      	mov	r0, r3
 8006c46:	f7fa fa39 	bl	80010bc <__aeabi_fcmpgt>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d01e      	beq.n	8006c8e <gyro_self_test+0x146>
                result |= 1 << jj;
 8006c50:	2201      	movs	r2, #1
 8006c52:	69fb      	ldr	r3, [r7, #28]
 8006c54:	fa02 f303 	lsl.w	r3, r2, r3
 8006c58:	69ba      	ldr	r2, [r7, #24]
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	61bb      	str	r3, [r7, #24]
 8006c5e:	e016      	b.n	8006c8e <gyro_self_test+0x146>
        } else if ((st_shift_cust < test.min_dps) ||
 8006c60:	4b15      	ldr	r3, [pc, #84]	; (8006cb8 <gyro_self_test+0x170>)
 8006c62:	4619      	mov	r1, r3
 8006c64:	6938      	ldr	r0, [r7, #16]
 8006c66:	f7fa fa0b 	bl	8001080 <__aeabi_fcmplt>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d107      	bne.n	8006c80 <gyro_self_test+0x138>
            (st_shift_cust > test.max_dps))
 8006c70:	4b12      	ldr	r3, [pc, #72]	; (8006cbc <gyro_self_test+0x174>)
        } else if ((st_shift_cust < test.min_dps) ||
 8006c72:	4619      	mov	r1, r3
 8006c74:	6938      	ldr	r0, [r7, #16]
 8006c76:	f7fa fa21 	bl	80010bc <__aeabi_fcmpgt>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d006      	beq.n	8006c8e <gyro_self_test+0x146>
            result |= 1 << jj;
 8006c80:	2201      	movs	r2, #1
 8006c82:	69fb      	ldr	r3, [r7, #28]
 8006c84:	fa02 f303 	lsl.w	r3, r2, r3
 8006c88:	69ba      	ldr	r2, [r7, #24]
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	61bb      	str	r3, [r7, #24]
    for (jj = 0; jj < 3; jj++) {
 8006c8e:	69fb      	ldr	r3, [r7, #28]
 8006c90:	3301      	adds	r3, #1
 8006c92:	61fb      	str	r3, [r7, #28]
 8006c94:	69fb      	ldr	r3, [r7, #28]
 8006c96:	2b02      	cmp	r3, #2
 8006c98:	f77f af7d 	ble.w	8006b96 <gyro_self_test+0x4e>
    }
    return result;
 8006c9c:	69bb      	ldr	r3, [r7, #24]
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3720      	adds	r7, #32
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}
 8006ca6:	bf00      	nop
 8006ca8:	2000000c 	.word	0x2000000c
 8006cac:	454cb000 	.word	0x454cb000
 8006cb0:	3f85e354 	.word	0x3f85e354
 8006cb4:	3e0f5c29 	.word	0x3e0f5c29
 8006cb8:	41200000 	.word	0x41200000
 8006cbc:	42d20000 	.word	0x42d20000

08006cc0 <get_st_biases>:
}
#endif
#endif

static int get_st_biases(long *gyro, long *accel, unsigned char hw_test)
{
 8006cc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006cc4:	b0b8      	sub	sp, #224	; 0xe0
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
 8006ccc:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8006cd0:	4613      	mov	r3, r2
 8006cd2:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
    unsigned char data[MAX_PACKET_LENGTH];
    unsigned char packet_count, ii;
    unsigned short fifo_count;

    data[0] = 0x01;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    data[1] = 0;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, data))
 8006ce2:	4ba5      	ldr	r3, [pc, #660]	; (8006f78 <get_st_biases+0x2b8>)
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	7818      	ldrb	r0, [r3, #0]
 8006ce8:	4ba3      	ldr	r3, [pc, #652]	; (8006f78 <get_st_biases+0x2b8>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	7c99      	ldrb	r1, [r3, #18]
 8006cee:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8006cf2:	2202      	movs	r2, #2
 8006cf4:	f7fe fb9b 	bl	800542e <MPU_Write_Len>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d002      	beq.n	8006d04 <get_st_biases+0x44>
        return -1;
 8006cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8006d02:	e34b      	b.n	800739c <get_st_biases+0x6dc>
    delay_ms(200);
 8006d04:	20c8      	movs	r0, #200	; 0xc8
 8006d06:	f7fb f96d 	bl	8001fe4 <HAL_msDelay>
    data[0] = 0;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, data))
 8006d10:	4b99      	ldr	r3, [pc, #612]	; (8006f78 <get_st_biases+0x2b8>)
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	7818      	ldrb	r0, [r3, #0]
 8006d16:	4b98      	ldr	r3, [pc, #608]	; (8006f78 <get_st_biases+0x2b8>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	7bd9      	ldrb	r1, [r3, #15]
 8006d1c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8006d20:	2201      	movs	r2, #1
 8006d22:	f7fe fb84 	bl	800542e <MPU_Write_Len>
 8006d26:	4603      	mov	r3, r0
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d002      	beq.n	8006d32 <get_st_biases+0x72>
        return -1;
 8006d2c:	f04f 33ff 	mov.w	r3, #4294967295
 8006d30:	e334      	b.n	800739c <get_st_biases+0x6dc>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
 8006d32:	4b91      	ldr	r3, [pc, #580]	; (8006f78 <get_st_biases+0x2b8>)
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	7818      	ldrb	r0, [r3, #0]
 8006d38:	4b8f      	ldr	r3, [pc, #572]	; (8006f78 <get_st_biases+0x2b8>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	7959      	ldrb	r1, [r3, #5]
 8006d3e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8006d42:	2201      	movs	r2, #1
 8006d44:	f7fe fb73 	bl	800542e <MPU_Write_Len>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d002      	beq.n	8006d54 <get_st_biases+0x94>
        return -1;
 8006d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8006d52:	e323      	b.n	800739c <get_st_biases+0x6dc>
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 8006d54:	4b88      	ldr	r3, [pc, #544]	; (8006f78 <get_st_biases+0x2b8>)
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	7818      	ldrb	r0, [r3, #0]
 8006d5a:	4b87      	ldr	r3, [pc, #540]	; (8006f78 <get_st_biases+0x2b8>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	7c99      	ldrb	r1, [r3, #18]
 8006d60:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8006d64:	2201      	movs	r2, #1
 8006d66:	f7fe fb62 	bl	800542e <MPU_Write_Len>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d002      	beq.n	8006d76 <get_st_biases+0xb6>
        return -1;
 8006d70:	f04f 33ff 	mov.w	r3, #4294967295
 8006d74:	e312      	b.n	800739c <get_st_biases+0x6dc>
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
 8006d76:	4b80      	ldr	r3, [pc, #512]	; (8006f78 <get_st_biases+0x2b8>)
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	7818      	ldrb	r0, [r3, #0]
 8006d7c:	4b7e      	ldr	r3, [pc, #504]	; (8006f78 <get_st_biases+0x2b8>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	7dd9      	ldrb	r1, [r3, #23]
 8006d82:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8006d86:	2201      	movs	r2, #1
 8006d88:	f7fe fb51 	bl	800542e <MPU_Write_Len>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d002      	beq.n	8006d98 <get_st_biases+0xd8>
        return -1;
 8006d92:	f04f 33ff 	mov.w	r3, #4294967295
 8006d96:	e301      	b.n	800739c <get_st_biases+0x6dc>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
 8006d98:	4b77      	ldr	r3, [pc, #476]	; (8006f78 <get_st_biases+0x2b8>)
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	7818      	ldrb	r0, [r3, #0]
 8006d9e:	4b76      	ldr	r3, [pc, #472]	; (8006f78 <get_st_biases+0x2b8>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	7919      	ldrb	r1, [r3, #4]
 8006da4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8006da8:	2201      	movs	r2, #1
 8006daa:	f7fe fb40 	bl	800542e <MPU_Write_Len>
 8006dae:	4603      	mov	r3, r0
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d002      	beq.n	8006dba <get_st_biases+0xfa>
        return -1;
 8006db4:	f04f 33ff 	mov.w	r3, #4294967295
 8006db8:	e2f0      	b.n	800739c <get_st_biases+0x6dc>
    data[0] = BIT_FIFO_RST | BIT_DMP_RST;
 8006dba:	230c      	movs	r3, #12
 8006dbc:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
 8006dc0:	4b6d      	ldr	r3, [pc, #436]	; (8006f78 <get_st_biases+0x2b8>)
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	7818      	ldrb	r0, [r3, #0]
 8006dc6:	4b6c      	ldr	r3, [pc, #432]	; (8006f78 <get_st_biases+0x2b8>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	7919      	ldrb	r1, [r3, #4]
 8006dcc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	f7fe fb2c 	bl	800542e <MPU_Write_Len>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d002      	beq.n	8006de2 <get_st_biases+0x122>
        return -1;
 8006ddc:	f04f 33ff 	mov.w	r3, #4294967295
 8006de0:	e2dc      	b.n	800739c <get_st_biases+0x6dc>
    delay_ms(15);
 8006de2:	200f      	movs	r0, #15
 8006de4:	f7fb f8fe 	bl	8001fe4 <HAL_msDelay>
    data[0] = st.test->reg_lpf;
 8006de8:	4b63      	ldr	r3, [pc, #396]	; (8006f78 <get_st_biases+0x2b8>)
 8006dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dec:	7a5b      	ldrb	r3, [r3, #9]
 8006dee:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, data))
 8006df2:	4b61      	ldr	r3, [pc, #388]	; (8006f78 <get_st_biases+0x2b8>)
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	7818      	ldrb	r0, [r3, #0]
 8006df8:	4b5f      	ldr	r3, [pc, #380]	; (8006f78 <get_st_biases+0x2b8>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	7899      	ldrb	r1, [r3, #2]
 8006dfe:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8006e02:	2201      	movs	r2, #1
 8006e04:	f7fe fb13 	bl	800542e <MPU_Write_Len>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d002      	beq.n	8006e14 <get_st_biases+0x154>
        return -1;
 8006e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8006e12:	e2c3      	b.n	800739c <get_st_biases+0x6dc>
    data[0] = st.test->reg_rate_div;
 8006e14:	4b58      	ldr	r3, [pc, #352]	; (8006f78 <get_st_biases+0x2b8>)
 8006e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e18:	7a1b      	ldrb	r3, [r3, #8]
 8006e1a:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    if (i2c_write(st.hw->addr, st.reg->rate_div, 1, data))
 8006e1e:	4b56      	ldr	r3, [pc, #344]	; (8006f78 <get_st_biases+0x2b8>)
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	7818      	ldrb	r0, [r3, #0]
 8006e24:	4b54      	ldr	r3, [pc, #336]	; (8006f78 <get_st_biases+0x2b8>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	7859      	ldrb	r1, [r3, #1]
 8006e2a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8006e2e:	2201      	movs	r2, #1
 8006e30:	f7fe fafd 	bl	800542e <MPU_Write_Len>
 8006e34:	4603      	mov	r3, r0
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d002      	beq.n	8006e40 <get_st_biases+0x180>
        return -1;
 8006e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8006e3e:	e2ad      	b.n	800739c <get_st_biases+0x6dc>
    if (hw_test)
 8006e40:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d008      	beq.n	8006e5a <get_st_biases+0x19a>
        data[0] = st.test->reg_gyro_fsr | 0xE0;
 8006e48:	4b4b      	ldr	r3, [pc, #300]	; (8006f78 <get_st_biases+0x2b8>)
 8006e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e4c:	7a9b      	ldrb	r3, [r3, #10]
 8006e4e:	f063 031f 	orn	r3, r3, #31
 8006e52:	b2db      	uxtb	r3, r3
 8006e54:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
 8006e58:	e004      	b.n	8006e64 <get_st_biases+0x1a4>
    else
        data[0] = st.test->reg_gyro_fsr;
 8006e5a:	4b47      	ldr	r3, [pc, #284]	; (8006f78 <get_st_biases+0x2b8>)
 8006e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e5e:	7a9b      	ldrb	r3, [r3, #10]
 8006e60:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, data))
 8006e64:	4b44      	ldr	r3, [pc, #272]	; (8006f78 <get_st_biases+0x2b8>)
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	7818      	ldrb	r0, [r3, #0]
 8006e6a:	4b43      	ldr	r3, [pc, #268]	; (8006f78 <get_st_biases+0x2b8>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	7999      	ldrb	r1, [r3, #6]
 8006e70:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8006e74:	2201      	movs	r2, #1
 8006e76:	f7fe fada 	bl	800542e <MPU_Write_Len>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d002      	beq.n	8006e86 <get_st_biases+0x1c6>
        return -1;
 8006e80:	f04f 33ff 	mov.w	r3, #4294967295
 8006e84:	e28a      	b.n	800739c <get_st_biases+0x6dc>

    if (hw_test)
 8006e86:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d008      	beq.n	8006ea0 <get_st_biases+0x1e0>
        data[0] = st.test->reg_accel_fsr | 0xE0;
 8006e8e:	4b3a      	ldr	r3, [pc, #232]	; (8006f78 <get_st_biases+0x2b8>)
 8006e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e92:	7adb      	ldrb	r3, [r3, #11]
 8006e94:	f063 031f 	orn	r3, r3, #31
 8006e98:	b2db      	uxtb	r3, r3
 8006e9a:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
 8006e9e:	e002      	b.n	8006ea6 <get_st_biases+0x1e6>
    else
        data[0] = test.reg_accel_fsr;
 8006ea0:	2318      	movs	r3, #24
 8006ea2:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, data))
 8006ea6:	4b34      	ldr	r3, [pc, #208]	; (8006f78 <get_st_biases+0x2b8>)
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	7818      	ldrb	r0, [r3, #0]
 8006eac:	4b32      	ldr	r3, [pc, #200]	; (8006f78 <get_st_biases+0x2b8>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	79d9      	ldrb	r1, [r3, #7]
 8006eb2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	f7fe fab9 	bl	800542e <MPU_Write_Len>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d002      	beq.n	8006ec8 <get_st_biases+0x208>
        return -1;
 8006ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8006ec6:	e269      	b.n	800739c <get_st_biases+0x6dc>
    if (hw_test)
 8006ec8:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d002      	beq.n	8006ed6 <get_st_biases+0x216>
        delay_ms(200);
 8006ed0:	20c8      	movs	r0, #200	; 0xc8
 8006ed2:	f7fb f887 	bl	8001fe4 <HAL_msDelay>

    /* Fill FIFO for test.wait_ms milliseconds. */
    data[0] = BIT_FIFO_EN;
 8006ed6:	2340      	movs	r3, #64	; 0x40
 8006ed8:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, data))
 8006edc:	4b26      	ldr	r3, [pc, #152]	; (8006f78 <get_st_biases+0x2b8>)
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	7818      	ldrb	r0, [r3, #0]
 8006ee2:	4b25      	ldr	r3, [pc, #148]	; (8006f78 <get_st_biases+0x2b8>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	7919      	ldrb	r1, [r3, #4]
 8006ee8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8006eec:	2201      	movs	r2, #1
 8006eee:	f7fe fa9e 	bl	800542e <MPU_Write_Len>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d002      	beq.n	8006efe <get_st_biases+0x23e>
        return -1;
 8006ef8:	f04f 33ff 	mov.w	r3, #4294967295
 8006efc:	e24e      	b.n	800739c <get_st_biases+0x6dc>

    data[0] = INV_XYZ_GYRO | INV_XYZ_ACCEL;
 8006efe:	2378      	movs	r3, #120	; 0x78
 8006f00:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
 8006f04:	4b1c      	ldr	r3, [pc, #112]	; (8006f78 <get_st_biases+0x2b8>)
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	7818      	ldrb	r0, [r3, #0]
 8006f0a:	4b1b      	ldr	r3, [pc, #108]	; (8006f78 <get_st_biases+0x2b8>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	7959      	ldrb	r1, [r3, #5]
 8006f10:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8006f14:	2201      	movs	r2, #1
 8006f16:	f7fe fa8a 	bl	800542e <MPU_Write_Len>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d002      	beq.n	8006f26 <get_st_biases+0x266>
        return -1;
 8006f20:	f04f 33ff 	mov.w	r3, #4294967295
 8006f24:	e23a      	b.n	800739c <get_st_biases+0x6dc>
    delay_ms(test.wait_ms);
 8006f26:	2332      	movs	r3, #50	; 0x32
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f7fb f85b 	bl	8001fe4 <HAL_msDelay>
    data[0] = 0;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, data))
 8006f34:	4b10      	ldr	r3, [pc, #64]	; (8006f78 <get_st_biases+0x2b8>)
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	7818      	ldrb	r0, [r3, #0]
 8006f3a:	4b0f      	ldr	r3, [pc, #60]	; (8006f78 <get_st_biases+0x2b8>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	7959      	ldrb	r1, [r3, #5]
 8006f40:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8006f44:	2201      	movs	r2, #1
 8006f46:	f7fe fa72 	bl	800542e <MPU_Write_Len>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d002      	beq.n	8006f56 <get_st_biases+0x296>
        return -1;
 8006f50:	f04f 33ff 	mov.w	r3, #4294967295
 8006f54:	e222      	b.n	800739c <get_st_biases+0x6dc>

    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, data))
 8006f56:	4b08      	ldr	r3, [pc, #32]	; (8006f78 <get_st_biases+0x2b8>)
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	7818      	ldrb	r0, [r3, #0]
 8006f5c:	4b06      	ldr	r3, [pc, #24]	; (8006f78 <get_st_biases+0x2b8>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	7a99      	ldrb	r1, [r3, #10]
 8006f62:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8006f66:	2202      	movs	r2, #2
 8006f68:	f7fe faa3 	bl	80054b2 <MPU_Read_Len>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d004      	beq.n	8006f7c <get_st_biases+0x2bc>
        return -1;
 8006f72:	f04f 33ff 	mov.w	r3, #4294967295
 8006f76:	e211      	b.n	800739c <get_st_biases+0x6dc>
 8006f78:	2000000c 	.word	0x2000000c

    fifo_count = (data[0] << 8) | data[1];
 8006f7c:	f897 30cc 	ldrb.w	r3, [r7, #204]	; 0xcc
 8006f80:	021b      	lsls	r3, r3, #8
 8006f82:	b21a      	sxth	r2, r3
 8006f84:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 8006f88:	b21b      	sxth	r3, r3
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	b21b      	sxth	r3, r3
 8006f8e:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
    packet_count = fifo_count / MAX_PACKET_LENGTH;
 8006f92:	f8b7 20dc 	ldrh.w	r2, [r7, #220]	; 0xdc
 8006f96:	4b1d      	ldr	r3, [pc, #116]	; (800700c <get_st_biases+0x34c>)
 8006f98:	fba3 2302 	umull	r2, r3, r3, r2
 8006f9c:	08db      	lsrs	r3, r3, #3
 8006f9e:	b29b      	uxth	r3, r3
 8006fa0:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
    gyro[0] = gyro[1] = gyro[2] = 0;
 8006fa4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006fa8:	f103 0108 	add.w	r1, r3, #8
 8006fac:	2300      	movs	r3, #0
 8006fae:	600b      	str	r3, [r1, #0]
 8006fb0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006fb4:	1d1a      	adds	r2, r3, #4
 8006fb6:	680b      	ldr	r3, [r1, #0]
 8006fb8:	6013      	str	r3, [r2, #0]
 8006fba:	6812      	ldr	r2, [r2, #0]
 8006fbc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006fc0:	601a      	str	r2, [r3, #0]
    accel[0] = accel[1] = accel[2] = 0;
 8006fc2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006fc6:	f103 0108 	add.w	r1, r3, #8
 8006fca:	2300      	movs	r3, #0
 8006fcc:	600b      	str	r3, [r1, #0]
 8006fce:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006fd2:	1d1a      	adds	r2, r3, #4
 8006fd4:	680b      	ldr	r3, [r1, #0]
 8006fd6:	6013      	str	r3, [r2, #0]
 8006fd8:	6812      	ldr	r2, [r2, #0]
 8006fda:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006fde:	601a      	str	r2, [r3, #0]

    for (ii = 0; ii < packet_count; ii++) {
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8006fe6:	e0a0      	b.n	800712a <get_st_biases+0x46a>
        short accel_cur[3], gyro_cur[3];
        if (i2c_read(st.hw->addr, st.reg->fifo_r_w, MAX_PACKET_LENGTH, data))
 8006fe8:	4b09      	ldr	r3, [pc, #36]	; (8007010 <get_st_biases+0x350>)
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	7818      	ldrb	r0, [r3, #0]
 8006fee:	4b08      	ldr	r3, [pc, #32]	; (8007010 <get_st_biases+0x350>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	7ad9      	ldrb	r1, [r3, #11]
 8006ff4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8006ff8:	220c      	movs	r2, #12
 8006ffa:	f7fe fa5a 	bl	80054b2 <MPU_Read_Len>
 8006ffe:	4603      	mov	r3, r0
 8007000:	2b00      	cmp	r3, #0
 8007002:	d007      	beq.n	8007014 <get_st_biases+0x354>
            return -1;
 8007004:	f04f 33ff 	mov.w	r3, #4294967295
 8007008:	e1c8      	b.n	800739c <get_st_biases+0x6dc>
 800700a:	bf00      	nop
 800700c:	aaaaaaab 	.word	0xaaaaaaab
 8007010:	2000000c 	.word	0x2000000c
        accel_cur[0] = ((short)data[0] << 8) | data[1];
 8007014:	f897 30cc 	ldrb.w	r3, [r7, #204]	; 0xcc
 8007018:	021b      	lsls	r3, r3, #8
 800701a:	b21a      	sxth	r2, r3
 800701c:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 8007020:	b21b      	sxth	r3, r3
 8007022:	4313      	orrs	r3, r2
 8007024:	b21b      	sxth	r3, r3
 8007026:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
        accel_cur[1] = ((short)data[2] << 8) | data[3];
 800702a:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 800702e:	021b      	lsls	r3, r3, #8
 8007030:	b21a      	sxth	r2, r3
 8007032:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8007036:	b21b      	sxth	r3, r3
 8007038:	4313      	orrs	r3, r2
 800703a:	b21b      	sxth	r3, r3
 800703c:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
        accel_cur[2] = ((short)data[4] << 8) | data[5];
 8007040:	f897 30d0 	ldrb.w	r3, [r7, #208]	; 0xd0
 8007044:	021b      	lsls	r3, r3, #8
 8007046:	b21a      	sxth	r2, r3
 8007048:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 800704c:	b21b      	sxth	r3, r3
 800704e:	4313      	orrs	r3, r2
 8007050:	b21b      	sxth	r3, r3
 8007052:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
        accel[0] += (long)accel_cur[0];
 8007056:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	f9b7 30c4 	ldrsh.w	r3, [r7, #196]	; 0xc4
 8007060:	441a      	add	r2, r3
 8007062:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007066:	601a      	str	r2, [r3, #0]
        accel[1] += (long)accel_cur[1];
 8007068:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800706c:	3304      	adds	r3, #4
 800706e:	6819      	ldr	r1, [r3, #0]
 8007070:	f9b7 30c6 	ldrsh.w	r3, [r7, #198]	; 0xc6
 8007074:	4618      	mov	r0, r3
 8007076:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800707a:	1d1a      	adds	r2, r3, #4
 800707c:	180b      	adds	r3, r1, r0
 800707e:	6013      	str	r3, [r2, #0]
        accel[2] += (long)accel_cur[2];
 8007080:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007084:	3308      	adds	r3, #8
 8007086:	6819      	ldr	r1, [r3, #0]
 8007088:	f9b7 30c8 	ldrsh.w	r3, [r7, #200]	; 0xc8
 800708c:	4618      	mov	r0, r3
 800708e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007092:	f103 0208 	add.w	r2, r3, #8
 8007096:	180b      	adds	r3, r1, r0
 8007098:	6013      	str	r3, [r2, #0]
        gyro_cur[0] = (((short)data[6] << 8) | data[7]);
 800709a:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800709e:	021b      	lsls	r3, r3, #8
 80070a0:	b21a      	sxth	r2, r3
 80070a2:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80070a6:	b21b      	sxth	r3, r3
 80070a8:	4313      	orrs	r3, r2
 80070aa:	b21b      	sxth	r3, r3
 80070ac:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
        gyro_cur[1] = (((short)data[8] << 8) | data[9]);
 80070b0:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 80070b4:	021b      	lsls	r3, r3, #8
 80070b6:	b21a      	sxth	r2, r3
 80070b8:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 80070bc:	b21b      	sxth	r3, r3
 80070be:	4313      	orrs	r3, r2
 80070c0:	b21b      	sxth	r3, r3
 80070c2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
        gyro_cur[2] = (((short)data[10] << 8) | data[11]);
 80070c6:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 80070ca:	021b      	lsls	r3, r3, #8
 80070cc:	b21a      	sxth	r2, r3
 80070ce:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80070d2:	b21b      	sxth	r3, r3
 80070d4:	4313      	orrs	r3, r2
 80070d6:	b21b      	sxth	r3, r3
 80070d8:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
        gyro[0] += (long)gyro_cur[0];
 80070dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80070e0:	681a      	ldr	r2, [r3, #0]
 80070e2:	f9b7 30bc 	ldrsh.w	r3, [r7, #188]	; 0xbc
 80070e6:	441a      	add	r2, r3
 80070e8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80070ec:	601a      	str	r2, [r3, #0]
        gyro[1] += (long)gyro_cur[1];
 80070ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80070f2:	3304      	adds	r3, #4
 80070f4:	6819      	ldr	r1, [r3, #0]
 80070f6:	f9b7 30be 	ldrsh.w	r3, [r7, #190]	; 0xbe
 80070fa:	4618      	mov	r0, r3
 80070fc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007100:	1d1a      	adds	r2, r3, #4
 8007102:	180b      	adds	r3, r1, r0
 8007104:	6013      	str	r3, [r2, #0]
        gyro[2] += (long)gyro_cur[2];
 8007106:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800710a:	3308      	adds	r3, #8
 800710c:	6819      	ldr	r1, [r3, #0]
 800710e:	f9b7 30c0 	ldrsh.w	r3, [r7, #192]	; 0xc0
 8007112:	4618      	mov	r0, r3
 8007114:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007118:	f103 0208 	add.w	r2, r3, #8
 800711c:	180b      	adds	r3, r1, r0
 800711e:	6013      	str	r3, [r2, #0]
    for (ii = 0; ii < packet_count; ii++) {
 8007120:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8007124:	3301      	adds	r3, #1
 8007126:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 800712a:	f897 20df 	ldrb.w	r2, [r7, #223]	; 0xdf
 800712e:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8007132:	429a      	cmp	r2, r3
 8007134:	f4ff af58 	bcc.w	8006fe8 <get_st_biases+0x328>
            packet_count);
        /* Don't remove gravity! */
        accel[2] -= 65536L;
    }
#else
    gyro[0] = (long)(((long long)gyro[0]<<16) / test.gyro_sens / packet_count);
 8007138:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	17da      	asrs	r2, r3, #31
 8007140:	461c      	mov	r4, r3
 8007142:	4615      	mov	r5, r2
 8007144:	1423      	asrs	r3, r4, #16
 8007146:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800714a:	0423      	lsls	r3, r4, #16
 800714c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007150:	2283      	movs	r2, #131	; 0x83
 8007152:	2300      	movs	r3, #0
 8007154:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8007158:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800715c:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8007160:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8007164:	f7f9 fffa 	bl	800115c <__aeabi_ldivmod>
 8007168:	4602      	mov	r2, r0
 800716a:	460b      	mov	r3, r1
 800716c:	4610      	mov	r0, r2
 800716e:	4619      	mov	r1, r3
 8007170:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8007174:	2200      	movs	r2, #0
 8007176:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800717a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800717e:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8007182:	f7f9 ffeb 	bl	800115c <__aeabi_ldivmod>
 8007186:	4602      	mov	r2, r0
 8007188:	460b      	mov	r3, r1
 800718a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800718e:	601a      	str	r2, [r3, #0]
    gyro[1] = (long)(((long long)gyro[1]<<16) / test.gyro_sens / packet_count);
 8007190:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007194:	3304      	adds	r3, #4
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	17da      	asrs	r2, r3, #31
 800719a:	4698      	mov	r8, r3
 800719c:	4691      	mov	r9, r2
 800719e:	ea4f 4328 	mov.w	r3, r8, asr #16
 80071a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80071a6:	ea4f 4308 	mov.w	r3, r8, lsl #16
 80071aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80071ae:	2283      	movs	r2, #131	; 0x83
 80071b0:	2300      	movs	r3, #0
 80071b2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80071b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80071ba:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80071be:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80071c2:	f7f9 ffcb 	bl	800115c <__aeabi_ldivmod>
 80071c6:	4602      	mov	r2, r0
 80071c8:	460b      	mov	r3, r1
 80071ca:	4610      	mov	r0, r2
 80071cc:	4619      	mov	r1, r3
 80071ce:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80071d2:	2200      	movs	r2, #0
 80071d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80071d6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80071d8:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80071dc:	f7f9 ffbe 	bl	800115c <__aeabi_ldivmod>
 80071e0:	4602      	mov	r2, r0
 80071e2:	460b      	mov	r3, r1
 80071e4:	4610      	mov	r0, r2
 80071e6:	4619      	mov	r1, r3
 80071e8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80071ec:	1d1a      	adds	r2, r3, #4
 80071ee:	4603      	mov	r3, r0
 80071f0:	6013      	str	r3, [r2, #0]
    gyro[2] = (long)(((long long)gyro[2]<<16) / test.gyro_sens / packet_count);
 80071f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80071f6:	3308      	adds	r3, #8
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	17da      	asrs	r2, r3, #31
 80071fc:	469a      	mov	sl, r3
 80071fe:	4693      	mov	fp, r2
 8007200:	ea4f 432a 	mov.w	r3, sl, asr #16
 8007204:	677b      	str	r3, [r7, #116]	; 0x74
 8007206:	ea4f 430a 	mov.w	r3, sl, lsl #16
 800720a:	673b      	str	r3, [r7, #112]	; 0x70
 800720c:	2283      	movs	r2, #131	; 0x83
 800720e:	2300      	movs	r3, #0
 8007210:	66ba      	str	r2, [r7, #104]	; 0x68
 8007212:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007214:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8007218:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800721c:	f7f9 ff9e 	bl	800115c <__aeabi_ldivmod>
 8007220:	4602      	mov	r2, r0
 8007222:	460b      	mov	r3, r1
 8007224:	4610      	mov	r0, r2
 8007226:	4619      	mov	r1, r3
 8007228:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800722c:	2200      	movs	r2, #0
 800722e:	663b      	str	r3, [r7, #96]	; 0x60
 8007230:	667a      	str	r2, [r7, #100]	; 0x64
 8007232:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8007236:	f7f9 ff91 	bl	800115c <__aeabi_ldivmod>
 800723a:	4602      	mov	r2, r0
 800723c:	460b      	mov	r3, r1
 800723e:	4610      	mov	r0, r2
 8007240:	4619      	mov	r1, r3
 8007242:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007246:	f103 0208 	add.w	r2, r3, #8
 800724a:	4603      	mov	r3, r0
 800724c:	6013      	str	r3, [r2, #0]
    accel[0] = (long)(((long long)accel[0]<<16) / test.accel_sens /
 800724e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	17da      	asrs	r2, r3, #31
 8007256:	65bb      	str	r3, [r7, #88]	; 0x58
 8007258:	65fa      	str	r2, [r7, #92]	; 0x5c
 800725a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800725e:	460b      	mov	r3, r1
 8007260:	141b      	asrs	r3, r3, #16
 8007262:	657b      	str	r3, [r7, #84]	; 0x54
 8007264:	460b      	mov	r3, r1
 8007266:	041b      	lsls	r3, r3, #16
 8007268:	653b      	str	r3, [r7, #80]	; 0x50
 800726a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800726e:	2300      	movs	r3, #0
 8007270:	64ba      	str	r2, [r7, #72]	; 0x48
 8007272:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007274:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007278:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800727c:	f7f9 ff6e 	bl	800115c <__aeabi_ldivmod>
 8007280:	4602      	mov	r2, r0
 8007282:	460b      	mov	r3, r1
 8007284:	4610      	mov	r0, r2
 8007286:	4619      	mov	r1, r3
 8007288:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800728c:	2200      	movs	r2, #0
 800728e:	643b      	str	r3, [r7, #64]	; 0x40
 8007290:	647a      	str	r2, [r7, #68]	; 0x44
 8007292:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007296:	f7f9 ff61 	bl	800115c <__aeabi_ldivmod>
 800729a:	4602      	mov	r2, r0
 800729c:	460b      	mov	r3, r1
 800729e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80072a2:	601a      	str	r2, [r3, #0]
        packet_count);
    accel[1] = (long)(((long long)accel[1]<<16) / test.accel_sens /
 80072a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80072a8:	3304      	adds	r3, #4
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	17da      	asrs	r2, r3, #31
 80072ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80072b0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80072b2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80072b6:	460b      	mov	r3, r1
 80072b8:	141b      	asrs	r3, r3, #16
 80072ba:	637b      	str	r3, [r7, #52]	; 0x34
 80072bc:	460b      	mov	r3, r1
 80072be:	041b      	lsls	r3, r3, #16
 80072c0:	633b      	str	r3, [r7, #48]	; 0x30
 80072c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80072c6:	2300      	movs	r3, #0
 80072c8:	62ba      	str	r2, [r7, #40]	; 0x28
 80072ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80072d0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80072d4:	f7f9 ff42 	bl	800115c <__aeabi_ldivmod>
 80072d8:	4602      	mov	r2, r0
 80072da:	460b      	mov	r3, r1
 80072dc:	4610      	mov	r0, r2
 80072de:	4619      	mov	r1, r3
 80072e0:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80072e4:	2200      	movs	r2, #0
 80072e6:	623b      	str	r3, [r7, #32]
 80072e8:	627a      	str	r2, [r7, #36]	; 0x24
 80072ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80072ee:	f7f9 ff35 	bl	800115c <__aeabi_ldivmod>
 80072f2:	4602      	mov	r2, r0
 80072f4:	460b      	mov	r3, r1
 80072f6:	4610      	mov	r0, r2
 80072f8:	4619      	mov	r1, r3
 80072fa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80072fe:	3304      	adds	r3, #4
 8007300:	4602      	mov	r2, r0
 8007302:	601a      	str	r2, [r3, #0]
        packet_count);
    accel[2] = (long)(((long long)accel[2]<<16) / test.accel_sens /
 8007304:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007308:	3308      	adds	r3, #8
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	17da      	asrs	r2, r3, #31
 800730e:	61bb      	str	r3, [r7, #24]
 8007310:	61fa      	str	r2, [r7, #28]
 8007312:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007316:	460b      	mov	r3, r1
 8007318:	141b      	asrs	r3, r3, #16
 800731a:	617b      	str	r3, [r7, #20]
 800731c:	460b      	mov	r3, r1
 800731e:	041b      	lsls	r3, r3, #16
 8007320:	613b      	str	r3, [r7, #16]
 8007322:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007326:	2300      	movs	r3, #0
 8007328:	60ba      	str	r2, [r7, #8]
 800732a:	60fb      	str	r3, [r7, #12]
 800732c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007330:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007334:	f7f9 ff12 	bl	800115c <__aeabi_ldivmod>
 8007338:	4602      	mov	r2, r0
 800733a:	460b      	mov	r3, r1
 800733c:	4610      	mov	r0, r2
 800733e:	4619      	mov	r1, r3
 8007340:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8007344:	2200      	movs	r2, #0
 8007346:	603b      	str	r3, [r7, #0]
 8007348:	607a      	str	r2, [r7, #4]
 800734a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800734e:	f7f9 ff05 	bl	800115c <__aeabi_ldivmod>
 8007352:	4602      	mov	r2, r0
 8007354:	460b      	mov	r3, r1
 8007356:	4610      	mov	r0, r2
 8007358:	4619      	mov	r1, r3
 800735a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800735e:	3308      	adds	r3, #8
 8007360:	4602      	mov	r2, r0
 8007362:	601a      	str	r2, [r3, #0]
        packet_count);
    /* Don't remove gravity! */
    if (accel[2] > 0L)
 8007364:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007368:	3308      	adds	r3, #8
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	2b00      	cmp	r3, #0
 800736e:	dd0a      	ble.n	8007386 <get_st_biases+0x6c6>
        accel[2] -= 65536L;
 8007370:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007374:	3308      	adds	r3, #8
 8007376:	681a      	ldr	r2, [r3, #0]
 8007378:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800737c:	3308      	adds	r3, #8
 800737e:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 8007382:	601a      	str	r2, [r3, #0]
 8007384:	e009      	b.n	800739a <get_st_biases+0x6da>
    else
        accel[2] += 65536L;
 8007386:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800738a:	3308      	adds	r3, #8
 800738c:	681a      	ldr	r2, [r3, #0]
 800738e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007392:	3308      	adds	r3, #8
 8007394:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8007398:	601a      	str	r2, [r3, #0]
#endif

    return 0;
 800739a:	2300      	movs	r3, #0
}
 800739c:	4618      	mov	r0, r3
 800739e:	37e0      	adds	r7, #224	; 0xe0
 80073a0:	46bd      	mov	sp, r7
 80073a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80073a6:	bf00      	nop

080073a8 <mpu_run_self_test>:
 *  @param[out] gyro        Gyro biases in q16 format.
 *  @param[out] accel       Accel biases (if applicable) in q16 format.
 *  @return     Result mask (see above).
 */
int mpu_run_self_test(long *gyro, long *accel)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b08e      	sub	sp, #56	; 0x38
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	6039      	str	r1, [r7, #0]
#ifdef MPU6050
    const unsigned char tries = 2;
 80073b2:	2302      	movs	r3, #2
 80073b4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int result;
    unsigned char accel_fsr, fifo_sensors, sensors_on;
    unsigned short gyro_fsr, sample_rate, lpf;
    unsigned char dmp_was_on;

    if (st.chip_cfg.dmp_on) {
 80073b8:	4b64      	ldr	r3, [pc, #400]	; (800754c <mpu_run_self_test+0x1a4>)
 80073ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d006      	beq.n	80073d0 <mpu_run_self_test+0x28>
        mpu_set_dmp_state(0);
 80073c2:	2000      	movs	r0, #0
 80073c4:	f000 f9e6 	bl	8007794 <mpu_set_dmp_state>
        dmp_was_on = 1;
 80073c8:	2301      	movs	r3, #1
 80073ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80073ce:	e002      	b.n	80073d6 <mpu_run_self_test+0x2e>
    } else
        dmp_was_on = 0;
 80073d0:	2300      	movs	r3, #0
 80073d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Get initial settings. */
    mpu_get_gyro_fsr(&gyro_fsr);
 80073d6:	f107 030c 	add.w	r3, r7, #12
 80073da:	4618      	mov	r0, r3
 80073dc:	f7fe fd8c 	bl	8005ef8 <mpu_get_gyro_fsr>
    mpu_get_accel_fsr(&accel_fsr);
 80073e0:	f107 030f 	add.w	r3, r7, #15
 80073e4:	4618      	mov	r0, r3
 80073e6:	f7fe fe0f 	bl	8006008 <mpu_get_accel_fsr>
    mpu_get_lpf(&lpf);
 80073ea:	f107 0308 	add.w	r3, r7, #8
 80073ee:	4618      	mov	r0, r3
 80073f0:	f7fe feac 	bl	800614c <mpu_get_lpf>
    mpu_get_sample_rate(&sample_rate);
 80073f4:	f107 030a 	add.w	r3, r7, #10
 80073f8:	4618      	mov	r0, r3
 80073fa:	f7fe ff31 	bl	8006260 <mpu_get_sample_rate>
    sensors_on = st.chip_cfg.sensors;
 80073fe:	4b53      	ldr	r3, [pc, #332]	; (800754c <mpu_run_self_test+0x1a4>)
 8007400:	7a9b      	ldrb	r3, [r3, #10]
 8007402:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    mpu_get_fifo_config(&fifo_sensors);
 8007406:	f107 030e 	add.w	r3, r7, #14
 800740a:	4618      	mov	r0, r3
 800740c:	f7ff f81c 	bl	8006448 <mpu_get_fifo_config>

    /* For older chips, the self-test will be different. */
#if defined MPU6050
    for (ii = 0; ii < tries; ii++)
 8007410:	2300      	movs	r3, #0
 8007412:	637b      	str	r3, [r7, #52]	; 0x34
 8007414:	e00a      	b.n	800742c <mpu_run_self_test+0x84>
        if (!get_st_biases(gyro, accel, 0))
 8007416:	2200      	movs	r2, #0
 8007418:	6839      	ldr	r1, [r7, #0]
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f7ff fc50 	bl	8006cc0 <get_st_biases>
 8007420:	4603      	mov	r3, r0
 8007422:	2b00      	cmp	r3, #0
 8007424:	d008      	beq.n	8007438 <mpu_run_self_test+0x90>
    for (ii = 0; ii < tries; ii++)
 8007426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007428:	3301      	adds	r3, #1
 800742a:	637b      	str	r3, [r7, #52]	; 0x34
 800742c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007430:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007432:	429a      	cmp	r2, r3
 8007434:	dbef      	blt.n	8007416 <mpu_run_self_test+0x6e>
 8007436:	e000      	b.n	800743a <mpu_run_self_test+0x92>
            break;
 8007438:	bf00      	nop
    if (ii == tries) {
 800743a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800743e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007440:	429a      	cmp	r2, r3
 8007442:	d102      	bne.n	800744a <mpu_run_self_test+0xa2>
        /* If we reach this point, we most likely encountered an I2C error.
         * We'll just report an error for all three sensors.
         */
        result = 0;
 8007444:	2300      	movs	r3, #0
 8007446:	633b      	str	r3, [r7, #48]	; 0x30
        goto restore;
 8007448:	e045      	b.n	80074d6 <mpu_run_self_test+0x12e>
    }
    for (ii = 0; ii < tries; ii++)
 800744a:	2300      	movs	r3, #0
 800744c:	637b      	str	r3, [r7, #52]	; 0x34
 800744e:	e00d      	b.n	800746c <mpu_run_self_test+0xc4>
        if (!get_st_biases(gyro_st, accel_st, 1))
 8007450:	f107 0110 	add.w	r1, r7, #16
 8007454:	f107 031c 	add.w	r3, r7, #28
 8007458:	2201      	movs	r2, #1
 800745a:	4618      	mov	r0, r3
 800745c:	f7ff fc30 	bl	8006cc0 <get_st_biases>
 8007460:	4603      	mov	r3, r0
 8007462:	2b00      	cmp	r3, #0
 8007464:	d008      	beq.n	8007478 <mpu_run_self_test+0xd0>
    for (ii = 0; ii < tries; ii++)
 8007466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007468:	3301      	adds	r3, #1
 800746a:	637b      	str	r3, [r7, #52]	; 0x34
 800746c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007470:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007472:	429a      	cmp	r2, r3
 8007474:	dbec      	blt.n	8007450 <mpu_run_self_test+0xa8>
 8007476:	e000      	b.n	800747a <mpu_run_self_test+0xd2>
            break;
 8007478:	bf00      	nop
    if (ii == tries) {
 800747a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800747e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007480:	429a      	cmp	r2, r3
 8007482:	d102      	bne.n	800748a <mpu_run_self_test+0xe2>
        /* Again, probably an I2C error. */
        result = 0;
 8007484:	2300      	movs	r3, #0
 8007486:	633b      	str	r3, [r7, #48]	; 0x30
        goto restore;
 8007488:	e025      	b.n	80074d6 <mpu_run_self_test+0x12e>
    }
    accel_result = accel_self_test(accel, accel_st);
 800748a:	f107 0310 	add.w	r3, r7, #16
 800748e:	4619      	mov	r1, r3
 8007490:	6838      	ldr	r0, [r7, #0]
 8007492:	f7ff fad5 	bl	8006a40 <accel_self_test>
 8007496:	4603      	mov	r3, r0
 8007498:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    gyro_result = gyro_self_test(gyro, gyro_st);
 800749c:	f107 031c 	add.w	r3, r7, #28
 80074a0:	4619      	mov	r1, r3
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f7ff fb50 	bl	8006b48 <gyro_self_test>
 80074a8:	4603      	mov	r3, r0
 80074aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    result = 0;
 80074ae:	2300      	movs	r3, #0
 80074b0:	633b      	str	r3, [r7, #48]	; 0x30
    if (!gyro_result)
 80074b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d103      	bne.n	80074c2 <mpu_run_self_test+0x11a>
        result |= 0x01;
 80074ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074bc:	f043 0301 	orr.w	r3, r3, #1
 80074c0:	633b      	str	r3, [r7, #48]	; 0x30
    if (!accel_result)
 80074c2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d104      	bne.n	80074d4 <mpu_run_self_test+0x12c>
        result |= 0x02;
 80074ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074cc:	f043 0302 	orr.w	r3, r3, #2
 80074d0:	633b      	str	r3, [r7, #48]	; 0x30
 80074d2:	e000      	b.n	80074d6 <mpu_run_self_test+0x12e>
#ifdef AK89xx_SECONDARY
    compass_result = compass_self_test();
    if (!compass_result)
        result |= 0x04;
#endif
restore:
 80074d4:	bf00      	nop
     */
    get_st_biases(gyro, accel, 0);
    result = 0x7;
#endif
    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.gyro_fsr = 0xFF;
 80074d6:	4b1d      	ldr	r3, [pc, #116]	; (800754c <mpu_run_self_test+0x1a4>)
 80074d8:	22ff      	movs	r2, #255	; 0xff
 80074da:	721a      	strb	r2, [r3, #8]
    st.chip_cfg.accel_fsr = 0xFF;
 80074dc:	4b1b      	ldr	r3, [pc, #108]	; (800754c <mpu_run_self_test+0x1a4>)
 80074de:	22ff      	movs	r2, #255	; 0xff
 80074e0:	725a      	strb	r2, [r3, #9]
    st.chip_cfg.lpf = 0xFF;
 80074e2:	4b1a      	ldr	r3, [pc, #104]	; (800754c <mpu_run_self_test+0x1a4>)
 80074e4:	22ff      	movs	r2, #255	; 0xff
 80074e6:	72da      	strb	r2, [r3, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
 80074e8:	4b18      	ldr	r3, [pc, #96]	; (800754c <mpu_run_self_test+0x1a4>)
 80074ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80074ee:	81da      	strh	r2, [r3, #14]
    st.chip_cfg.sensors = 0xFF;
 80074f0:	4b16      	ldr	r3, [pc, #88]	; (800754c <mpu_run_self_test+0x1a4>)
 80074f2:	22ff      	movs	r2, #255	; 0xff
 80074f4:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.fifo_enable = 0xFF;
 80074f6:	4b15      	ldr	r3, [pc, #84]	; (800754c <mpu_run_self_test+0x1a4>)
 80074f8:	22ff      	movs	r2, #255	; 0xff
 80074fa:	741a      	strb	r2, [r3, #16]
    st.chip_cfg.clk_src = INV_CLK_PLL;
 80074fc:	4b13      	ldr	r3, [pc, #76]	; (800754c <mpu_run_self_test+0x1a4>)
 80074fe:	2201      	movs	r2, #1
 8007500:	731a      	strb	r2, [r3, #12]
    mpu_set_gyro_fsr(gyro_fsr);
 8007502:	89bb      	ldrh	r3, [r7, #12]
 8007504:	4618      	mov	r0, r3
 8007506:	f7fe fd2b 	bl	8005f60 <mpu_set_gyro_fsr>
    mpu_set_accel_fsr(accel_fsr);
 800750a:	7bfb      	ldrb	r3, [r7, #15]
 800750c:	4618      	mov	r0, r3
 800750e:	f7fe fdb5 	bl	800607c <mpu_set_accel_fsr>
    mpu_set_lpf(lpf);
 8007512:	893b      	ldrh	r3, [r7, #8]
 8007514:	4618      	mov	r0, r3
 8007516:	f7fe fe55 	bl	80061c4 <mpu_set_lpf>
    mpu_set_sample_rate(sample_rate);
 800751a:	897b      	ldrh	r3, [r7, #10]
 800751c:	4618      	mov	r0, r3
 800751e:	f7fe feb7 	bl	8006290 <mpu_set_sample_rate>
    mpu_set_sensors(sensors_on);
 8007522:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007526:	4618      	mov	r0, r3
 8007528:	f7fe fff0 	bl	800650c <mpu_set_sensors>
    mpu_configure_fifo(fifo_sensors);
 800752c:	7bbb      	ldrb	r3, [r7, #14]
 800752e:	4618      	mov	r0, r3
 8007530:	f7fe ff9a 	bl	8006468 <mpu_configure_fifo>

    if (dmp_was_on)
 8007534:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007538:	2b00      	cmp	r3, #0
 800753a:	d002      	beq.n	8007542 <mpu_run_self_test+0x19a>
        mpu_set_dmp_state(1);
 800753c:	2001      	movs	r0, #1
 800753e:	f000 f929 	bl	8007794 <mpu_set_dmp_state>

    return result;
 8007542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8007544:	4618      	mov	r0, r3
 8007546:	3738      	adds	r7, #56	; 0x38
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}
 800754c:	2000000c 	.word	0x2000000c

08007550 <mpu_write_mem>:
 *  @param[in]  data        Bytes to write to memory.
 *  @return     0 if successful.
 */
int mpu_write_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b084      	sub	sp, #16
 8007554:	af00      	add	r7, sp, #0
 8007556:	4603      	mov	r3, r0
 8007558:	603a      	str	r2, [r7, #0]
 800755a:	80fb      	strh	r3, [r7, #6]
 800755c:	460b      	mov	r3, r1
 800755e:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[2];

    if (!data)
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d102      	bne.n	800756c <mpu_write_mem+0x1c>
        return -1;
 8007566:	f04f 33ff 	mov.w	r3, #4294967295
 800756a:	e03d      	b.n	80075e8 <mpu_write_mem+0x98>
    if (!st.chip_cfg.sensors)
 800756c:	4b20      	ldr	r3, [pc, #128]	; (80075f0 <mpu_write_mem+0xa0>)
 800756e:	7a9b      	ldrb	r3, [r3, #10]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d102      	bne.n	800757a <mpu_write_mem+0x2a>
        return -1;
 8007574:	f04f 33ff 	mov.w	r3, #4294967295
 8007578:	e036      	b.n	80075e8 <mpu_write_mem+0x98>

    tmp[0] = (unsigned char)(mem_addr >> 8);
 800757a:	88fb      	ldrh	r3, [r7, #6]
 800757c:	0a1b      	lsrs	r3, r3, #8
 800757e:	b29b      	uxth	r3, r3
 8007580:	b2db      	uxtb	r3, r3
 8007582:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 8007584:	88fb      	ldrh	r3, [r7, #6]
 8007586:	b2db      	uxtb	r3, r3
 8007588:	737b      	strb	r3, [r7, #13]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
 800758a:	7b7b      	ldrb	r3, [r7, #13]
 800758c:	461a      	mov	r2, r3
 800758e:	88bb      	ldrh	r3, [r7, #4]
 8007590:	4413      	add	r3, r2
 8007592:	4a17      	ldr	r2, [pc, #92]	; (80075f0 <mpu_write_mem+0xa0>)
 8007594:	6852      	ldr	r2, [r2, #4]
 8007596:	8952      	ldrh	r2, [r2, #10]
 8007598:	4293      	cmp	r3, r2
 800759a:	dd02      	ble.n	80075a2 <mpu_write_mem+0x52>
        return -1;
 800759c:	f04f 33ff 	mov.w	r3, #4294967295
 80075a0:	e022      	b.n	80075e8 <mpu_write_mem+0x98>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 80075a2:	4b13      	ldr	r3, [pc, #76]	; (80075f0 <mpu_write_mem+0xa0>)
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	7818      	ldrb	r0, [r3, #0]
 80075a8:	4b11      	ldr	r3, [pc, #68]	; (80075f0 <mpu_write_mem+0xa0>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	7e19      	ldrb	r1, [r3, #24]
 80075ae:	f107 030c 	add.w	r3, r7, #12
 80075b2:	2202      	movs	r2, #2
 80075b4:	f7fd ff3b 	bl	800542e <MPU_Write_Len>
 80075b8:	4603      	mov	r3, r0
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d002      	beq.n	80075c4 <mpu_write_mem+0x74>
        return -1;
 80075be:	f04f 33ff 	mov.w	r3, #4294967295
 80075c2:	e011      	b.n	80075e8 <mpu_write_mem+0x98>
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
 80075c4:	4b0a      	ldr	r3, [pc, #40]	; (80075f0 <mpu_write_mem+0xa0>)
 80075c6:	685b      	ldr	r3, [r3, #4]
 80075c8:	7818      	ldrb	r0, [r3, #0]
 80075ca:	4b09      	ldr	r3, [pc, #36]	; (80075f0 <mpu_write_mem+0xa0>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	7d59      	ldrb	r1, [r3, #21]
 80075d0:	88bb      	ldrh	r3, [r7, #4]
 80075d2:	b2da      	uxtb	r2, r3
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	f7fd ff2a 	bl	800542e <MPU_Write_Len>
 80075da:	4603      	mov	r3, r0
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d002      	beq.n	80075e6 <mpu_write_mem+0x96>
        return -1;
 80075e0:	f04f 33ff 	mov.w	r3, #4294967295
 80075e4:	e000      	b.n	80075e8 <mpu_write_mem+0x98>
    return 0;
 80075e6:	2300      	movs	r3, #0
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3710      	adds	r7, #16
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}
 80075f0:	2000000c 	.word	0x2000000c

080075f4 <mpu_read_mem>:
 *  @param[out] data        Bytes read from memory.
 *  @return     0 if successful.
 */
int mpu_read_mem(unsigned short mem_addr, unsigned short length,
        unsigned char *data)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b084      	sub	sp, #16
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	4603      	mov	r3, r0
 80075fc:	603a      	str	r2, [r7, #0]
 80075fe:	80fb      	strh	r3, [r7, #6]
 8007600:	460b      	mov	r3, r1
 8007602:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[2];

    if (!data)
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d102      	bne.n	8007610 <mpu_read_mem+0x1c>
        return -1;
 800760a:	f04f 33ff 	mov.w	r3, #4294967295
 800760e:	e03d      	b.n	800768c <mpu_read_mem+0x98>
    if (!st.chip_cfg.sensors)
 8007610:	4b20      	ldr	r3, [pc, #128]	; (8007694 <mpu_read_mem+0xa0>)
 8007612:	7a9b      	ldrb	r3, [r3, #10]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d102      	bne.n	800761e <mpu_read_mem+0x2a>
        return -1;
 8007618:	f04f 33ff 	mov.w	r3, #4294967295
 800761c:	e036      	b.n	800768c <mpu_read_mem+0x98>

    tmp[0] = (unsigned char)(mem_addr >> 8);
 800761e:	88fb      	ldrh	r3, [r7, #6]
 8007620:	0a1b      	lsrs	r3, r3, #8
 8007622:	b29b      	uxth	r3, r3
 8007624:	b2db      	uxtb	r3, r3
 8007626:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 8007628:	88fb      	ldrh	r3, [r7, #6]
 800762a:	b2db      	uxtb	r3, r3
 800762c:	737b      	strb	r3, [r7, #13]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
 800762e:	7b7b      	ldrb	r3, [r7, #13]
 8007630:	461a      	mov	r2, r3
 8007632:	88bb      	ldrh	r3, [r7, #4]
 8007634:	4413      	add	r3, r2
 8007636:	4a17      	ldr	r2, [pc, #92]	; (8007694 <mpu_read_mem+0xa0>)
 8007638:	6852      	ldr	r2, [r2, #4]
 800763a:	8952      	ldrh	r2, [r2, #10]
 800763c:	4293      	cmp	r3, r2
 800763e:	dd02      	ble.n	8007646 <mpu_read_mem+0x52>
        return -1;
 8007640:	f04f 33ff 	mov.w	r3, #4294967295
 8007644:	e022      	b.n	800768c <mpu_read_mem+0x98>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 8007646:	4b13      	ldr	r3, [pc, #76]	; (8007694 <mpu_read_mem+0xa0>)
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	7818      	ldrb	r0, [r3, #0]
 800764c:	4b11      	ldr	r3, [pc, #68]	; (8007694 <mpu_read_mem+0xa0>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	7e19      	ldrb	r1, [r3, #24]
 8007652:	f107 030c 	add.w	r3, r7, #12
 8007656:	2202      	movs	r2, #2
 8007658:	f7fd fee9 	bl	800542e <MPU_Write_Len>
 800765c:	4603      	mov	r3, r0
 800765e:	2b00      	cmp	r3, #0
 8007660:	d002      	beq.n	8007668 <mpu_read_mem+0x74>
        return -1;
 8007662:	f04f 33ff 	mov.w	r3, #4294967295
 8007666:	e011      	b.n	800768c <mpu_read_mem+0x98>
    if (i2c_read(st.hw->addr, st.reg->mem_r_w, length, data))
 8007668:	4b0a      	ldr	r3, [pc, #40]	; (8007694 <mpu_read_mem+0xa0>)
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	7818      	ldrb	r0, [r3, #0]
 800766e:	4b09      	ldr	r3, [pc, #36]	; (8007694 <mpu_read_mem+0xa0>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	7d59      	ldrb	r1, [r3, #21]
 8007674:	88bb      	ldrh	r3, [r7, #4]
 8007676:	b2da      	uxtb	r2, r3
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	f7fd ff1a 	bl	80054b2 <MPU_Read_Len>
 800767e:	4603      	mov	r3, r0
 8007680:	2b00      	cmp	r3, #0
 8007682:	d002      	beq.n	800768a <mpu_read_mem+0x96>
        return -1;
 8007684:	f04f 33ff 	mov.w	r3, #4294967295
 8007688:	e000      	b.n	800768c <mpu_read_mem+0x98>
    return 0;
 800768a:	2300      	movs	r3, #0
}
 800768c:	4618      	mov	r0, r3
 800768e:	3710      	adds	r7, #16
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}
 8007694:	2000000c 	.word	0x2000000c

08007698 <mpu_load_firmware>:
 *  @param[in]  sample_rate Fixed sampling rate used when DMP is enabled.
 *  @return     0 if successful.
 */
int mpu_load_firmware(unsigned short length, const unsigned char *firmware,
    unsigned short start_addr, unsigned short sample_rate)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b08a      	sub	sp, #40	; 0x28
 800769c:	af00      	add	r7, sp, #0
 800769e:	60b9      	str	r1, [r7, #8]
 80076a0:	4611      	mov	r1, r2
 80076a2:	461a      	mov	r2, r3
 80076a4:	4603      	mov	r3, r0
 80076a6:	81fb      	strh	r3, [r7, #14]
 80076a8:	460b      	mov	r3, r1
 80076aa:	81bb      	strh	r3, [r7, #12]
 80076ac:	4613      	mov	r3, r2
 80076ae:	80fb      	strh	r3, [r7, #6]
    unsigned short this_write;
    /* Must divide evenly into st.hw->bank_size to avoid bank crossings. */
#define LOAD_CHUNK  (16)
    unsigned char cur[LOAD_CHUNK], tmp[2];

    if (st.chip_cfg.dmp_loaded)
 80076b0:	4b37      	ldr	r3, [pc, #220]	; (8007790 <mpu_load_firmware+0xf8>)
 80076b2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d002      	beq.n	80076c0 <mpu_load_firmware+0x28>
        /* DMP should only be loaded once. */
        return -1;
 80076ba:	f04f 33ff 	mov.w	r3, #4294967295
 80076be:	e062      	b.n	8007786 <mpu_load_firmware+0xee>

    if (!firmware)
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d102      	bne.n	80076cc <mpu_load_firmware+0x34>
        return -1;
 80076c6:	f04f 33ff 	mov.w	r3, #4294967295
 80076ca:	e05c      	b.n	8007786 <mpu_load_firmware+0xee>
    for (ii = 0; ii < length; ii += this_write) {
 80076cc:	2300      	movs	r3, #0
 80076ce:	84fb      	strh	r3, [r7, #38]	; 0x26
 80076d0:	e034      	b.n	800773c <mpu_load_firmware+0xa4>
        this_write = min(LOAD_CHUNK, length - ii);
 80076d2:	89fa      	ldrh	r2, [r7, #14]
 80076d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80076d6:	1ad3      	subs	r3, r2, r3
 80076d8:	2b10      	cmp	r3, #16
 80076da:	bfa8      	it	ge
 80076dc:	2310      	movge	r3, #16
 80076de:	84bb      	strh	r3, [r7, #36]	; 0x24
        if (mpu_write_mem(ii, this_write, (unsigned char*)&firmware[ii]))
 80076e0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80076e2:	68ba      	ldr	r2, [r7, #8]
 80076e4:	441a      	add	r2, r3
 80076e6:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80076e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80076ea:	4618      	mov	r0, r3
 80076ec:	f7ff ff30 	bl	8007550 <mpu_write_mem>
 80076f0:	4603      	mov	r3, r0
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d002      	beq.n	80076fc <mpu_load_firmware+0x64>
            return -1;
 80076f6:	f04f 33ff 	mov.w	r3, #4294967295
 80076fa:	e044      	b.n	8007786 <mpu_load_firmware+0xee>
        if (mpu_read_mem(ii, this_write, cur))
 80076fc:	f107 0214 	add.w	r2, r7, #20
 8007700:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8007702:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007704:	4618      	mov	r0, r3
 8007706:	f7ff ff75 	bl	80075f4 <mpu_read_mem>
 800770a:	4603      	mov	r3, r0
 800770c:	2b00      	cmp	r3, #0
 800770e:	d002      	beq.n	8007716 <mpu_load_firmware+0x7e>
            return -1;
 8007710:	f04f 33ff 	mov.w	r3, #4294967295
 8007714:	e037      	b.n	8007786 <mpu_load_firmware+0xee>
        if (memcmp(firmware+ii, cur, this_write))
 8007716:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007718:	68ba      	ldr	r2, [r7, #8]
 800771a:	4413      	add	r3, r2
 800771c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800771e:	f107 0114 	add.w	r1, r7, #20
 8007722:	4618      	mov	r0, r3
 8007724:	f002 fa8c 	bl	8009c40 <memcmp>
 8007728:	4603      	mov	r3, r0
 800772a:	2b00      	cmp	r3, #0
 800772c:	d002      	beq.n	8007734 <mpu_load_firmware+0x9c>
            return -2;
 800772e:	f06f 0301 	mvn.w	r3, #1
 8007732:	e028      	b.n	8007786 <mpu_load_firmware+0xee>
    for (ii = 0; ii < length; ii += this_write) {
 8007734:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007736:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007738:	4413      	add	r3, r2
 800773a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800773c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800773e:	89fb      	ldrh	r3, [r7, #14]
 8007740:	429a      	cmp	r2, r3
 8007742:	d3c6      	bcc.n	80076d2 <mpu_load_firmware+0x3a>
    }

    /* Set program start address. */
    tmp[0] = start_addr >> 8;
 8007744:	89bb      	ldrh	r3, [r7, #12]
 8007746:	0a1b      	lsrs	r3, r3, #8
 8007748:	b29b      	uxth	r3, r3
 800774a:	b2db      	uxtb	r3, r3
 800774c:	743b      	strb	r3, [r7, #16]
    tmp[1] = start_addr & 0xFF;
 800774e:	89bb      	ldrh	r3, [r7, #12]
 8007750:	b2db      	uxtb	r3, r3
 8007752:	747b      	strb	r3, [r7, #17]
    if (i2c_write(st.hw->addr, st.reg->prgm_start_h, 2, tmp))
 8007754:	4b0e      	ldr	r3, [pc, #56]	; (8007790 <mpu_load_firmware+0xf8>)
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	7818      	ldrb	r0, [r3, #0]
 800775a:	4b0d      	ldr	r3, [pc, #52]	; (8007790 <mpu_load_firmware+0xf8>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	7e99      	ldrb	r1, [r3, #26]
 8007760:	f107 0310 	add.w	r3, r7, #16
 8007764:	2202      	movs	r2, #2
 8007766:	f7fd fe62 	bl	800542e <MPU_Write_Len>
 800776a:	4603      	mov	r3, r0
 800776c:	2b00      	cmp	r3, #0
 800776e:	d002      	beq.n	8007776 <mpu_load_firmware+0xde>
        return -1;
 8007770:	f04f 33ff 	mov.w	r3, #4294967295
 8007774:	e007      	b.n	8007786 <mpu_load_firmware+0xee>

    st.chip_cfg.dmp_loaded = 1;
 8007776:	4b06      	ldr	r3, [pc, #24]	; (8007790 <mpu_load_firmware+0xf8>)
 8007778:	2201      	movs	r2, #1
 800777a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    st.chip_cfg.dmp_sample_rate = sample_rate;
 800777e:	4a04      	ldr	r2, [pc, #16]	; (8007790 <mpu_load_firmware+0xf8>)
 8007780:	88fb      	ldrh	r3, [r7, #6]
 8007782:	84d3      	strh	r3, [r2, #38]	; 0x26
    return 0;
 8007784:	2300      	movs	r3, #0
}
 8007786:	4618      	mov	r0, r3
 8007788:	3728      	adds	r7, #40	; 0x28
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}
 800778e:	bf00      	nop
 8007790:	2000000c 	.word	0x2000000c

08007794 <mpu_set_dmp_state>:
 *  @brief      Enable/disable DMP support.
 *  @param[in]  enable  1 to turn on the DMP.
 *  @return     0 if successful.
 */
int mpu_set_dmp_state(unsigned char enable)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b084      	sub	sp, #16
 8007798:	af00      	add	r7, sp, #0
 800779a:	4603      	mov	r3, r0
 800779c:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;
    if (st.chip_cfg.dmp_on == enable)
 800779e:	4b26      	ldr	r3, [pc, #152]	; (8007838 <mpu_set_dmp_state+0xa4>)
 80077a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80077a4:	79fa      	ldrb	r2, [r7, #7]
 80077a6:	429a      	cmp	r2, r3
 80077a8:	d101      	bne.n	80077ae <mpu_set_dmp_state+0x1a>
        return 0;
 80077aa:	2300      	movs	r3, #0
 80077ac:	e040      	b.n	8007830 <mpu_set_dmp_state+0x9c>

    if (enable) {
 80077ae:	79fb      	ldrb	r3, [r7, #7]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d027      	beq.n	8007804 <mpu_set_dmp_state+0x70>
        if (!st.chip_cfg.dmp_loaded)
 80077b4:	4b20      	ldr	r3, [pc, #128]	; (8007838 <mpu_set_dmp_state+0xa4>)
 80077b6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d102      	bne.n	80077c4 <mpu_set_dmp_state+0x30>
            return -1;
 80077be:	f04f 33ff 	mov.w	r3, #4294967295
 80077c2:	e035      	b.n	8007830 <mpu_set_dmp_state+0x9c>
        /* Disable data ready interrupt. */
        set_int_enable(0);
 80077c4:	2000      	movs	r0, #0
 80077c6:	f7fe f8a9 	bl	800591c <set_int_enable>
        /* Disable bypass mode. */
        mpu_set_bypass(0);
 80077ca:	2000      	movs	r0, #0
 80077cc:	f7fe ffa2 	bl	8006714 <mpu_set_bypass>
        /* Keep constant sample rate, FIFO rate controlled by DMP. */
        mpu_set_sample_rate(st.chip_cfg.dmp_sample_rate);
 80077d0:	4b19      	ldr	r3, [pc, #100]	; (8007838 <mpu_set_dmp_state+0xa4>)
 80077d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80077d4:	4618      	mov	r0, r3
 80077d6:	f7fe fd5b 	bl	8006290 <mpu_set_sample_rate>
        /* Remove FIFO elements. */
        tmp = 0;
 80077da:	2300      	movs	r3, #0
 80077dc:	73fb      	strb	r3, [r7, #15]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 80077de:	4b16      	ldr	r3, [pc, #88]	; (8007838 <mpu_set_dmp_state+0xa4>)
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	7818      	ldrb	r0, [r3, #0]
 80077e4:	f107 030f 	add.w	r3, r7, #15
 80077e8:	2201      	movs	r2, #1
 80077ea:	2123      	movs	r1, #35	; 0x23
 80077ec:	f7fd fe1f 	bl	800542e <MPU_Write_Len>
        st.chip_cfg.dmp_on = 1;
 80077f0:	4b11      	ldr	r3, [pc, #68]	; (8007838 <mpu_set_dmp_state+0xa4>)
 80077f2:	2201      	movs	r2, #1
 80077f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        /* Enable DMP interrupt. */
        set_int_enable(1);
 80077f8:	2001      	movs	r0, #1
 80077fa:	f7fe f88f 	bl	800591c <set_int_enable>
        mpu_reset_fifo();
 80077fe:	f7fe fa77 	bl	8005cf0 <mpu_reset_fifo>
 8007802:	e014      	b.n	800782e <mpu_set_dmp_state+0x9a>
    } else {
        /* Disable DMP interrupt. */
        set_int_enable(0);
 8007804:	2000      	movs	r0, #0
 8007806:	f7fe f889 	bl	800591c <set_int_enable>
        /* Restore FIFO settings. */
        tmp = st.chip_cfg.fifo_enable;
 800780a:	4b0b      	ldr	r3, [pc, #44]	; (8007838 <mpu_set_dmp_state+0xa4>)
 800780c:	7c1b      	ldrb	r3, [r3, #16]
 800780e:	73fb      	strb	r3, [r7, #15]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 8007810:	4b09      	ldr	r3, [pc, #36]	; (8007838 <mpu_set_dmp_state+0xa4>)
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	7818      	ldrb	r0, [r3, #0]
 8007816:	f107 030f 	add.w	r3, r7, #15
 800781a:	2201      	movs	r2, #1
 800781c:	2123      	movs	r1, #35	; 0x23
 800781e:	f7fd fe06 	bl	800542e <MPU_Write_Len>
        st.chip_cfg.dmp_on = 0;
 8007822:	4b05      	ldr	r3, [pc, #20]	; (8007838 <mpu_set_dmp_state+0xa4>)
 8007824:	2200      	movs	r2, #0
 8007826:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        mpu_reset_fifo();
 800782a:	f7fe fa61 	bl	8005cf0 <mpu_reset_fifo>
    }
    return 0;
 800782e:	2300      	movs	r3, #0
}
 8007830:	4618      	mov	r0, r3
 8007832:	3710      	adds	r7, #16
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}
 8007838:	2000000c 	.word	0x2000000c

0800783c <run_self_test>:
                                           0, 0, 1};
//MPU6050自测试
//返回值:0,正常
//    其他,失败
unsigned char run_self_test(void)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b08a      	sub	sp, #40	; 0x28
 8007840:	af00      	add	r7, sp, #0
	int result;
	//char test_packet[4] = {0};
	long gyro[3], accel[3];
	result = mpu_run_self_test(gyro, accel);
 8007842:	f107 020c 	add.w	r2, r7, #12
 8007846:	f107 0318 	add.w	r3, r7, #24
 800784a:	4611      	mov	r1, r2
 800784c:	4618      	mov	r0, r3
 800784e:	f7ff fdab 	bl	80073a8 <mpu_run_self_test>
 8007852:	6278      	str	r0, [r7, #36]	; 0x24
	if (result == 0x3)
 8007854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007856:	2b03      	cmp	r3, #3
 8007858:	d153      	bne.n	8007902 <run_self_test+0xc6>
		/* Test passed. We can trust the gyro data here, so let's push it down
		* to the DMP.
		*/
		float sens;
		unsigned short accel_sens;
		mpu_get_gyro_sens(&sens);
 800785a:	f107 0308 	add.w	r3, r7, #8
 800785e:	4618      	mov	r0, r3
 8007860:	f7fe fd7c 	bl	800635c <mpu_get_gyro_sens>
		gyro[0] = (long)(gyro[0] * sens);
 8007864:	69bb      	ldr	r3, [r7, #24]
 8007866:	4618      	mov	r0, r3
 8007868:	f7f9 fa18 	bl	8000c9c <__aeabi_i2f>
 800786c:	4602      	mov	r2, r0
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	4619      	mov	r1, r3
 8007872:	4610      	mov	r0, r2
 8007874:	f7f9 fa66 	bl	8000d44 <__aeabi_fmul>
 8007878:	4603      	mov	r3, r0
 800787a:	4618      	mov	r0, r3
 800787c:	f7f9 fc28 	bl	80010d0 <__aeabi_f2iz>
 8007880:	4603      	mov	r3, r0
 8007882:	61bb      	str	r3, [r7, #24]
		gyro[1] = (long)(gyro[1] * sens);
 8007884:	69fb      	ldr	r3, [r7, #28]
 8007886:	4618      	mov	r0, r3
 8007888:	f7f9 fa08 	bl	8000c9c <__aeabi_i2f>
 800788c:	4602      	mov	r2, r0
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	4619      	mov	r1, r3
 8007892:	4610      	mov	r0, r2
 8007894:	f7f9 fa56 	bl	8000d44 <__aeabi_fmul>
 8007898:	4603      	mov	r3, r0
 800789a:	4618      	mov	r0, r3
 800789c:	f7f9 fc18 	bl	80010d0 <__aeabi_f2iz>
 80078a0:	4603      	mov	r3, r0
 80078a2:	61fb      	str	r3, [r7, #28]
		gyro[2] = (long)(gyro[2] * sens);
 80078a4:	6a3b      	ldr	r3, [r7, #32]
 80078a6:	4618      	mov	r0, r3
 80078a8:	f7f9 f9f8 	bl	8000c9c <__aeabi_i2f>
 80078ac:	4602      	mov	r2, r0
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	4619      	mov	r1, r3
 80078b2:	4610      	mov	r0, r2
 80078b4:	f7f9 fa46 	bl	8000d44 <__aeabi_fmul>
 80078b8:	4603      	mov	r3, r0
 80078ba:	4618      	mov	r0, r3
 80078bc:	f7f9 fc08 	bl	80010d0 <__aeabi_f2iz>
 80078c0:	4603      	mov	r3, r0
 80078c2:	623b      	str	r3, [r7, #32]
		dmp_set_gyro_bias(gyro);
 80078c4:	f107 0318 	add.w	r3, r7, #24
 80078c8:	4618      	mov	r0, r3
 80078ca:	f000 fb51 	bl	8007f70 <dmp_set_gyro_bias>
		mpu_get_accel_sens(&accel_sens);
 80078ce:	1dbb      	adds	r3, r7, #6
 80078d0:	4618      	mov	r0, r3
 80078d2:	f7fe fd7b 	bl	80063cc <mpu_get_accel_sens>
		accel[0] *= accel_sens;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	88fa      	ldrh	r2, [r7, #6]
 80078da:	fb02 f303 	mul.w	r3, r2, r3
 80078de:	60fb      	str	r3, [r7, #12]
		accel[1] *= accel_sens;
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	88fa      	ldrh	r2, [r7, #6]
 80078e4:	fb02 f303 	mul.w	r3, r2, r3
 80078e8:	613b      	str	r3, [r7, #16]
		accel[2] *= accel_sens;
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	88fa      	ldrh	r2, [r7, #6]
 80078ee:	fb02 f303 	mul.w	r3, r2, r3
 80078f2:	617b      	str	r3, [r7, #20]
		dmp_set_accel_bias(accel);
 80078f4:	f107 030c 	add.w	r3, r7, #12
 80078f8:	4618      	mov	r0, r3
 80078fa:	f000 fc43 	bl	8008184 <dmp_set_accel_bias>
		return 0;
 80078fe:	2300      	movs	r3, #0
 8007900:	e000      	b.n	8007904 <run_self_test+0xc8>
	}else return 1;
 8007902:	2301      	movs	r3, #1
}
 8007904:	4618      	mov	r0, r3
 8007906:	3728      	adds	r7, #40	; 0x28
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}

0800790c <inv_orientation_matrix_to_scalar>:
//陀螺仪方向控制
unsigned short inv_orientation_matrix_to_scalar(
    const signed char *mtx)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b084      	sub	sp, #16
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
       YZX  000_010_001
       ZXY  001_000_010
       ZYX  000_001_010
     */

    scalar = inv_row_2_scale(mtx);
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f000 f821 	bl	800795c <inv_row_2_scale>
 800791a:	4603      	mov	r3, r0
 800791c:	81fb      	strh	r3, [r7, #14]
    scalar |= inv_row_2_scale(mtx + 3) << 3;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	3303      	adds	r3, #3
 8007922:	4618      	mov	r0, r3
 8007924:	f000 f81a 	bl	800795c <inv_row_2_scale>
 8007928:	4603      	mov	r3, r0
 800792a:	00db      	lsls	r3, r3, #3
 800792c:	b21a      	sxth	r2, r3
 800792e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007932:	4313      	orrs	r3, r2
 8007934:	b21b      	sxth	r3, r3
 8007936:	81fb      	strh	r3, [r7, #14]
    scalar |= inv_row_2_scale(mtx + 6) << 6;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	3306      	adds	r3, #6
 800793c:	4618      	mov	r0, r3
 800793e:	f000 f80d 	bl	800795c <inv_row_2_scale>
 8007942:	4603      	mov	r3, r0
 8007944:	019b      	lsls	r3, r3, #6
 8007946:	b21a      	sxth	r2, r3
 8007948:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800794c:	4313      	orrs	r3, r2
 800794e:	b21b      	sxth	r3, r3
 8007950:	81fb      	strh	r3, [r7, #14]


    return scalar;
 8007952:	89fb      	ldrh	r3, [r7, #14]
}
 8007954:	4618      	mov	r0, r3
 8007956:	3710      	adds	r7, #16
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}

0800795c <inv_row_2_scale>:
//方向转换
unsigned short inv_row_2_scale(const signed char *row)
{
 800795c:	b480      	push	{r7}
 800795e:	b085      	sub	sp, #20
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
    unsigned short b;

    if (row[0] > 0)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f993 3000 	ldrsb.w	r3, [r3]
 800796a:	2b00      	cmp	r3, #0
 800796c:	dd02      	ble.n	8007974 <inv_row_2_scale+0x18>
        b = 0;
 800796e:	2300      	movs	r3, #0
 8007970:	81fb      	strh	r3, [r7, #14]
 8007972:	e02d      	b.n	80079d0 <inv_row_2_scale+0x74>
    else if (row[0] < 0)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f993 3000 	ldrsb.w	r3, [r3]
 800797a:	2b00      	cmp	r3, #0
 800797c:	da02      	bge.n	8007984 <inv_row_2_scale+0x28>
        b = 4;
 800797e:	2304      	movs	r3, #4
 8007980:	81fb      	strh	r3, [r7, #14]
 8007982:	e025      	b.n	80079d0 <inv_row_2_scale+0x74>
    else if (row[1] > 0)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	3301      	adds	r3, #1
 8007988:	f993 3000 	ldrsb.w	r3, [r3]
 800798c:	2b00      	cmp	r3, #0
 800798e:	dd02      	ble.n	8007996 <inv_row_2_scale+0x3a>
        b = 1;
 8007990:	2301      	movs	r3, #1
 8007992:	81fb      	strh	r3, [r7, #14]
 8007994:	e01c      	b.n	80079d0 <inv_row_2_scale+0x74>
    else if (row[1] < 0)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	3301      	adds	r3, #1
 800799a:	f993 3000 	ldrsb.w	r3, [r3]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	da02      	bge.n	80079a8 <inv_row_2_scale+0x4c>
        b = 5;
 80079a2:	2305      	movs	r3, #5
 80079a4:	81fb      	strh	r3, [r7, #14]
 80079a6:	e013      	b.n	80079d0 <inv_row_2_scale+0x74>
    else if (row[2] > 0)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	3302      	adds	r3, #2
 80079ac:	f993 3000 	ldrsb.w	r3, [r3]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	dd02      	ble.n	80079ba <inv_row_2_scale+0x5e>
        b = 2;
 80079b4:	2302      	movs	r3, #2
 80079b6:	81fb      	strh	r3, [r7, #14]
 80079b8:	e00a      	b.n	80079d0 <inv_row_2_scale+0x74>
    else if (row[2] < 0)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	3302      	adds	r3, #2
 80079be:	f993 3000 	ldrsb.w	r3, [r3]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	da02      	bge.n	80079cc <inv_row_2_scale+0x70>
        b = 6;
 80079c6:	2306      	movs	r3, #6
 80079c8:	81fb      	strh	r3, [r7, #14]
 80079ca:	e001      	b.n	80079d0 <inv_row_2_scale+0x74>
    else
        b = 7;      // error
 80079cc:	2307      	movs	r3, #7
 80079ce:	81fb      	strh	r3, [r7, #14]
    return b;
 80079d0:	89fb      	ldrh	r3, [r7, #14]
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3714      	adds	r7, #20
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bc80      	pop	{r7}
 80079da:	4770      	bx	lr

080079dc <mget_ms>:
//空函数,未用到.
void mget_ms(unsigned long *time)
{
 80079dc:	b480      	push	{r7}
 80079de:	b083      	sub	sp, #12
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]

}
 80079e4:	bf00      	nop
 80079e6:	370c      	adds	r7, #12
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bc80      	pop	{r7}
 80079ec:	4770      	bx	lr
	...

080079f0 <mpu_dmp_init>:
//mpu6050,dmp初始化
//返回值:0,正常
//    其他,失败
unsigned char mpu_dmp_init(void)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b082      	sub	sp, #8
 80079f4:	af00      	add	r7, sp, #0
	unsigned char res=0;
 80079f6:	2300      	movs	r3, #0
 80079f8:	71fb      	strb	r3, [r7, #7]
	MPU_IIC_Init(); 	//初始化IIC总线
 80079fa:	f7fd fe01 	bl	8005600 <MPU_IIC_Init>
	if(mpu_init()==0)	//初始化MPU6050
 80079fe:	f7fd ffe7 	bl	80059d0 <mpu_init>
 8007a02:	4603      	mov	r3, r0
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d15c      	bne.n	8007ac2 <mpu_dmp_init+0xd2>
	{
		res=mpu_set_sensors(INV_XYZ_GYRO|INV_XYZ_ACCEL);//设置所需要的传感器
 8007a08:	2078      	movs	r0, #120	; 0x78
 8007a0a:	f7fe fd7f 	bl	800650c <mpu_set_sensors>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	71fb      	strb	r3, [r7, #7]
		if(res)return 1;
 8007a12:	79fb      	ldrb	r3, [r7, #7]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d001      	beq.n	8007a1c <mpu_dmp_init+0x2c>
 8007a18:	2301      	movs	r3, #1
 8007a1a:	e055      	b.n	8007ac8 <mpu_dmp_init+0xd8>
		res=mpu_configure_fifo(INV_XYZ_GYRO|INV_XYZ_ACCEL);//设置FIFO
 8007a1c:	2078      	movs	r0, #120	; 0x78
 8007a1e:	f7fe fd23 	bl	8006468 <mpu_configure_fifo>
 8007a22:	4603      	mov	r3, r0
 8007a24:	71fb      	strb	r3, [r7, #7]
		if(res)return 2;
 8007a26:	79fb      	ldrb	r3, [r7, #7]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d001      	beq.n	8007a30 <mpu_dmp_init+0x40>
 8007a2c:	2302      	movs	r3, #2
 8007a2e:	e04b      	b.n	8007ac8 <mpu_dmp_init+0xd8>
		res=mpu_set_sample_rate(DEFAULT_MPU_HZ);	//设置采样率
 8007a30:	2064      	movs	r0, #100	; 0x64
 8007a32:	f7fe fc2d 	bl	8006290 <mpu_set_sample_rate>
 8007a36:	4603      	mov	r3, r0
 8007a38:	71fb      	strb	r3, [r7, #7]
		if(res)return 3;
 8007a3a:	79fb      	ldrb	r3, [r7, #7]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d001      	beq.n	8007a44 <mpu_dmp_init+0x54>
 8007a40:	2303      	movs	r3, #3
 8007a42:	e041      	b.n	8007ac8 <mpu_dmp_init+0xd8>
		res=dmp_load_motion_driver_firmware();		//加载dmp固件
 8007a44:	f000 f998 	bl	8007d78 <dmp_load_motion_driver_firmware>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	71fb      	strb	r3, [r7, #7]
		if(res)return 4;
 8007a4c:	79fb      	ldrb	r3, [r7, #7]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d001      	beq.n	8007a56 <mpu_dmp_init+0x66>
 8007a52:	2304      	movs	r3, #4
 8007a54:	e038      	b.n	8007ac8 <mpu_dmp_init+0xd8>
		res=dmp_set_orientation(inv_orientation_matrix_to_scalar(gyro_orientation));//设置陀螺仪方向
 8007a56:	481e      	ldr	r0, [pc, #120]	; (8007ad0 <mpu_dmp_init+0xe0>)
 8007a58:	f7ff ff58 	bl	800790c <inv_orientation_matrix_to_scalar>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f000 f99a 	bl	8007d98 <dmp_set_orientation>
 8007a64:	4603      	mov	r3, r0
 8007a66:	71fb      	strb	r3, [r7, #7]
		if(res)return 5;
 8007a68:	79fb      	ldrb	r3, [r7, #7]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d001      	beq.n	8007a72 <mpu_dmp_init+0x82>
 8007a6e:	2305      	movs	r3, #5
 8007a70:	e02a      	b.n	8007ac8 <mpu_dmp_init+0xd8>
		res=dmp_enable_feature(DMP_FEATURE_6X_LP_QUAT|DMP_FEATURE_TAP|	//设置dmp功能
 8007a72:	f240 1073 	movw	r0, #371	; 0x173
 8007a76:	f000 ff07 	bl	8008888 <dmp_enable_feature>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	71fb      	strb	r3, [r7, #7]
		    DMP_FEATURE_ANDROID_ORIENT|DMP_FEATURE_SEND_RAW_ACCEL|DMP_FEATURE_SEND_CAL_GYRO|
		    DMP_FEATURE_GYRO_CAL);
		if(res)return 6;
 8007a7e:	79fb      	ldrb	r3, [r7, #7]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d001      	beq.n	8007a88 <mpu_dmp_init+0x98>
 8007a84:	2306      	movs	r3, #6
 8007a86:	e01f      	b.n	8007ac8 <mpu_dmp_init+0xd8>
		res=dmp_set_fifo_rate(DEFAULT_MPU_HZ);	//设置DMP输出速率(最大不超过200Hz)
 8007a88:	2064      	movs	r0, #100	; 0x64
 8007a8a:	f000 fc7f 	bl	800838c <dmp_set_fifo_rate>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	71fb      	strb	r3, [r7, #7]
		if(res)return 7;
 8007a92:	79fb      	ldrb	r3, [r7, #7]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d001      	beq.n	8007a9c <mpu_dmp_init+0xac>
 8007a98:	2307      	movs	r3, #7
 8007a9a:	e015      	b.n	8007ac8 <mpu_dmp_init+0xd8>
		res=run_self_test();		//自检
 8007a9c:	f7ff fece 	bl	800783c <run_self_test>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	71fb      	strb	r3, [r7, #7]
		if(res)return 8;
 8007aa4:	79fb      	ldrb	r3, [r7, #7]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d001      	beq.n	8007aae <mpu_dmp_init+0xbe>
 8007aaa:	2308      	movs	r3, #8
 8007aac:	e00c      	b.n	8007ac8 <mpu_dmp_init+0xd8>
		res=mpu_set_dmp_state(1);	//使能DMP
 8007aae:	2001      	movs	r0, #1
 8007ab0:	f7ff fe70 	bl	8007794 <mpu_set_dmp_state>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	71fb      	strb	r3, [r7, #7]
		if(res)return 9;
 8007ab8:	79fb      	ldrb	r3, [r7, #7]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d003      	beq.n	8007ac6 <mpu_dmp_init+0xd6>
 8007abe:	2309      	movs	r3, #9
 8007ac0:	e002      	b.n	8007ac8 <mpu_dmp_init+0xd8>
	}else return 10;
 8007ac2:	230a      	movs	r3, #10
 8007ac4:	e000      	b.n	8007ac8 <mpu_dmp_init+0xd8>
	return 0;
 8007ac6:	2300      	movs	r3, #0
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3708      	adds	r7, #8
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}
 8007ad0:	20000038 	.word	0x20000038
 8007ad4:	00000000 	.word	0x00000000

08007ad8 <mpu_dmp_get_data>:
//roll:横滚角  精度:0.1°   范围:-180.0°<---> +180.0°
//yaw:航向角   精度:0.1°   范围:-180.0°<---> +180.0°
//返回值:0,正常
//    其他,失败
unsigned char mpu_dmp_get_data(float *pitch,float *roll,float *yaw)
{
 8007ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ada:	b095      	sub	sp, #84	; 0x54
 8007adc:	af02      	add	r7, sp, #8
 8007ade:	60f8      	str	r0, [r7, #12]
 8007ae0:	60b9      	str	r1, [r7, #8]
 8007ae2:	607a      	str	r2, [r7, #4]
	float q0=1.0f,q1=0.0f,q2=0.0f,q3=0.0f;
 8007ae4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8007ae8:	647b      	str	r3, [r7, #68]	; 0x44
 8007aea:	f04f 0300 	mov.w	r3, #0
 8007aee:	643b      	str	r3, [r7, #64]	; 0x40
 8007af0:	f04f 0300 	mov.w	r3, #0
 8007af4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007af6:	f04f 0300 	mov.w	r3, #0
 8007afa:	63bb      	str	r3, [r7, #56]	; 0x38
	unsigned long sensor_timestamp;
	short gyro[3], accel[3], sensors;
	unsigned char more;
	long quat[4];
	if(dmp_read_fifo(gyro, accel, quat, &sensor_timestamp, &sensors,&more))return 1;
 8007afc:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8007b00:	f107 0210 	add.w	r2, r7, #16
 8007b04:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8007b08:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8007b0c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8007b10:	9301      	str	r3, [sp, #4]
 8007b12:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8007b16:	9300      	str	r3, [sp, #0]
 8007b18:	4623      	mov	r3, r4
 8007b1a:	f001 f89f 	bl	8008c5c <dmp_read_fifo>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d001      	beq.n	8007b28 <mpu_dmp_get_data+0x50>
 8007b24:	2301      	movs	r3, #1
 8007b26:	e11e      	b.n	8007d66 <mpu_dmp_get_data+0x28e>
	if (sensors & INV_XYZ_ACCEL)
	send_packet(PACKET_TYPE_ACCEL, accel); */
	/* Unlike gyro and accel, quaternions are written to the FIFO in the body frame, q30.
	 * The orientation is set by the scalar passed to dmp_set_orientation during initialization.
	**/
	if(sensors&INV_WXYZ_QUAT)
 8007b28:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8007b2c:	b29b      	uxth	r3, r3
 8007b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	f000 8116 	beq.w	8007d64 <mpu_dmp_get_data+0x28c>
	{
		q0 = quat[0] / q30;	//q30格式转换为浮点数
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	f7f9 f8ae 	bl	8000c9c <__aeabi_i2f>
 8007b40:	4603      	mov	r3, r0
 8007b42:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 8007b46:	4618      	mov	r0, r3
 8007b48:	f7f9 f9b0 	bl	8000eac <__aeabi_fdiv>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	647b      	str	r3, [r7, #68]	; 0x44
		q1 = quat[1] / q30;
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	4618      	mov	r0, r3
 8007b54:	f7f9 f8a2 	bl	8000c9c <__aeabi_i2f>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f7f9 f9a4 	bl	8000eac <__aeabi_fdiv>
 8007b64:	4603      	mov	r3, r0
 8007b66:	643b      	str	r3, [r7, #64]	; 0x40
		q2 = quat[2] / q30;
 8007b68:	69bb      	ldr	r3, [r7, #24]
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f7f9 f896 	bl	8000c9c <__aeabi_i2f>
 8007b70:	4603      	mov	r3, r0
 8007b72:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 8007b76:	4618      	mov	r0, r3
 8007b78:	f7f9 f998 	bl	8000eac <__aeabi_fdiv>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
		q3 = quat[3] / q30;
 8007b80:	69fb      	ldr	r3, [r7, #28]
 8007b82:	4618      	mov	r0, r3
 8007b84:	f7f9 f88a 	bl	8000c9c <__aeabi_i2f>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f7f9 f98c 	bl	8000eac <__aeabi_fdiv>
 8007b94:	4603      	mov	r3, r0
 8007b96:	63bb      	str	r3, [r7, #56]	; 0x38
		//计算得到俯仰角/横滚角/航向角
		*pitch = asin(-2 * q1 * q3 + 2 * q0* q2)* 57.3;	// pitch
 8007b98:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8007b9c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007b9e:	f7f9 f8d1 	bl	8000d44 <__aeabi_fmul>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f7f9 f8cc 	bl	8000d44 <__aeabi_fmul>
 8007bac:	4603      	mov	r3, r0
 8007bae:	461c      	mov	r4, r3
 8007bb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007bb2:	4619      	mov	r1, r3
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f7f8 ffbd 	bl	8000b34 <__addsf3>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f7f9 f8c0 	bl	8000d44 <__aeabi_fmul>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	4619      	mov	r1, r3
 8007bc8:	4620      	mov	r0, r4
 8007bca:	f7f8 ffb3 	bl	8000b34 <__addsf3>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f7f8 fc29 	bl	8000428 <__aeabi_f2d>
 8007bd6:	4602      	mov	r2, r0
 8007bd8:	460b      	mov	r3, r1
 8007bda:	4610      	mov	r0, r2
 8007bdc:	4619      	mov	r1, r3
 8007bde:	f004 f895 	bl	800bd0c <asin>
 8007be2:	a363      	add	r3, pc, #396	; (adr r3, 8007d70 <mpu_dmp_get_data+0x298>)
 8007be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be8:	f7f8 fc76 	bl	80004d8 <__aeabi_dmul>
 8007bec:	4602      	mov	r2, r0
 8007bee:	460b      	mov	r3, r1
 8007bf0:	4610      	mov	r0, r2
 8007bf2:	4619      	mov	r1, r3
 8007bf4:	f7f8 ff48 	bl	8000a88 <__aeabi_d2f>
 8007bf8:	4602      	mov	r2, r0
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	601a      	str	r2, [r3, #0]
		*roll  = atan2(2 * q2 * q3 + 2 * q0 * q1, -2 * q1 * q1 - 2 * q2* q2 + 1)* 57.3;	// roll
 8007bfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c00:	4619      	mov	r1, r3
 8007c02:	4618      	mov	r0, r3
 8007c04:	f7f8 ff96 	bl	8000b34 <__addsf3>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f7f9 f899 	bl	8000d44 <__aeabi_fmul>
 8007c12:	4603      	mov	r3, r0
 8007c14:	461c      	mov	r4, r3
 8007c16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c18:	4619      	mov	r1, r3
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f7f8 ff8a 	bl	8000b34 <__addsf3>
 8007c20:	4603      	mov	r3, r0
 8007c22:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007c24:	4618      	mov	r0, r3
 8007c26:	f7f9 f88d 	bl	8000d44 <__aeabi_fmul>
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	4619      	mov	r1, r3
 8007c2e:	4620      	mov	r0, r4
 8007c30:	f7f8 ff80 	bl	8000b34 <__addsf3>
 8007c34:	4603      	mov	r3, r0
 8007c36:	4618      	mov	r0, r3
 8007c38:	f7f8 fbf6 	bl	8000428 <__aeabi_f2d>
 8007c3c:	4604      	mov	r4, r0
 8007c3e:	460d      	mov	r5, r1
 8007c40:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8007c44:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007c46:	f7f9 f87d 	bl	8000d44 <__aeabi_fmul>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f7f9 f878 	bl	8000d44 <__aeabi_fmul>
 8007c54:	4603      	mov	r3, r0
 8007c56:	461e      	mov	r6, r3
 8007c58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c5a:	4619      	mov	r1, r3
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f7f8 ff69 	bl	8000b34 <__addsf3>
 8007c62:	4603      	mov	r3, r0
 8007c64:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007c66:	4618      	mov	r0, r3
 8007c68:	f7f9 f86c 	bl	8000d44 <__aeabi_fmul>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	4619      	mov	r1, r3
 8007c70:	4630      	mov	r0, r6
 8007c72:	f7f8 ff5d 	bl	8000b30 <__aeabi_fsub>
 8007c76:	4603      	mov	r3, r0
 8007c78:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f7f8 ff59 	bl	8000b34 <__addsf3>
 8007c82:	4603      	mov	r3, r0
 8007c84:	4618      	mov	r0, r3
 8007c86:	f7f8 fbcf 	bl	8000428 <__aeabi_f2d>
 8007c8a:	4602      	mov	r2, r0
 8007c8c:	460b      	mov	r3, r1
 8007c8e:	4620      	mov	r0, r4
 8007c90:	4629      	mov	r1, r5
 8007c92:	f004 f863 	bl	800bd5c <atan2>
 8007c96:	a336      	add	r3, pc, #216	; (adr r3, 8007d70 <mpu_dmp_get_data+0x298>)
 8007c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c9c:	f7f8 fc1c 	bl	80004d8 <__aeabi_dmul>
 8007ca0:	4602      	mov	r2, r0
 8007ca2:	460b      	mov	r3, r1
 8007ca4:	4610      	mov	r0, r2
 8007ca6:	4619      	mov	r1, r3
 8007ca8:	f7f8 feee 	bl	8000a88 <__aeabi_d2f>
 8007cac:	4602      	mov	r2, r0
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	601a      	str	r2, [r3, #0]
		*yaw   = atan2(2*(q1*q2 + q0*q3),q0*q0+q1*q1-q2*q2-q3*q3) * 57.3;	//yaw
 8007cb2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007cb4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007cb6:	f7f9 f845 	bl	8000d44 <__aeabi_fmul>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	461c      	mov	r4, r3
 8007cbe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007cc0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8007cc2:	f7f9 f83f 	bl	8000d44 <__aeabi_fmul>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	4619      	mov	r1, r3
 8007cca:	4620      	mov	r0, r4
 8007ccc:	f7f8 ff32 	bl	8000b34 <__addsf3>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	4619      	mov	r1, r3
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	f7f8 ff2d 	bl	8000b34 <__addsf3>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f7f8 fba3 	bl	8000428 <__aeabi_f2d>
 8007ce2:	4604      	mov	r4, r0
 8007ce4:	460d      	mov	r5, r1
 8007ce6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007ce8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8007cea:	f7f9 f82b 	bl	8000d44 <__aeabi_fmul>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	461e      	mov	r6, r3
 8007cf2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007cf4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007cf6:	f7f9 f825 	bl	8000d44 <__aeabi_fmul>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	4619      	mov	r1, r3
 8007cfe:	4630      	mov	r0, r6
 8007d00:	f7f8 ff18 	bl	8000b34 <__addsf3>
 8007d04:	4603      	mov	r3, r0
 8007d06:	461e      	mov	r6, r3
 8007d08:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007d0a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007d0c:	f7f9 f81a 	bl	8000d44 <__aeabi_fmul>
 8007d10:	4603      	mov	r3, r0
 8007d12:	4619      	mov	r1, r3
 8007d14:	4630      	mov	r0, r6
 8007d16:	f7f8 ff0b 	bl	8000b30 <__aeabi_fsub>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	461e      	mov	r6, r3
 8007d1e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007d20:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007d22:	f7f9 f80f 	bl	8000d44 <__aeabi_fmul>
 8007d26:	4603      	mov	r3, r0
 8007d28:	4619      	mov	r1, r3
 8007d2a:	4630      	mov	r0, r6
 8007d2c:	f7f8 ff00 	bl	8000b30 <__aeabi_fsub>
 8007d30:	4603      	mov	r3, r0
 8007d32:	4618      	mov	r0, r3
 8007d34:	f7f8 fb78 	bl	8000428 <__aeabi_f2d>
 8007d38:	4602      	mov	r2, r0
 8007d3a:	460b      	mov	r3, r1
 8007d3c:	4620      	mov	r0, r4
 8007d3e:	4629      	mov	r1, r5
 8007d40:	f004 f80c 	bl	800bd5c <atan2>
 8007d44:	a30a      	add	r3, pc, #40	; (adr r3, 8007d70 <mpu_dmp_get_data+0x298>)
 8007d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d4a:	f7f8 fbc5 	bl	80004d8 <__aeabi_dmul>
 8007d4e:	4602      	mov	r2, r0
 8007d50:	460b      	mov	r3, r1
 8007d52:	4610      	mov	r0, r2
 8007d54:	4619      	mov	r1, r3
 8007d56:	f7f8 fe97 	bl	8000a88 <__aeabi_d2f>
 8007d5a:	4602      	mov	r2, r0
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	601a      	str	r2, [r3, #0]
	}else return 2;
	return 0;
 8007d60:	2300      	movs	r3, #0
 8007d62:	e000      	b.n	8007d66 <mpu_dmp_get_data+0x28e>
	}else return 2;
 8007d64:	2302      	movs	r3, #2
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	374c      	adds	r7, #76	; 0x4c
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d6e:	bf00      	nop
 8007d70:	66666666 	.word	0x66666666
 8007d74:	404ca666 	.word	0x404ca666

08007d78 <dmp_load_motion_driver_firmware>:
/**
 *  @brief  Load the DMP with this image.
 *  @return 0 if successful.
 */
int dmp_load_motion_driver_firmware(void)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	af00      	add	r7, sp, #0
    return mpu_load_firmware(DMP_CODE_SIZE, dmp_memory, sStartAddress,
 8007d7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007d80:	23c8      	movs	r3, #200	; 0xc8
 8007d82:	4904      	ldr	r1, [pc, #16]	; (8007d94 <dmp_load_motion_driver_firmware+0x1c>)
 8007d84:	f640 30f6 	movw	r0, #3062	; 0xbf6
 8007d88:	f7ff fc86 	bl	8007698 <mpu_load_firmware>
 8007d8c:	4603      	mov	r3, r0
        DMP_SAMPLE_RATE);
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	bd80      	pop	{r7, pc}
 8007d92:	bf00      	nop
 8007d94:	0800ca20 	.word	0x0800ca20

08007d98 <dmp_set_orientation>:
 *  @e inv_orientation_matrix_to_scalar.
 *  @param[in]  orient  Gyro and accel orientation in body frame.
 *  @return     0 if successful.
 */
int dmp_set_orientation(unsigned short orient)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b088      	sub	sp, #32
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	4603      	mov	r3, r0
 8007da0:	80fb      	strh	r3, [r7, #6]
    unsigned char gyro_regs[3], accel_regs[3];
    const unsigned char gyro_axes[3] = {DINA4C, DINACD, DINA6C};
 8007da2:	4a6e      	ldr	r2, [pc, #440]	; (8007f5c <dmp_set_orientation+0x1c4>)
 8007da4:	f107 0314 	add.w	r3, r7, #20
 8007da8:	6812      	ldr	r2, [r2, #0]
 8007daa:	4611      	mov	r1, r2
 8007dac:	8019      	strh	r1, [r3, #0]
 8007dae:	3302      	adds	r3, #2
 8007db0:	0c12      	lsrs	r2, r2, #16
 8007db2:	701a      	strb	r2, [r3, #0]
    const unsigned char accel_axes[3] = {DINA0C, DINAC9, DINA2C};
 8007db4:	4a6a      	ldr	r2, [pc, #424]	; (8007f60 <dmp_set_orientation+0x1c8>)
 8007db6:	f107 0310 	add.w	r3, r7, #16
 8007dba:	6812      	ldr	r2, [r2, #0]
 8007dbc:	4611      	mov	r1, r2
 8007dbe:	8019      	strh	r1, [r3, #0]
 8007dc0:	3302      	adds	r3, #2
 8007dc2:	0c12      	lsrs	r2, r2, #16
 8007dc4:	701a      	strb	r2, [r3, #0]
    const unsigned char gyro_sign[3] = {DINA36, DINA56, DINA76};
 8007dc6:	4a67      	ldr	r2, [pc, #412]	; (8007f64 <dmp_set_orientation+0x1cc>)
 8007dc8:	f107 030c 	add.w	r3, r7, #12
 8007dcc:	6812      	ldr	r2, [r2, #0]
 8007dce:	4611      	mov	r1, r2
 8007dd0:	8019      	strh	r1, [r3, #0]
 8007dd2:	3302      	adds	r3, #2
 8007dd4:	0c12      	lsrs	r2, r2, #16
 8007dd6:	701a      	strb	r2, [r3, #0]
    const unsigned char accel_sign[3] = {DINA26, DINA46, DINA66};
 8007dd8:	4a63      	ldr	r2, [pc, #396]	; (8007f68 <dmp_set_orientation+0x1d0>)
 8007dda:	f107 0308 	add.w	r3, r7, #8
 8007dde:	6812      	ldr	r2, [r2, #0]
 8007de0:	4611      	mov	r1, r2
 8007de2:	8019      	strh	r1, [r3, #0]
 8007de4:	3302      	adds	r3, #2
 8007de6:	0c12      	lsrs	r2, r2, #16
 8007de8:	701a      	strb	r2, [r3, #0]

    gyro_regs[0] = gyro_axes[orient & 3];
 8007dea:	88fb      	ldrh	r3, [r7, #6]
 8007dec:	f003 0303 	and.w	r3, r3, #3
 8007df0:	3320      	adds	r3, #32
 8007df2:	443b      	add	r3, r7
 8007df4:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8007df8:	773b      	strb	r3, [r7, #28]
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
 8007dfa:	88fb      	ldrh	r3, [r7, #6]
 8007dfc:	08db      	lsrs	r3, r3, #3
 8007dfe:	b29b      	uxth	r3, r3
 8007e00:	f003 0303 	and.w	r3, r3, #3
 8007e04:	3320      	adds	r3, #32
 8007e06:	443b      	add	r3, r7
 8007e08:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8007e0c:	777b      	strb	r3, [r7, #29]
    gyro_regs[2] = gyro_axes[(orient >> 6) & 3];
 8007e0e:	88fb      	ldrh	r3, [r7, #6]
 8007e10:	099b      	lsrs	r3, r3, #6
 8007e12:	b29b      	uxth	r3, r3
 8007e14:	f003 0303 	and.w	r3, r3, #3
 8007e18:	3320      	adds	r3, #32
 8007e1a:	443b      	add	r3, r7
 8007e1c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8007e20:	77bb      	strb	r3, [r7, #30]
    accel_regs[0] = accel_axes[orient & 3];
 8007e22:	88fb      	ldrh	r3, [r7, #6]
 8007e24:	f003 0303 	and.w	r3, r3, #3
 8007e28:	3320      	adds	r3, #32
 8007e2a:	443b      	add	r3, r7
 8007e2c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8007e30:	763b      	strb	r3, [r7, #24]
    accel_regs[1] = accel_axes[(orient >> 3) & 3];
 8007e32:	88fb      	ldrh	r3, [r7, #6]
 8007e34:	08db      	lsrs	r3, r3, #3
 8007e36:	b29b      	uxth	r3, r3
 8007e38:	f003 0303 	and.w	r3, r3, #3
 8007e3c:	3320      	adds	r3, #32
 8007e3e:	443b      	add	r3, r7
 8007e40:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8007e44:	767b      	strb	r3, [r7, #25]
    accel_regs[2] = accel_axes[(orient >> 6) & 3];
 8007e46:	88fb      	ldrh	r3, [r7, #6]
 8007e48:	099b      	lsrs	r3, r3, #6
 8007e4a:	b29b      	uxth	r3, r3
 8007e4c:	f003 0303 	and.w	r3, r3, #3
 8007e50:	3320      	adds	r3, #32
 8007e52:	443b      	add	r3, r7
 8007e54:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8007e58:	76bb      	strb	r3, [r7, #26]

    /* Chip-to-body, axes only. */
    if (mpu_write_mem(FCFG_1, 3, gyro_regs))
 8007e5a:	f107 031c 	add.w	r3, r7, #28
 8007e5e:	461a      	mov	r2, r3
 8007e60:	2103      	movs	r1, #3
 8007e62:	f240 4026 	movw	r0, #1062	; 0x426
 8007e66:	f7ff fb73 	bl	8007550 <mpu_write_mem>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d002      	beq.n	8007e76 <dmp_set_orientation+0xde>
        return -1;
 8007e70:	f04f 33ff 	mov.w	r3, #4294967295
 8007e74:	e06e      	b.n	8007f54 <dmp_set_orientation+0x1bc>
    if (mpu_write_mem(FCFG_2, 3, accel_regs))
 8007e76:	f107 0318 	add.w	r3, r7, #24
 8007e7a:	461a      	mov	r2, r3
 8007e7c:	2103      	movs	r1, #3
 8007e7e:	f240 402a 	movw	r0, #1066	; 0x42a
 8007e82:	f7ff fb65 	bl	8007550 <mpu_write_mem>
 8007e86:	4603      	mov	r3, r0
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d002      	beq.n	8007e92 <dmp_set_orientation+0xfa>
        return -1;
 8007e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8007e90:	e060      	b.n	8007f54 <dmp_set_orientation+0x1bc>

    memcpy(gyro_regs, gyro_sign, 3);
 8007e92:	f107 031c 	add.w	r3, r7, #28
 8007e96:	f107 020c 	add.w	r2, r7, #12
 8007e9a:	6812      	ldr	r2, [r2, #0]
 8007e9c:	4611      	mov	r1, r2
 8007e9e:	8019      	strh	r1, [r3, #0]
 8007ea0:	3302      	adds	r3, #2
 8007ea2:	0c12      	lsrs	r2, r2, #16
 8007ea4:	701a      	strb	r2, [r3, #0]
    memcpy(accel_regs, accel_sign, 3);
 8007ea6:	f107 0318 	add.w	r3, r7, #24
 8007eaa:	f107 0208 	add.w	r2, r7, #8
 8007eae:	6812      	ldr	r2, [r2, #0]
 8007eb0:	4611      	mov	r1, r2
 8007eb2:	8019      	strh	r1, [r3, #0]
 8007eb4:	3302      	adds	r3, #2
 8007eb6:	0c12      	lsrs	r2, r2, #16
 8007eb8:	701a      	strb	r2, [r3, #0]
    if (orient & 4) {
 8007eba:	88fb      	ldrh	r3, [r7, #6]
 8007ebc:	f003 0304 	and.w	r3, r3, #4
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d009      	beq.n	8007ed8 <dmp_set_orientation+0x140>
        gyro_regs[0] |= 1;
 8007ec4:	7f3b      	ldrb	r3, [r7, #28]
 8007ec6:	f043 0301 	orr.w	r3, r3, #1
 8007eca:	b2db      	uxtb	r3, r3
 8007ecc:	773b      	strb	r3, [r7, #28]
        accel_regs[0] |= 1;
 8007ece:	7e3b      	ldrb	r3, [r7, #24]
 8007ed0:	f043 0301 	orr.w	r3, r3, #1
 8007ed4:	b2db      	uxtb	r3, r3
 8007ed6:	763b      	strb	r3, [r7, #24]
    }
    if (orient & 0x20) {
 8007ed8:	88fb      	ldrh	r3, [r7, #6]
 8007eda:	f003 0320 	and.w	r3, r3, #32
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d009      	beq.n	8007ef6 <dmp_set_orientation+0x15e>
        gyro_regs[1] |= 1;
 8007ee2:	7f7b      	ldrb	r3, [r7, #29]
 8007ee4:	f043 0301 	orr.w	r3, r3, #1
 8007ee8:	b2db      	uxtb	r3, r3
 8007eea:	777b      	strb	r3, [r7, #29]
        accel_regs[1] |= 1;
 8007eec:	7e7b      	ldrb	r3, [r7, #25]
 8007eee:	f043 0301 	orr.w	r3, r3, #1
 8007ef2:	b2db      	uxtb	r3, r3
 8007ef4:	767b      	strb	r3, [r7, #25]
    }
    if (orient & 0x100) {
 8007ef6:	88fb      	ldrh	r3, [r7, #6]
 8007ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d009      	beq.n	8007f14 <dmp_set_orientation+0x17c>
        gyro_regs[2] |= 1;
 8007f00:	7fbb      	ldrb	r3, [r7, #30]
 8007f02:	f043 0301 	orr.w	r3, r3, #1
 8007f06:	b2db      	uxtb	r3, r3
 8007f08:	77bb      	strb	r3, [r7, #30]
        accel_regs[2] |= 1;
 8007f0a:	7ebb      	ldrb	r3, [r7, #26]
 8007f0c:	f043 0301 	orr.w	r3, r3, #1
 8007f10:	b2db      	uxtb	r3, r3
 8007f12:	76bb      	strb	r3, [r7, #26]
    }

    /* Chip-to-body, sign only. */
    if (mpu_write_mem(FCFG_3, 3, gyro_regs))
 8007f14:	f107 031c 	add.w	r3, r7, #28
 8007f18:	461a      	mov	r2, r3
 8007f1a:	2103      	movs	r1, #3
 8007f1c:	f44f 6088 	mov.w	r0, #1088	; 0x440
 8007f20:	f7ff fb16 	bl	8007550 <mpu_write_mem>
 8007f24:	4603      	mov	r3, r0
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d002      	beq.n	8007f30 <dmp_set_orientation+0x198>
        return -1;
 8007f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8007f2e:	e011      	b.n	8007f54 <dmp_set_orientation+0x1bc>
    if (mpu_write_mem(FCFG_7, 3, accel_regs))
 8007f30:	f107 0318 	add.w	r3, r7, #24
 8007f34:	461a      	mov	r2, r3
 8007f36:	2103      	movs	r1, #3
 8007f38:	f240 4031 	movw	r0, #1073	; 0x431
 8007f3c:	f7ff fb08 	bl	8007550 <mpu_write_mem>
 8007f40:	4603      	mov	r3, r0
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d002      	beq.n	8007f4c <dmp_set_orientation+0x1b4>
        return -1;
 8007f46:	f04f 33ff 	mov.w	r3, #4294967295
 8007f4a:	e003      	b.n	8007f54 <dmp_set_orientation+0x1bc>
    dmp.orient = orient;
 8007f4c:	4a07      	ldr	r2, [pc, #28]	; (8007f6c <dmp_set_orientation+0x1d4>)
 8007f4e:	88fb      	ldrh	r3, [r7, #6]
 8007f50:	8113      	strh	r3, [r2, #8]
    return 0;
 8007f52:	2300      	movs	r3, #0
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3720      	adds	r7, #32
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}
 8007f5c:	0800c944 	.word	0x0800c944
 8007f60:	0800c948 	.word	0x0800c948
 8007f64:	0800c94c 	.word	0x0800c94c
 8007f68:	0800c950 	.word	0x0800c950
 8007f6c:	20000324 	.word	0x20000324

08007f70 <dmp_set_gyro_bias>:
 *  overwrite the biases written to this location once a new one is computed.
 *  @param[in]  bias    Gyro biases in q16.
 *  @return     0 if successful.
 */
int dmp_set_gyro_bias(long *bias)
{
 8007f70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f74:	b08c      	sub	sp, #48	; 0x30
 8007f76:	af00      	add	r7, sp, #0
 8007f78:	61f8      	str	r0, [r7, #28]
    long gyro_bias_body[3];
    unsigned char regs[4];

    gyro_bias_body[0] = bias[dmp.orient & 3];
 8007f7a:	4b80      	ldr	r3, [pc, #512]	; (800817c <dmp_set_gyro_bias+0x20c>)
 8007f7c:	891b      	ldrh	r3, [r3, #8]
 8007f7e:	f003 0303 	and.w	r3, r3, #3
 8007f82:	009b      	lsls	r3, r3, #2
 8007f84:	69fa      	ldr	r2, [r7, #28]
 8007f86:	4413      	add	r3, r2
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	627b      	str	r3, [r7, #36]	; 0x24
    if (dmp.orient & 4)
 8007f8c:	4b7b      	ldr	r3, [pc, #492]	; (800817c <dmp_set_gyro_bias+0x20c>)
 8007f8e:	891b      	ldrh	r3, [r3, #8]
 8007f90:	f003 0304 	and.w	r3, r3, #4
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d002      	beq.n	8007f9e <dmp_set_gyro_bias+0x2e>
        gyro_bias_body[0] *= -1;
 8007f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f9a:	425b      	negs	r3, r3
 8007f9c:	627b      	str	r3, [r7, #36]	; 0x24
    gyro_bias_body[1] = bias[(dmp.orient >> 3) & 3];
 8007f9e:	4b77      	ldr	r3, [pc, #476]	; (800817c <dmp_set_gyro_bias+0x20c>)
 8007fa0:	891b      	ldrh	r3, [r3, #8]
 8007fa2:	08db      	lsrs	r3, r3, #3
 8007fa4:	b29b      	uxth	r3, r3
 8007fa6:	f003 0303 	and.w	r3, r3, #3
 8007faa:	009b      	lsls	r3, r3, #2
 8007fac:	69fa      	ldr	r2, [r7, #28]
 8007fae:	4413      	add	r3, r2
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	62bb      	str	r3, [r7, #40]	; 0x28
    if (dmp.orient & 0x20)
 8007fb4:	4b71      	ldr	r3, [pc, #452]	; (800817c <dmp_set_gyro_bias+0x20c>)
 8007fb6:	891b      	ldrh	r3, [r3, #8]
 8007fb8:	f003 0320 	and.w	r3, r3, #32
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d002      	beq.n	8007fc6 <dmp_set_gyro_bias+0x56>
        gyro_bias_body[1] *= -1;
 8007fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fc2:	425b      	negs	r3, r3
 8007fc4:	62bb      	str	r3, [r7, #40]	; 0x28
    gyro_bias_body[2] = bias[(dmp.orient >> 6) & 3];
 8007fc6:	4b6d      	ldr	r3, [pc, #436]	; (800817c <dmp_set_gyro_bias+0x20c>)
 8007fc8:	891b      	ldrh	r3, [r3, #8]
 8007fca:	099b      	lsrs	r3, r3, #6
 8007fcc:	b29b      	uxth	r3, r3
 8007fce:	f003 0303 	and.w	r3, r3, #3
 8007fd2:	009b      	lsls	r3, r3, #2
 8007fd4:	69fa      	ldr	r2, [r7, #28]
 8007fd6:	4413      	add	r3, r2
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (dmp.orient & 0x100)
 8007fdc:	4b67      	ldr	r3, [pc, #412]	; (800817c <dmp_set_gyro_bias+0x20c>)
 8007fde:	891b      	ldrh	r3, [r3, #8]
 8007fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d002      	beq.n	8007fee <dmp_set_gyro_bias+0x7e>
        gyro_bias_body[2] *= -1;
 8007fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fea:	425b      	negs	r3, r3
 8007fec:	62fb      	str	r3, [r7, #44]	; 0x2c
#ifdef EMPL_NO_64BIT
    gyro_bias_body[0] = (long)(((float)gyro_bias_body[0] * GYRO_SF) / 1073741824.f);
    gyro_bias_body[1] = (long)(((float)gyro_bias_body[1] * GYRO_SF) / 1073741824.f);
    gyro_bias_body[2] = (long)(((float)gyro_bias_body[2] * GYRO_SF) / 1073741824.f);
#else
    gyro_bias_body[0] = (long)(((long long)gyro_bias_body[0] * GYRO_SF) >> 30);
 8007fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff0:	17da      	asrs	r2, r3, #31
 8007ff2:	613b      	str	r3, [r7, #16]
 8007ff4:	617a      	str	r2, [r7, #20]
 8007ff6:	4b62      	ldr	r3, [pc, #392]	; (8008180 <dmp_set_gyro_bias+0x210>)
 8007ff8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007ffc:	460a      	mov	r2, r1
 8007ffe:	fb03 f202 	mul.w	r2, r3, r2
 8008002:	2300      	movs	r3, #0
 8008004:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8008008:	4601      	mov	r1, r0
 800800a:	fb01 f303 	mul.w	r3, r1, r3
 800800e:	4413      	add	r3, r2
 8008010:	4a5b      	ldr	r2, [pc, #364]	; (8008180 <dmp_set_gyro_bias+0x210>)
 8008012:	6939      	ldr	r1, [r7, #16]
 8008014:	fba1 ab02 	umull	sl, fp, r1, r2
 8008018:	445b      	add	r3, fp
 800801a:	469b      	mov	fp, r3
 800801c:	f04f 0200 	mov.w	r2, #0
 8008020:	f04f 0300 	mov.w	r3, #0
 8008024:	ea4f 729a 	mov.w	r2, sl, lsr #30
 8008028:	ea42 028b 	orr.w	r2, r2, fp, lsl #2
 800802c:	ea4f 73ab 	mov.w	r3, fp, asr #30
 8008030:	4613      	mov	r3, r2
 8008032:	627b      	str	r3, [r7, #36]	; 0x24
    gyro_bias_body[1] = (long)(((long long)gyro_bias_body[1] * GYRO_SF) >> 30);
 8008034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008036:	17da      	asrs	r2, r3, #31
 8008038:	60bb      	str	r3, [r7, #8]
 800803a:	60fa      	str	r2, [r7, #12]
 800803c:	4b50      	ldr	r3, [pc, #320]	; (8008180 <dmp_set_gyro_bias+0x210>)
 800803e:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8008042:	465a      	mov	r2, fp
 8008044:	fb03 f202 	mul.w	r2, r3, r2
 8008048:	2300      	movs	r3, #0
 800804a:	4651      	mov	r1, sl
 800804c:	fb01 f303 	mul.w	r3, r1, r3
 8008050:	4413      	add	r3, r2
 8008052:	4a4b      	ldr	r2, [pc, #300]	; (8008180 <dmp_set_gyro_bias+0x210>)
 8008054:	4651      	mov	r1, sl
 8008056:	fba1 8902 	umull	r8, r9, r1, r2
 800805a:	444b      	add	r3, r9
 800805c:	4699      	mov	r9, r3
 800805e:	f04f 0200 	mov.w	r2, #0
 8008062:	f04f 0300 	mov.w	r3, #0
 8008066:	ea4f 7298 	mov.w	r2, r8, lsr #30
 800806a:	ea42 0289 	orr.w	r2, r2, r9, lsl #2
 800806e:	ea4f 73a9 	mov.w	r3, r9, asr #30
 8008072:	4613      	mov	r3, r2
 8008074:	62bb      	str	r3, [r7, #40]	; 0x28
    gyro_bias_body[2] = (long)(((long long)gyro_bias_body[2] * GYRO_SF) >> 30);
 8008076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008078:	17da      	asrs	r2, r3, #31
 800807a:	603b      	str	r3, [r7, #0]
 800807c:	607a      	str	r2, [r7, #4]
 800807e:	4b40      	ldr	r3, [pc, #256]	; (8008180 <dmp_set_gyro_bias+0x210>)
 8008080:	e9d7 8900 	ldrd	r8, r9, [r7]
 8008084:	464a      	mov	r2, r9
 8008086:	fb03 f202 	mul.w	r2, r3, r2
 800808a:	2300      	movs	r3, #0
 800808c:	4641      	mov	r1, r8
 800808e:	fb01 f303 	mul.w	r3, r1, r3
 8008092:	4413      	add	r3, r2
 8008094:	4a3a      	ldr	r2, [pc, #232]	; (8008180 <dmp_set_gyro_bias+0x210>)
 8008096:	4641      	mov	r1, r8
 8008098:	fba1 4502 	umull	r4, r5, r1, r2
 800809c:	442b      	add	r3, r5
 800809e:	461d      	mov	r5, r3
 80080a0:	f04f 0200 	mov.w	r2, #0
 80080a4:	f04f 0300 	mov.w	r3, #0
 80080a8:	0fa2      	lsrs	r2, r4, #30
 80080aa:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 80080ae:	17ab      	asrs	r3, r5, #30
 80080b0:	4613      	mov	r3, r2
 80080b2:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif

    regs[0] = (unsigned char)((gyro_bias_body[0] >> 24) & 0xFF);
 80080b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b6:	161b      	asrs	r3, r3, #24
 80080b8:	b2db      	uxtb	r3, r3
 80080ba:	f887 3020 	strb.w	r3, [r7, #32]
    regs[1] = (unsigned char)((gyro_bias_body[0] >> 16) & 0xFF);
 80080be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c0:	141b      	asrs	r3, r3, #16
 80080c2:	b2db      	uxtb	r3, r3
 80080c4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    regs[2] = (unsigned char)((gyro_bias_body[0] >> 8) & 0xFF);
 80080c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ca:	121b      	asrs	r3, r3, #8
 80080cc:	b2db      	uxtb	r3, r3
 80080ce:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    regs[3] = (unsigned char)(gyro_bias_body[0] & 0xFF);
 80080d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d4:	b2db      	uxtb	r3, r3
 80080d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (mpu_write_mem(D_EXT_GYRO_BIAS_X, 4, regs))
 80080da:	f107 0320 	add.w	r3, r7, #32
 80080de:	461a      	mov	r2, r3
 80080e0:	2104      	movs	r1, #4
 80080e2:	f44f 7074 	mov.w	r0, #976	; 0x3d0
 80080e6:	f7ff fa33 	bl	8007550 <mpu_write_mem>
 80080ea:	4603      	mov	r3, r0
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d002      	beq.n	80080f6 <dmp_set_gyro_bias+0x186>
        return -1;
 80080f0:	f04f 33ff 	mov.w	r3, #4294967295
 80080f4:	e03c      	b.n	8008170 <dmp_set_gyro_bias+0x200>

    regs[0] = (unsigned char)((gyro_bias_body[1] >> 24) & 0xFF);
 80080f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f8:	161b      	asrs	r3, r3, #24
 80080fa:	b2db      	uxtb	r3, r3
 80080fc:	f887 3020 	strb.w	r3, [r7, #32]
    regs[1] = (unsigned char)((gyro_bias_body[1] >> 16) & 0xFF);
 8008100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008102:	141b      	asrs	r3, r3, #16
 8008104:	b2db      	uxtb	r3, r3
 8008106:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    regs[2] = (unsigned char)((gyro_bias_body[1] >> 8) & 0xFF);
 800810a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800810c:	121b      	asrs	r3, r3, #8
 800810e:	b2db      	uxtb	r3, r3
 8008110:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    regs[3] = (unsigned char)(gyro_bias_body[1] & 0xFF);
 8008114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008116:	b2db      	uxtb	r3, r3
 8008118:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (mpu_write_mem(D_EXT_GYRO_BIAS_Y, 4, regs))
 800811c:	f107 0320 	add.w	r3, r7, #32
 8008120:	461a      	mov	r2, r3
 8008122:	2104      	movs	r1, #4
 8008124:	f44f 7075 	mov.w	r0, #980	; 0x3d4
 8008128:	f7ff fa12 	bl	8007550 <mpu_write_mem>
 800812c:	4603      	mov	r3, r0
 800812e:	2b00      	cmp	r3, #0
 8008130:	d002      	beq.n	8008138 <dmp_set_gyro_bias+0x1c8>
        return -1;
 8008132:	f04f 33ff 	mov.w	r3, #4294967295
 8008136:	e01b      	b.n	8008170 <dmp_set_gyro_bias+0x200>

    regs[0] = (unsigned char)((gyro_bias_body[2] >> 24) & 0xFF);
 8008138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800813a:	161b      	asrs	r3, r3, #24
 800813c:	b2db      	uxtb	r3, r3
 800813e:	f887 3020 	strb.w	r3, [r7, #32]
    regs[1] = (unsigned char)((gyro_bias_body[2] >> 16) & 0xFF);
 8008142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008144:	141b      	asrs	r3, r3, #16
 8008146:	b2db      	uxtb	r3, r3
 8008148:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    regs[2] = (unsigned char)((gyro_bias_body[2] >> 8) & 0xFF);
 800814c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800814e:	121b      	asrs	r3, r3, #8
 8008150:	b2db      	uxtb	r3, r3
 8008152:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    regs[3] = (unsigned char)(gyro_bias_body[2] & 0xFF);
 8008156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008158:	b2db      	uxtb	r3, r3
 800815a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    return mpu_write_mem(D_EXT_GYRO_BIAS_Z, 4, regs);
 800815e:	f107 0320 	add.w	r3, r7, #32
 8008162:	461a      	mov	r2, r3
 8008164:	2104      	movs	r1, #4
 8008166:	f44f 7076 	mov.w	r0, #984	; 0x3d8
 800816a:	f7ff f9f1 	bl	8007550 <mpu_write_mem>
 800816e:	4603      	mov	r3, r0
}
 8008170:	4618      	mov	r0, r3
 8008172:	3730      	adds	r7, #48	; 0x30
 8008174:	46bd      	mov	sp, r7
 8008176:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800817a:	bf00      	nop
 800817c:	20000324 	.word	0x20000324
 8008180:	02cae309 	.word	0x02cae309

08008184 <dmp_set_accel_bias>:
 *  These biases will be removed from the DMP 6-axis quaternion.
 *  @param[in]  bias    Accel biases in q16.
 *  @return     0 if successful.
 */
int dmp_set_accel_bias(long *bias)
{
 8008184:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008188:	b094      	sub	sp, #80	; 0x50
 800818a:	af00      	add	r7, sp, #0
 800818c:	6278      	str	r0, [r7, #36]	; 0x24
    long accel_bias_body[3];
    unsigned char regs[12];
    long long accel_sf;
    unsigned short accel_sens;

    mpu_get_accel_sens(&accel_sens);
 800818e:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8008192:	4618      	mov	r0, r3
 8008194:	f7fe f91a 	bl	80063cc <mpu_get_accel_sens>
    accel_sf = (long long)accel_sens << 15;
 8008198:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800819a:	b29b      	uxth	r3, r3
 800819c:	2200      	movs	r2, #0
 800819e:	613b      	str	r3, [r7, #16]
 80081a0:	617a      	str	r2, [r7, #20]
 80081a2:	f04f 0200 	mov.w	r2, #0
 80081a6:	f04f 0300 	mov.w	r3, #0
 80081aa:	6979      	ldr	r1, [r7, #20]
 80081ac:	03cb      	lsls	r3, r1, #15
 80081ae:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80081b2:	4684      	mov	ip, r0
 80081b4:	ea43 435c 	orr.w	r3, r3, ip, lsr #17
 80081b8:	4601      	mov	r1, r0
 80081ba:	03ca      	lsls	r2, r1, #15
 80081bc:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    //__no_operation();

    accel_bias_body[0] = bias[dmp.orient & 3];
 80081c0:	4b71      	ldr	r3, [pc, #452]	; (8008388 <dmp_set_accel_bias+0x204>)
 80081c2:	891b      	ldrh	r3, [r3, #8]
 80081c4:	f003 0303 	and.w	r3, r3, #3
 80081c8:	009b      	lsls	r3, r3, #2
 80081ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081cc:	4413      	add	r3, r2
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (dmp.orient & 4)
 80081d2:	4b6d      	ldr	r3, [pc, #436]	; (8008388 <dmp_set_accel_bias+0x204>)
 80081d4:	891b      	ldrh	r3, [r3, #8]
 80081d6:	f003 0304 	and.w	r3, r3, #4
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d002      	beq.n	80081e4 <dmp_set_accel_bias+0x60>
        accel_bias_body[0] *= -1;
 80081de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081e0:	425b      	negs	r3, r3
 80081e2:	63fb      	str	r3, [r7, #60]	; 0x3c
    accel_bias_body[1] = bias[(dmp.orient >> 3) & 3];
 80081e4:	4b68      	ldr	r3, [pc, #416]	; (8008388 <dmp_set_accel_bias+0x204>)
 80081e6:	891b      	ldrh	r3, [r3, #8]
 80081e8:	08db      	lsrs	r3, r3, #3
 80081ea:	b29b      	uxth	r3, r3
 80081ec:	f003 0303 	and.w	r3, r3, #3
 80081f0:	009b      	lsls	r3, r3, #2
 80081f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081f4:	4413      	add	r3, r2
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	643b      	str	r3, [r7, #64]	; 0x40
    if (dmp.orient & 0x20)
 80081fa:	4b63      	ldr	r3, [pc, #396]	; (8008388 <dmp_set_accel_bias+0x204>)
 80081fc:	891b      	ldrh	r3, [r3, #8]
 80081fe:	f003 0320 	and.w	r3, r3, #32
 8008202:	2b00      	cmp	r3, #0
 8008204:	d002      	beq.n	800820c <dmp_set_accel_bias+0x88>
        accel_bias_body[1] *= -1;
 8008206:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008208:	425b      	negs	r3, r3
 800820a:	643b      	str	r3, [r7, #64]	; 0x40
    accel_bias_body[2] = bias[(dmp.orient >> 6) & 3];
 800820c:	4b5e      	ldr	r3, [pc, #376]	; (8008388 <dmp_set_accel_bias+0x204>)
 800820e:	891b      	ldrh	r3, [r3, #8]
 8008210:	099b      	lsrs	r3, r3, #6
 8008212:	b29b      	uxth	r3, r3
 8008214:	f003 0303 	and.w	r3, r3, #3
 8008218:	009b      	lsls	r3, r3, #2
 800821a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800821c:	4413      	add	r3, r2
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	647b      	str	r3, [r7, #68]	; 0x44
    if (dmp.orient & 0x100)
 8008222:	4b59      	ldr	r3, [pc, #356]	; (8008388 <dmp_set_accel_bias+0x204>)
 8008224:	891b      	ldrh	r3, [r3, #8]
 8008226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800822a:	2b00      	cmp	r3, #0
 800822c:	d002      	beq.n	8008234 <dmp_set_accel_bias+0xb0>
        accel_bias_body[2] *= -1;
 800822e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008230:	425b      	negs	r3, r3
 8008232:	647b      	str	r3, [r7, #68]	; 0x44
#ifdef EMPL_NO_64BIT
    accel_bias_body[0] = (long)(((float)accel_bias_body[0] * accel_sf) / 1073741824.f);
    accel_bias_body[1] = (long)(((float)accel_bias_body[1] * accel_sf) / 1073741824.f);
    accel_bias_body[2] = (long)(((float)accel_bias_body[2] * accel_sf) / 1073741824.f);
#else
    accel_bias_body[0] = (long)(((long long)accel_bias_body[0] * accel_sf) >> 30);
 8008234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008236:	17da      	asrs	r2, r3, #31
 8008238:	61bb      	str	r3, [r7, #24]
 800823a:	61fa      	str	r2, [r7, #28]
 800823c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800823e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008242:	460a      	mov	r2, r1
 8008244:	fb02 f203 	mul.w	r2, r2, r3
 8008248:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800824a:	e9c7 0106 	strd	r0, r1, [r7, #24]
 800824e:	4601      	mov	r1, r0
 8008250:	fb01 f303 	mul.w	r3, r1, r3
 8008254:	4413      	add	r3, r2
 8008256:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008258:	69b9      	ldr	r1, [r7, #24]
 800825a:	fba2 ab01 	umull	sl, fp, r2, r1
 800825e:	445b      	add	r3, fp
 8008260:	469b      	mov	fp, r3
 8008262:	f04f 0200 	mov.w	r2, #0
 8008266:	f04f 0300 	mov.w	r3, #0
 800826a:	ea4f 729a 	mov.w	r2, sl, lsr #30
 800826e:	ea42 028b 	orr.w	r2, r2, fp, lsl #2
 8008272:	ea4f 73ab 	mov.w	r3, fp, asr #30
 8008276:	4613      	mov	r3, r2
 8008278:	63fb      	str	r3, [r7, #60]	; 0x3c
    accel_bias_body[1] = (long)(((long long)accel_bias_body[1] * accel_sf) >> 30);
 800827a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800827c:	17da      	asrs	r2, r3, #31
 800827e:	60bb      	str	r3, [r7, #8]
 8008280:	60fa      	str	r2, [r7, #12]
 8008282:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008284:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8008288:	465a      	mov	r2, fp
 800828a:	fb02 f203 	mul.w	r2, r2, r3
 800828e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008290:	4651      	mov	r1, sl
 8008292:	fb01 f303 	mul.w	r3, r1, r3
 8008296:	4413      	add	r3, r2
 8008298:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800829a:	4651      	mov	r1, sl
 800829c:	fba2 8901 	umull	r8, r9, r2, r1
 80082a0:	444b      	add	r3, r9
 80082a2:	4699      	mov	r9, r3
 80082a4:	f04f 0200 	mov.w	r2, #0
 80082a8:	f04f 0300 	mov.w	r3, #0
 80082ac:	ea4f 7298 	mov.w	r2, r8, lsr #30
 80082b0:	ea42 0289 	orr.w	r2, r2, r9, lsl #2
 80082b4:	ea4f 73a9 	mov.w	r3, r9, asr #30
 80082b8:	4613      	mov	r3, r2
 80082ba:	643b      	str	r3, [r7, #64]	; 0x40
    accel_bias_body[2] = (long)(((long long)accel_bias_body[2] * accel_sf) >> 30);
 80082bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082be:	17da      	asrs	r2, r3, #31
 80082c0:	603b      	str	r3, [r7, #0]
 80082c2:	607a      	str	r2, [r7, #4]
 80082c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082c6:	e9d7 8900 	ldrd	r8, r9, [r7]
 80082ca:	464a      	mov	r2, r9
 80082cc:	fb02 f203 	mul.w	r2, r2, r3
 80082d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082d2:	4641      	mov	r1, r8
 80082d4:	fb01 f303 	mul.w	r3, r1, r3
 80082d8:	4413      	add	r3, r2
 80082da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80082dc:	4641      	mov	r1, r8
 80082de:	fba2 4501 	umull	r4, r5, r2, r1
 80082e2:	442b      	add	r3, r5
 80082e4:	461d      	mov	r5, r3
 80082e6:	f04f 0200 	mov.w	r2, #0
 80082ea:	f04f 0300 	mov.w	r3, #0
 80082ee:	0fa2      	lsrs	r2, r4, #30
 80082f0:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 80082f4:	17ab      	asrs	r3, r5, #30
 80082f6:	4613      	mov	r3, r2
 80082f8:	647b      	str	r3, [r7, #68]	; 0x44
#endif

    regs[0] = (unsigned char)((accel_bias_body[0] >> 24) & 0xFF);
 80082fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082fc:	161b      	asrs	r3, r3, #24
 80082fe:	b2db      	uxtb	r3, r3
 8008300:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    regs[1] = (unsigned char)((accel_bias_body[0] >> 16) & 0xFF);
 8008304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008306:	141b      	asrs	r3, r3, #16
 8008308:	b2db      	uxtb	r3, r3
 800830a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    regs[2] = (unsigned char)((accel_bias_body[0] >> 8) & 0xFF);
 800830e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008310:	121b      	asrs	r3, r3, #8
 8008312:	b2db      	uxtb	r3, r3
 8008314:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
    regs[3] = (unsigned char)(accel_bias_body[0] & 0xFF);
 8008318:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800831a:	b2db      	uxtb	r3, r3
 800831c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    regs[4] = (unsigned char)((accel_bias_body[1] >> 24) & 0xFF);
 8008320:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008322:	161b      	asrs	r3, r3, #24
 8008324:	b2db      	uxtb	r3, r3
 8008326:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    regs[5] = (unsigned char)((accel_bias_body[1] >> 16) & 0xFF);
 800832a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800832c:	141b      	asrs	r3, r3, #16
 800832e:	b2db      	uxtb	r3, r3
 8008330:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    regs[6] = (unsigned char)((accel_bias_body[1] >> 8) & 0xFF);
 8008334:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008336:	121b      	asrs	r3, r3, #8
 8008338:	b2db      	uxtb	r3, r3
 800833a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    regs[7] = (unsigned char)(accel_bias_body[1] & 0xFF);
 800833e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008340:	b2db      	uxtb	r3, r3
 8008342:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    regs[8] = (unsigned char)((accel_bias_body[2] >> 24) & 0xFF);
 8008346:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008348:	161b      	asrs	r3, r3, #24
 800834a:	b2db      	uxtb	r3, r3
 800834c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
    regs[9] = (unsigned char)((accel_bias_body[2] >> 16) & 0xFF);
 8008350:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008352:	141b      	asrs	r3, r3, #16
 8008354:	b2db      	uxtb	r3, r3
 8008356:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
    regs[10] = (unsigned char)((accel_bias_body[2] >> 8) & 0xFF);
 800835a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800835c:	121b      	asrs	r3, r3, #8
 800835e:	b2db      	uxtb	r3, r3
 8008360:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
    regs[11] = (unsigned char)(accel_bias_body[2] & 0xFF);
 8008364:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008366:	b2db      	uxtb	r3, r3
 8008368:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    return mpu_write_mem(D_ACCEL_BIAS, 12, regs);
 800836c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008370:	461a      	mov	r2, r3
 8008372:	210c      	movs	r1, #12
 8008374:	f44f 7025 	mov.w	r0, #660	; 0x294
 8008378:	f7ff f8ea 	bl	8007550 <mpu_write_mem>
 800837c:	4603      	mov	r3, r0
}
 800837e:	4618      	mov	r0, r3
 8008380:	3750      	adds	r7, #80	; 0x50
 8008382:	46bd      	mov	sp, r7
 8008384:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008388:	20000324 	.word	0x20000324

0800838c <dmp_set_fifo_rate>:
 *  Only used when DMP is on.
 *  @param[in]  rate    Desired fifo rate (Hz).
 *  @return     0 if successful.
 */
int dmp_set_fifo_rate(unsigned short rate)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b088      	sub	sp, #32
 8008390:	af00      	add	r7, sp, #0
 8008392:	4603      	mov	r3, r0
 8008394:	80fb      	strh	r3, [r7, #6]
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
 8008396:	4a1f      	ldr	r2, [pc, #124]	; (8008414 <dmp_set_fifo_rate+0x88>)
 8008398:	f107 0310 	add.w	r3, r7, #16
 800839c:	ca07      	ldmia	r2, {r0, r1, r2}
 800839e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        0xc4, DINAAA, DINAF1, DINADF, DINADF, 0xBB, 0xAF, DINADF, DINADF};
    unsigned short div;
    unsigned char tmp[8];

    if (rate > DMP_SAMPLE_RATE)
 80083a2:	88fb      	ldrh	r3, [r7, #6]
 80083a4:	2bc8      	cmp	r3, #200	; 0xc8
 80083a6:	d902      	bls.n	80083ae <dmp_set_fifo_rate+0x22>
        return -1;
 80083a8:	f04f 33ff 	mov.w	r3, #4294967295
 80083ac:	e02e      	b.n	800840c <dmp_set_fifo_rate+0x80>
    div = DMP_SAMPLE_RATE / rate - 1;
 80083ae:	88fb      	ldrh	r3, [r7, #6]
 80083b0:	22c8      	movs	r2, #200	; 0xc8
 80083b2:	fb92 f3f3 	sdiv	r3, r2, r3
 80083b6:	b29b      	uxth	r3, r3
 80083b8:	3b01      	subs	r3, #1
 80083ba:	83fb      	strh	r3, [r7, #30]
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
 80083bc:	8bfb      	ldrh	r3, [r7, #30]
 80083be:	0a1b      	lsrs	r3, r3, #8
 80083c0:	b29b      	uxth	r3, r3
 80083c2:	b2db      	uxtb	r3, r3
 80083c4:	723b      	strb	r3, [r7, #8]
    tmp[1] = (unsigned char)(div & 0xFF);
 80083c6:	8bfb      	ldrh	r3, [r7, #30]
 80083c8:	b2db      	uxtb	r3, r3
 80083ca:	727b      	strb	r3, [r7, #9]
    if (mpu_write_mem(D_0_22, 2, tmp))
 80083cc:	f107 0308 	add.w	r3, r7, #8
 80083d0:	461a      	mov	r2, r3
 80083d2:	2102      	movs	r1, #2
 80083d4:	f240 2016 	movw	r0, #534	; 0x216
 80083d8:	f7ff f8ba 	bl	8007550 <mpu_write_mem>
 80083dc:	4603      	mov	r3, r0
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d002      	beq.n	80083e8 <dmp_set_fifo_rate+0x5c>
        return -1;
 80083e2:	f04f 33ff 	mov.w	r3, #4294967295
 80083e6:	e011      	b.n	800840c <dmp_set_fifo_rate+0x80>
    if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
 80083e8:	f107 0310 	add.w	r3, r7, #16
 80083ec:	461a      	mov	r2, r3
 80083ee:	210c      	movs	r1, #12
 80083f0:	f640 20c1 	movw	r0, #2753	; 0xac1
 80083f4:	f7ff f8ac 	bl	8007550 <mpu_write_mem>
 80083f8:	4603      	mov	r3, r0
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d002      	beq.n	8008404 <dmp_set_fifo_rate+0x78>
        return -1;
 80083fe:	f04f 33ff 	mov.w	r3, #4294967295
 8008402:	e003      	b.n	800840c <dmp_set_fifo_rate+0x80>

    dmp.fifo_rate = rate;
 8008404:	4a04      	ldr	r2, [pc, #16]	; (8008418 <dmp_set_fifo_rate+0x8c>)
 8008406:	88fb      	ldrh	r3, [r7, #6]
 8008408:	8193      	strh	r3, [r2, #12]
    return 0;
 800840a:	2300      	movs	r3, #0
}
 800840c:	4618      	mov	r0, r3
 800840e:	3720      	adds	r7, #32
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}
 8008414:	0800c954 	.word	0x0800c954
 8008418:	20000324 	.word	0x20000324

0800841c <dmp_set_tap_thresh>:
 *  @param[in]  axis    1, 2, and 4 for XYZ accel, respectively.
 *  @param[in]  thresh  Tap threshold, in mg/ms.
 *  @return     0 if successful.
 */
int dmp_set_tap_thresh(unsigned char axis, unsigned short thresh)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b086      	sub	sp, #24
 8008420:	af00      	add	r7, sp, #0
 8008422:	4603      	mov	r3, r0
 8008424:	460a      	mov	r2, r1
 8008426:	71fb      	strb	r3, [r7, #7]
 8008428:	4613      	mov	r3, r2
 800842a:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[4], accel_fsr;
    float scaled_thresh;
    unsigned short dmp_thresh, dmp_thresh_2;
    if (!(axis & TAP_XYZ) || thresh > 1600)
 800842c:	79fb      	ldrb	r3, [r7, #7]
 800842e:	f003 0307 	and.w	r3, r3, #7
 8008432:	2b00      	cmp	r3, #0
 8008434:	d003      	beq.n	800843e <dmp_set_tap_thresh+0x22>
 8008436:	88bb      	ldrh	r3, [r7, #4]
 8008438:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800843c:	d902      	bls.n	8008444 <dmp_set_tap_thresh+0x28>
        return -1;
 800843e:	f04f 33ff 	mov.w	r3, #4294967295
 8008442:	e107      	b.n	8008654 <dmp_set_tap_thresh+0x238>

    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
 8008444:	88bb      	ldrh	r3, [r7, #4]
 8008446:	4618      	mov	r0, r3
 8008448:	f7f8 fc24 	bl	8000c94 <__aeabi_ui2f>
 800844c:	4603      	mov	r3, r0
 800844e:	4983      	ldr	r1, [pc, #524]	; (800865c <dmp_set_tap_thresh+0x240>)
 8008450:	4618      	mov	r0, r3
 8008452:	f7f8 fd2b 	bl	8000eac <__aeabi_fdiv>
 8008456:	4603      	mov	r3, r0
 8008458:	613b      	str	r3, [r7, #16]

    mpu_get_accel_fsr(&accel_fsr);
 800845a:	f107 030b 	add.w	r3, r7, #11
 800845e:	4618      	mov	r0, r3
 8008460:	f7fd fdd2 	bl	8006008 <mpu_get_accel_fsr>
    switch (accel_fsr) {
 8008464:	7afb      	ldrb	r3, [r7, #11]
 8008466:	3b02      	subs	r3, #2
 8008468:	2b0e      	cmp	r3, #14
 800846a:	d879      	bhi.n	8008560 <dmp_set_tap_thresh+0x144>
 800846c:	a201      	add	r2, pc, #4	; (adr r2, 8008474 <dmp_set_tap_thresh+0x58>)
 800846e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008472:	bf00      	nop
 8008474:	080084b1 	.word	0x080084b1
 8008478:	08008561 	.word	0x08008561
 800847c:	080084dd 	.word	0x080084dd
 8008480:	08008561 	.word	0x08008561
 8008484:	08008561 	.word	0x08008561
 8008488:	08008561 	.word	0x08008561
 800848c:	08008509 	.word	0x08008509
 8008490:	08008561 	.word	0x08008561
 8008494:	08008561 	.word	0x08008561
 8008498:	08008561 	.word	0x08008561
 800849c:	08008561 	.word	0x08008561
 80084a0:	08008561 	.word	0x08008561
 80084a4:	08008561 	.word	0x08008561
 80084a8:	08008561 	.word	0x08008561
 80084ac:	08008535 	.word	0x08008535
    case 2:
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
 80084b0:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 80084b4:	6938      	ldr	r0, [r7, #16]
 80084b6:	f7f8 fc45 	bl	8000d44 <__aeabi_fmul>
 80084ba:	4603      	mov	r3, r0
 80084bc:	4618      	mov	r0, r3
 80084be:	f7f8 fe2d 	bl	800111c <__aeabi_f2uiz>
 80084c2:	4603      	mov	r3, r0
 80084c4:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
 80084c6:	4966      	ldr	r1, [pc, #408]	; (8008660 <dmp_set_tap_thresh+0x244>)
 80084c8:	6938      	ldr	r0, [r7, #16]
 80084ca:	f7f8 fc3b 	bl	8000d44 <__aeabi_fmul>
 80084ce:	4603      	mov	r3, r0
 80084d0:	4618      	mov	r0, r3
 80084d2:	f7f8 fe23 	bl	800111c <__aeabi_f2uiz>
 80084d6:	4603      	mov	r3, r0
 80084d8:	82bb      	strh	r3, [r7, #20]
        break;
 80084da:	e044      	b.n	8008566 <dmp_set_tap_thresh+0x14a>
    case 4:
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
 80084dc:	f04f 418c 	mov.w	r1, #1174405120	; 0x46000000
 80084e0:	6938      	ldr	r0, [r7, #16]
 80084e2:	f7f8 fc2f 	bl	8000d44 <__aeabi_fmul>
 80084e6:	4603      	mov	r3, r0
 80084e8:	4618      	mov	r0, r3
 80084ea:	f7f8 fe17 	bl	800111c <__aeabi_f2uiz>
 80084ee:	4603      	mov	r3, r0
 80084f0:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
 80084f2:	495c      	ldr	r1, [pc, #368]	; (8008664 <dmp_set_tap_thresh+0x248>)
 80084f4:	6938      	ldr	r0, [r7, #16]
 80084f6:	f7f8 fc25 	bl	8000d44 <__aeabi_fmul>
 80084fa:	4603      	mov	r3, r0
 80084fc:	4618      	mov	r0, r3
 80084fe:	f7f8 fe0d 	bl	800111c <__aeabi_f2uiz>
 8008502:	4603      	mov	r3, r0
 8008504:	82bb      	strh	r3, [r7, #20]
        break;
 8008506:	e02e      	b.n	8008566 <dmp_set_tap_thresh+0x14a>
    case 8:
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
 8008508:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 800850c:	6938      	ldr	r0, [r7, #16]
 800850e:	f7f8 fc19 	bl	8000d44 <__aeabi_fmul>
 8008512:	4603      	mov	r3, r0
 8008514:	4618      	mov	r0, r3
 8008516:	f7f8 fe01 	bl	800111c <__aeabi_f2uiz>
 800851a:	4603      	mov	r3, r0
 800851c:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
 800851e:	4952      	ldr	r1, [pc, #328]	; (8008668 <dmp_set_tap_thresh+0x24c>)
 8008520:	6938      	ldr	r0, [r7, #16]
 8008522:	f7f8 fc0f 	bl	8000d44 <__aeabi_fmul>
 8008526:	4603      	mov	r3, r0
 8008528:	4618      	mov	r0, r3
 800852a:	f7f8 fdf7 	bl	800111c <__aeabi_f2uiz>
 800852e:	4603      	mov	r3, r0
 8008530:	82bb      	strh	r3, [r7, #20]
        break;
 8008532:	e018      	b.n	8008566 <dmp_set_tap_thresh+0x14a>
    case 16:
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
 8008534:	f04f 418a 	mov.w	r1, #1157627904	; 0x45000000
 8008538:	6938      	ldr	r0, [r7, #16]
 800853a:	f7f8 fc03 	bl	8000d44 <__aeabi_fmul>
 800853e:	4603      	mov	r3, r0
 8008540:	4618      	mov	r0, r3
 8008542:	f7f8 fdeb 	bl	800111c <__aeabi_f2uiz>
 8008546:	4603      	mov	r3, r0
 8008548:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
 800854a:	4948      	ldr	r1, [pc, #288]	; (800866c <dmp_set_tap_thresh+0x250>)
 800854c:	6938      	ldr	r0, [r7, #16]
 800854e:	f7f8 fbf9 	bl	8000d44 <__aeabi_fmul>
 8008552:	4603      	mov	r3, r0
 8008554:	4618      	mov	r0, r3
 8008556:	f7f8 fde1 	bl	800111c <__aeabi_f2uiz>
 800855a:	4603      	mov	r3, r0
 800855c:	82bb      	strh	r3, [r7, #20]
        break;
 800855e:	e002      	b.n	8008566 <dmp_set_tap_thresh+0x14a>
    default:
        return -1;
 8008560:	f04f 33ff 	mov.w	r3, #4294967295
 8008564:	e076      	b.n	8008654 <dmp_set_tap_thresh+0x238>
    }
    tmp[0] = (unsigned char)(dmp_thresh >> 8);
 8008566:	8afb      	ldrh	r3, [r7, #22]
 8008568:	0a1b      	lsrs	r3, r3, #8
 800856a:	b29b      	uxth	r3, r3
 800856c:	b2db      	uxtb	r3, r3
 800856e:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
 8008570:	8afb      	ldrh	r3, [r7, #22]
 8008572:	b2db      	uxtb	r3, r3
 8008574:	737b      	strb	r3, [r7, #13]
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
 8008576:	8abb      	ldrh	r3, [r7, #20]
 8008578:	0a1b      	lsrs	r3, r3, #8
 800857a:	b29b      	uxth	r3, r3
 800857c:	b2db      	uxtb	r3, r3
 800857e:	73bb      	strb	r3, [r7, #14]
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);
 8008580:	8abb      	ldrh	r3, [r7, #20]
 8008582:	b2db      	uxtb	r3, r3
 8008584:	73fb      	strb	r3, [r7, #15]

    if (axis & TAP_X) {
 8008586:	79fb      	ldrb	r3, [r7, #7]
 8008588:	f003 0301 	and.w	r3, r3, #1
 800858c:	2b00      	cmp	r3, #0
 800858e:	d01c      	beq.n	80085ca <dmp_set_tap_thresh+0x1ae>
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
 8008590:	f107 030c 	add.w	r3, r7, #12
 8008594:	461a      	mov	r2, r3
 8008596:	2102      	movs	r1, #2
 8008598:	f44f 70ea 	mov.w	r0, #468	; 0x1d4
 800859c:	f7fe ffd8 	bl	8007550 <mpu_write_mem>
 80085a0:	4603      	mov	r3, r0
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d002      	beq.n	80085ac <dmp_set_tap_thresh+0x190>
            return -1;
 80085a6:	f04f 33ff 	mov.w	r3, #4294967295
 80085aa:	e053      	b.n	8008654 <dmp_set_tap_thresh+0x238>
        if (mpu_write_mem(D_1_36, 2, tmp+2))
 80085ac:	f107 030c 	add.w	r3, r7, #12
 80085b0:	3302      	adds	r3, #2
 80085b2:	461a      	mov	r2, r3
 80085b4:	2102      	movs	r1, #2
 80085b6:	f44f 7092 	mov.w	r0, #292	; 0x124
 80085ba:	f7fe ffc9 	bl	8007550 <mpu_write_mem>
 80085be:	4603      	mov	r3, r0
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d002      	beq.n	80085ca <dmp_set_tap_thresh+0x1ae>
            return -1;
 80085c4:	f04f 33ff 	mov.w	r3, #4294967295
 80085c8:	e044      	b.n	8008654 <dmp_set_tap_thresh+0x238>
    }
    if (axis & TAP_Y) {
 80085ca:	79fb      	ldrb	r3, [r7, #7]
 80085cc:	f003 0302 	and.w	r3, r3, #2
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d01c      	beq.n	800860e <dmp_set_tap_thresh+0x1f2>
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
 80085d4:	f107 030c 	add.w	r3, r7, #12
 80085d8:	461a      	mov	r2, r3
 80085da:	2102      	movs	r1, #2
 80085dc:	f44f 70ec 	mov.w	r0, #472	; 0x1d8
 80085e0:	f7fe ffb6 	bl	8007550 <mpu_write_mem>
 80085e4:	4603      	mov	r3, r0
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d002      	beq.n	80085f0 <dmp_set_tap_thresh+0x1d4>
            return -1;
 80085ea:	f04f 33ff 	mov.w	r3, #4294967295
 80085ee:	e031      	b.n	8008654 <dmp_set_tap_thresh+0x238>
        if (mpu_write_mem(D_1_40, 2, tmp+2))
 80085f0:	f107 030c 	add.w	r3, r7, #12
 80085f4:	3302      	adds	r3, #2
 80085f6:	461a      	mov	r2, r3
 80085f8:	2102      	movs	r1, #2
 80085fa:	f44f 7094 	mov.w	r0, #296	; 0x128
 80085fe:	f7fe ffa7 	bl	8007550 <mpu_write_mem>
 8008602:	4603      	mov	r3, r0
 8008604:	2b00      	cmp	r3, #0
 8008606:	d002      	beq.n	800860e <dmp_set_tap_thresh+0x1f2>
            return -1;
 8008608:	f04f 33ff 	mov.w	r3, #4294967295
 800860c:	e022      	b.n	8008654 <dmp_set_tap_thresh+0x238>
    }
    if (axis & TAP_Z) {
 800860e:	79fb      	ldrb	r3, [r7, #7]
 8008610:	f003 0304 	and.w	r3, r3, #4
 8008614:	2b00      	cmp	r3, #0
 8008616:	d01c      	beq.n	8008652 <dmp_set_tap_thresh+0x236>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
 8008618:	f107 030c 	add.w	r3, r7, #12
 800861c:	461a      	mov	r2, r3
 800861e:	2102      	movs	r1, #2
 8008620:	f44f 70ee 	mov.w	r0, #476	; 0x1dc
 8008624:	f7fe ff94 	bl	8007550 <mpu_write_mem>
 8008628:	4603      	mov	r3, r0
 800862a:	2b00      	cmp	r3, #0
 800862c:	d002      	beq.n	8008634 <dmp_set_tap_thresh+0x218>
            return -1;
 800862e:	f04f 33ff 	mov.w	r3, #4294967295
 8008632:	e00f      	b.n	8008654 <dmp_set_tap_thresh+0x238>
        if (mpu_write_mem(D_1_44, 2, tmp+2))
 8008634:	f107 030c 	add.w	r3, r7, #12
 8008638:	3302      	adds	r3, #2
 800863a:	461a      	mov	r2, r3
 800863c:	2102      	movs	r1, #2
 800863e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008642:	f7fe ff85 	bl	8007550 <mpu_write_mem>
 8008646:	4603      	mov	r3, r0
 8008648:	2b00      	cmp	r3, #0
 800864a:	d002      	beq.n	8008652 <dmp_set_tap_thresh+0x236>
            return -1;
 800864c:	f04f 33ff 	mov.w	r3, #4294967295
 8008650:	e000      	b.n	8008654 <dmp_set_tap_thresh+0x238>
    }
    return 0;
 8008652:	2300      	movs	r3, #0
}
 8008654:	4618      	mov	r0, r3
 8008656:	3718      	adds	r7, #24
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}
 800865c:	43480000 	.word	0x43480000
 8008660:	46400000 	.word	0x46400000
 8008664:	45c00000 	.word	0x45c00000
 8008668:	45400000 	.word	0x45400000
 800866c:	44c00000 	.word	0x44c00000

08008670 <dmp_set_tap_axes>:
 *  @brief      Set which axes will register a tap.
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b084      	sub	sp, #16
 8008674:	af00      	add	r7, sp, #0
 8008676:	4603      	mov	r3, r0
 8008678:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp = 0;
 800867a:	2300      	movs	r3, #0
 800867c:	73fb      	strb	r3, [r7, #15]

    if (axis & TAP_X)
 800867e:	79fb      	ldrb	r3, [r7, #7]
 8008680:	f003 0301 	and.w	r3, r3, #1
 8008684:	2b00      	cmp	r3, #0
 8008686:	d004      	beq.n	8008692 <dmp_set_tap_axes+0x22>
        tmp |= 0x30;
 8008688:	7bfb      	ldrb	r3, [r7, #15]
 800868a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800868e:	b2db      	uxtb	r3, r3
 8008690:	73fb      	strb	r3, [r7, #15]
    if (axis & TAP_Y)
 8008692:	79fb      	ldrb	r3, [r7, #7]
 8008694:	f003 0302 	and.w	r3, r3, #2
 8008698:	2b00      	cmp	r3, #0
 800869a:	d004      	beq.n	80086a6 <dmp_set_tap_axes+0x36>
        tmp |= 0x0C;
 800869c:	7bfb      	ldrb	r3, [r7, #15]
 800869e:	f043 030c 	orr.w	r3, r3, #12
 80086a2:	b2db      	uxtb	r3, r3
 80086a4:	73fb      	strb	r3, [r7, #15]
    if (axis & TAP_Z)
 80086a6:	79fb      	ldrb	r3, [r7, #7]
 80086a8:	f003 0304 	and.w	r3, r3, #4
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d004      	beq.n	80086ba <dmp_set_tap_axes+0x4a>
        tmp |= 0x03;
 80086b0:	7bfb      	ldrb	r3, [r7, #15]
 80086b2:	f043 0303 	orr.w	r3, r3, #3
 80086b6:	b2db      	uxtb	r3, r3
 80086b8:	73fb      	strb	r3, [r7, #15]
    return mpu_write_mem(D_1_72, 1, &tmp);
 80086ba:	f107 030f 	add.w	r3, r7, #15
 80086be:	461a      	mov	r2, r3
 80086c0:	2101      	movs	r1, #1
 80086c2:	f44f 70a4 	mov.w	r0, #328	; 0x148
 80086c6:	f7fe ff43 	bl	8007550 <mpu_write_mem>
 80086ca:	4603      	mov	r3, r0
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	3710      	adds	r7, #16
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}

080086d4 <dmp_set_tap_count>:
 *  @brief      Set minimum number of taps needed for an interrupt.
 *  @param[in]  min_taps    Minimum consecutive taps (1-4).
 *  @return     0 if successful.
 */
int dmp_set_tap_count(unsigned char min_taps)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b084      	sub	sp, #16
 80086d8:	af00      	add	r7, sp, #0
 80086da:	4603      	mov	r3, r0
 80086dc:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (min_taps < 1)
 80086de:	79fb      	ldrb	r3, [r7, #7]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d102      	bne.n	80086ea <dmp_set_tap_count+0x16>
        min_taps = 1;
 80086e4:	2301      	movs	r3, #1
 80086e6:	71fb      	strb	r3, [r7, #7]
 80086e8:	e004      	b.n	80086f4 <dmp_set_tap_count+0x20>
    else if (min_taps > 4)
 80086ea:	79fb      	ldrb	r3, [r7, #7]
 80086ec:	2b04      	cmp	r3, #4
 80086ee:	d901      	bls.n	80086f4 <dmp_set_tap_count+0x20>
        min_taps = 4;
 80086f0:	2304      	movs	r3, #4
 80086f2:	71fb      	strb	r3, [r7, #7]

    tmp = min_taps - 1;
 80086f4:	79fb      	ldrb	r3, [r7, #7]
 80086f6:	3b01      	subs	r3, #1
 80086f8:	b2db      	uxtb	r3, r3
 80086fa:	73fb      	strb	r3, [r7, #15]
    return mpu_write_mem(D_1_79, 1, &tmp);
 80086fc:	f107 030f 	add.w	r3, r7, #15
 8008700:	461a      	mov	r2, r3
 8008702:	2101      	movs	r1, #1
 8008704:	f240 104f 	movw	r0, #335	; 0x14f
 8008708:	f7fe ff22 	bl	8007550 <mpu_write_mem>
 800870c:	4603      	mov	r3, r0
}
 800870e:	4618      	mov	r0, r3
 8008710:	3710      	adds	r7, #16
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}
	...

08008718 <dmp_set_tap_time>:
 *  @brief      Set length between valid taps.
 *  @param[in]  time    Milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time(unsigned short time)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b084      	sub	sp, #16
 800871c:	af00      	add	r7, sp, #0
 800871e:	4603      	mov	r3, r0
 8008720:	80fb      	strh	r3, [r7, #6]
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
 8008722:	88fb      	ldrh	r3, [r7, #6]
 8008724:	4a0c      	ldr	r2, [pc, #48]	; (8008758 <dmp_set_tap_time+0x40>)
 8008726:	fba2 2303 	umull	r2, r3, r2, r3
 800872a:	089b      	lsrs	r3, r3, #2
 800872c:	81fb      	strh	r3, [r7, #14]
    tmp[0] = (unsigned char)(dmp_time >> 8);
 800872e:	89fb      	ldrh	r3, [r7, #14]
 8008730:	0a1b      	lsrs	r3, r3, #8
 8008732:	b29b      	uxth	r3, r3
 8008734:	b2db      	uxtb	r3, r3
 8008736:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
 8008738:	89fb      	ldrh	r3, [r7, #14]
 800873a:	b2db      	uxtb	r3, r3
 800873c:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
 800873e:	f107 030c 	add.w	r3, r7, #12
 8008742:	461a      	mov	r2, r3
 8008744:	2102      	movs	r1, #2
 8008746:	f44f 70ef 	mov.w	r0, #478	; 0x1de
 800874a:	f7fe ff01 	bl	8007550 <mpu_write_mem>
 800874e:	4603      	mov	r3, r0
}
 8008750:	4618      	mov	r0, r3
 8008752:	3710      	adds	r7, #16
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}
 8008758:	cccccccd 	.word	0xcccccccd

0800875c <dmp_set_tap_time_multi>:
 *  @brief      Set max time between taps to register as a multi-tap.
 *  @param[in]  time    Max milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time_multi(unsigned short time)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b084      	sub	sp, #16
 8008760:	af00      	add	r7, sp, #0
 8008762:	4603      	mov	r3, r0
 8008764:	80fb      	strh	r3, [r7, #6]
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
 8008766:	88fb      	ldrh	r3, [r7, #6]
 8008768:	4a0c      	ldr	r2, [pc, #48]	; (800879c <dmp_set_tap_time_multi+0x40>)
 800876a:	fba2 2303 	umull	r2, r3, r2, r3
 800876e:	089b      	lsrs	r3, r3, #2
 8008770:	81fb      	strh	r3, [r7, #14]
    tmp[0] = (unsigned char)(dmp_time >> 8);
 8008772:	89fb      	ldrh	r3, [r7, #14]
 8008774:	0a1b      	lsrs	r3, r3, #8
 8008776:	b29b      	uxth	r3, r3
 8008778:	b2db      	uxtb	r3, r3
 800877a:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
 800877c:	89fb      	ldrh	r3, [r7, #14]
 800877e:	b2db      	uxtb	r3, r3
 8008780:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_218, 2, tmp);
 8008782:	f107 030c 	add.w	r3, r7, #12
 8008786:	461a      	mov	r2, r3
 8008788:	2102      	movs	r1, #2
 800878a:	f44f 70ed 	mov.w	r0, #474	; 0x1da
 800878e:	f7fe fedf 	bl	8007550 <mpu_write_mem>
 8008792:	4603      	mov	r3, r0
}
 8008794:	4618      	mov	r0, r3
 8008796:	3710      	adds	r7, #16
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}
 800879c:	cccccccd 	.word	0xcccccccd

080087a0 <dmp_set_shake_reject_thresh>:
 *  @param[in]  sf      Gyro scale factor.
 *  @param[in]  thresh  Gyro threshold in dps.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_thresh(long sf, unsigned short thresh)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b084      	sub	sp, #16
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
 80087a8:	460b      	mov	r3, r1
 80087aa:	807b      	strh	r3, [r7, #2]
    unsigned char tmp[4];
    long thresh_scaled = sf / 1000 * thresh;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	4a13      	ldr	r2, [pc, #76]	; (80087fc <dmp_set_shake_reject_thresh+0x5c>)
 80087b0:	fb82 1203 	smull	r1, r2, r2, r3
 80087b4:	1192      	asrs	r2, r2, #6
 80087b6:	17db      	asrs	r3, r3, #31
 80087b8:	1ad3      	subs	r3, r2, r3
 80087ba:	887a      	ldrh	r2, [r7, #2]
 80087bc:	fb02 f303 	mul.w	r3, r2, r3
 80087c0:	60fb      	str	r3, [r7, #12]
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	161b      	asrs	r3, r3, #24
 80087c6:	b2db      	uxtb	r3, r3
 80087c8:	723b      	strb	r3, [r7, #8]
    tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	141b      	asrs	r3, r3, #16
 80087ce:	b2db      	uxtb	r3, r3
 80087d0:	727b      	strb	r3, [r7, #9]
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	121b      	asrs	r3, r3, #8
 80087d6:	b2db      	uxtb	r3, r3
 80087d8:	72bb      	strb	r3, [r7, #10]
    tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	b2db      	uxtb	r3, r3
 80087de:	72fb      	strb	r3, [r7, #11]
    return mpu_write_mem(D_1_92, 4, tmp);
 80087e0:	f107 0308 	add.w	r3, r7, #8
 80087e4:	461a      	mov	r2, r3
 80087e6:	2104      	movs	r1, #4
 80087e8:	f44f 70ae 	mov.w	r0, #348	; 0x15c
 80087ec:	f7fe feb0 	bl	8007550 <mpu_write_mem>
 80087f0:	4603      	mov	r3, r0
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3710      	adds	r7, #16
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}
 80087fa:	bf00      	nop
 80087fc:	10624dd3 	.word	0x10624dd3

08008800 <dmp_set_shake_reject_time>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_time(unsigned short time)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b084      	sub	sp, #16
 8008804:	af00      	add	r7, sp, #0
 8008806:	4603      	mov	r3, r0
 8008808:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
 800880a:	88fb      	ldrh	r3, [r7, #6]
 800880c:	4a0c      	ldr	r2, [pc, #48]	; (8008840 <dmp_set_shake_reject_time+0x40>)
 800880e:	fba2 2303 	umull	r2, r3, r2, r3
 8008812:	089b      	lsrs	r3, r3, #2
 8008814:	80fb      	strh	r3, [r7, #6]
    tmp[0] = time >> 8;
 8008816:	88fb      	ldrh	r3, [r7, #6]
 8008818:	0a1b      	lsrs	r3, r3, #8
 800881a:	b29b      	uxth	r3, r3
 800881c:	b2db      	uxtb	r3, r3
 800881e:	733b      	strb	r3, [r7, #12]
    tmp[1] = time & 0xFF;
 8008820:	88fb      	ldrh	r3, [r7, #6]
 8008822:	b2db      	uxtb	r3, r3
 8008824:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_90,2,tmp);
 8008826:	f107 030c 	add.w	r3, r7, #12
 800882a:	461a      	mov	r2, r3
 800882c:	2102      	movs	r1, #2
 800882e:	f44f 70ad 	mov.w	r0, #346	; 0x15a
 8008832:	f7fe fe8d 	bl	8007550 <mpu_write_mem>
 8008836:	4603      	mov	r3, r0
}
 8008838:	4618      	mov	r0, r3
 800883a:	3710      	adds	r7, #16
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}
 8008840:	cccccccd 	.word	0xcccccccd

08008844 <dmp_set_shake_reject_timeout>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_timeout(unsigned short time)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b084      	sub	sp, #16
 8008848:	af00      	add	r7, sp, #0
 800884a:	4603      	mov	r3, r0
 800884c:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
 800884e:	88fb      	ldrh	r3, [r7, #6]
 8008850:	4a0c      	ldr	r2, [pc, #48]	; (8008884 <dmp_set_shake_reject_timeout+0x40>)
 8008852:	fba2 2303 	umull	r2, r3, r2, r3
 8008856:	089b      	lsrs	r3, r3, #2
 8008858:	80fb      	strh	r3, [r7, #6]
    tmp[0] = time >> 8;
 800885a:	88fb      	ldrh	r3, [r7, #6]
 800885c:	0a1b      	lsrs	r3, r3, #8
 800885e:	b29b      	uxth	r3, r3
 8008860:	b2db      	uxtb	r3, r3
 8008862:	733b      	strb	r3, [r7, #12]
    tmp[1] = time & 0xFF;
 8008864:	88fb      	ldrh	r3, [r7, #6]
 8008866:	b2db      	uxtb	r3, r3
 8008868:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_88,2,tmp);
 800886a:	f107 030c 	add.w	r3, r7, #12
 800886e:	461a      	mov	r2, r3
 8008870:	2102      	movs	r1, #2
 8008872:	f44f 70ac 	mov.w	r0, #344	; 0x158
 8008876:	f7fe fe6b 	bl	8007550 <mpu_write_mem>
 800887a:	4603      	mov	r3, r0
}
 800887c:	4618      	mov	r0, r3
 800887e:	3710      	adds	r7, #16
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}
 8008884:	cccccccd 	.word	0xcccccccd

08008888 <dmp_enable_feature>:
 *  mutually exclusive.
 *  @param[in]  mask    Mask of features to enable.
 *  @return     0 if successful.
 */
int dmp_enable_feature(unsigned short mask)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b086      	sub	sp, #24
 800888c:	af00      	add	r7, sp, #0
 800888e:	4603      	mov	r3, r0
 8008890:	80fb      	strh	r3, [r7, #6]

    /* TODO: All of these settings can probably be integrated into the default
     * DMP image.
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
 8008892:	2302      	movs	r3, #2
 8008894:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
 8008896:	23ca      	movs	r3, #202	; 0xca
 8008898:	737b      	strb	r3, [r7, #13]
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
 800889a:	23e3      	movs	r3, #227	; 0xe3
 800889c:	73bb      	strb	r3, [r7, #14]
    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
 800889e:	2309      	movs	r3, #9
 80088a0:	73fb      	strb	r3, [r7, #15]
    mpu_write_mem(D_0_104, 4, tmp);
 80088a2:	f107 030c 	add.w	r3, r7, #12
 80088a6:	461a      	mov	r2, r3
 80088a8:	2104      	movs	r1, #4
 80088aa:	2068      	movs	r0, #104	; 0x68
 80088ac:	f7fe fe50 	bl	8007550 <mpu_write_mem>

    /* Send sensor data to the FIFO. */
    tmp[0] = 0xA3;
 80088b0:	23a3      	movs	r3, #163	; 0xa3
 80088b2:	733b      	strb	r3, [r7, #12]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 80088b4:	88fb      	ldrh	r3, [r7, #6]
 80088b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d006      	beq.n	80088cc <dmp_enable_feature+0x44>
        tmp[1] = 0xC0;
 80088be:	23c0      	movs	r3, #192	; 0xc0
 80088c0:	737b      	strb	r3, [r7, #13]
        tmp[2] = 0xC8;
 80088c2:	23c8      	movs	r3, #200	; 0xc8
 80088c4:	73bb      	strb	r3, [r7, #14]
        tmp[3] = 0xC2;
 80088c6:	23c2      	movs	r3, #194	; 0xc2
 80088c8:	73fb      	strb	r3, [r7, #15]
 80088ca:	e005      	b.n	80088d8 <dmp_enable_feature+0x50>
    } else {
        tmp[1] = 0xA3;
 80088cc:	23a3      	movs	r3, #163	; 0xa3
 80088ce:	737b      	strb	r3, [r7, #13]
        tmp[2] = 0xA3;
 80088d0:	23a3      	movs	r3, #163	; 0xa3
 80088d2:	73bb      	strb	r3, [r7, #14]
        tmp[3] = 0xA3;
 80088d4:	23a3      	movs	r3, #163	; 0xa3
 80088d6:	73fb      	strb	r3, [r7, #15]
    }
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 80088d8:	88fb      	ldrh	r3, [r7, #6]
 80088da:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d006      	beq.n	80088f0 <dmp_enable_feature+0x68>
        tmp[4] = 0xC4;
 80088e2:	23c4      	movs	r3, #196	; 0xc4
 80088e4:	743b      	strb	r3, [r7, #16]
        tmp[5] = 0xCC;
 80088e6:	23cc      	movs	r3, #204	; 0xcc
 80088e8:	747b      	strb	r3, [r7, #17]
        tmp[6] = 0xC6;
 80088ea:	23c6      	movs	r3, #198	; 0xc6
 80088ec:	74bb      	strb	r3, [r7, #18]
 80088ee:	e005      	b.n	80088fc <dmp_enable_feature+0x74>
    } else {
        tmp[4] = 0xA3;
 80088f0:	23a3      	movs	r3, #163	; 0xa3
 80088f2:	743b      	strb	r3, [r7, #16]
        tmp[5] = 0xA3;
 80088f4:	23a3      	movs	r3, #163	; 0xa3
 80088f6:	747b      	strb	r3, [r7, #17]
        tmp[6] = 0xA3;
 80088f8:	23a3      	movs	r3, #163	; 0xa3
 80088fa:	74bb      	strb	r3, [r7, #18]
    }
    tmp[7] = 0xA3;
 80088fc:	23a3      	movs	r3, #163	; 0xa3
 80088fe:	74fb      	strb	r3, [r7, #19]
    tmp[8] = 0xA3;
 8008900:	23a3      	movs	r3, #163	; 0xa3
 8008902:	753b      	strb	r3, [r7, #20]
    tmp[9] = 0xA3;
 8008904:	23a3      	movs	r3, #163	; 0xa3
 8008906:	757b      	strb	r3, [r7, #21]
    mpu_write_mem(CFG_15,10,tmp);
 8008908:	f107 030c 	add.w	r3, r7, #12
 800890c:	461a      	mov	r2, r3
 800890e:	210a      	movs	r1, #10
 8008910:	f640 20a7 	movw	r0, #2727	; 0xaa7
 8008914:	f7fe fe1c 	bl	8007550 <mpu_write_mem>

    /* Send gesture data to the FIFO. */
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 8008918:	88fb      	ldrh	r3, [r7, #6]
 800891a:	f003 0303 	and.w	r3, r3, #3
 800891e:	2b00      	cmp	r3, #0
 8008920:	d002      	beq.n	8008928 <dmp_enable_feature+0xa0>
        tmp[0] = DINA20;
 8008922:	2320      	movs	r3, #32
 8008924:	733b      	strb	r3, [r7, #12]
 8008926:	e001      	b.n	800892c <dmp_enable_feature+0xa4>
    else
        tmp[0] = 0xD8;
 8008928:	23d8      	movs	r3, #216	; 0xd8
 800892a:	733b      	strb	r3, [r7, #12]
    mpu_write_mem(CFG_27,1,tmp);
 800892c:	f107 030c 	add.w	r3, r7, #12
 8008930:	461a      	mov	r2, r3
 8008932:	2101      	movs	r1, #1
 8008934:	f640 20b6 	movw	r0, #2742	; 0xab6
 8008938:	f7fe fe0a 	bl	8007550 <mpu_write_mem>

    if (mask & DMP_FEATURE_GYRO_CAL)
 800893c:	88fb      	ldrh	r3, [r7, #6]
 800893e:	f003 0320 	and.w	r3, r3, #32
 8008942:	2b00      	cmp	r3, #0
 8008944:	d003      	beq.n	800894e <dmp_enable_feature+0xc6>
        dmp_enable_gyro_cal(1);
 8008946:	2001      	movs	r0, #1
 8008948:	f000 f8c6 	bl	8008ad8 <dmp_enable_gyro_cal>
 800894c:	e002      	b.n	8008954 <dmp_enable_feature+0xcc>
    else
        dmp_enable_gyro_cal(0);
 800894e:	2000      	movs	r0, #0
 8008950:	f000 f8c2 	bl	8008ad8 <dmp_enable_gyro_cal>

    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 8008954:	88fb      	ldrh	r3, [r7, #6]
 8008956:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800895a:	2b00      	cmp	r3, #0
 800895c:	d01d      	beq.n	800899a <dmp_enable_feature+0x112>
        if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
 800895e:	88fb      	ldrh	r3, [r7, #6]
 8008960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008964:	2b00      	cmp	r3, #0
 8008966:	d008      	beq.n	800897a <dmp_enable_feature+0xf2>
            tmp[0] = 0xB2;
 8008968:	23b2      	movs	r3, #178	; 0xb2
 800896a:	733b      	strb	r3, [r7, #12]
            tmp[1] = 0x8B;
 800896c:	238b      	movs	r3, #139	; 0x8b
 800896e:	737b      	strb	r3, [r7, #13]
            tmp[2] = 0xB6;
 8008970:	23b6      	movs	r3, #182	; 0xb6
 8008972:	73bb      	strb	r3, [r7, #14]
            tmp[3] = 0x9B;
 8008974:	239b      	movs	r3, #155	; 0x9b
 8008976:	73fb      	strb	r3, [r7, #15]
 8008978:	e007      	b.n	800898a <dmp_enable_feature+0x102>
        } else {
            tmp[0] = DINAC0;
 800897a:	23b0      	movs	r3, #176	; 0xb0
 800897c:	733b      	strb	r3, [r7, #12]
            tmp[1] = DINA80;
 800897e:	2380      	movs	r3, #128	; 0x80
 8008980:	737b      	strb	r3, [r7, #13]
            tmp[2] = DINAC2;
 8008982:	23b4      	movs	r3, #180	; 0xb4
 8008984:	73bb      	strb	r3, [r7, #14]
            tmp[3] = DINA90;
 8008986:	2390      	movs	r3, #144	; 0x90
 8008988:	73fb      	strb	r3, [r7, #15]
        }
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
 800898a:	f107 030c 	add.w	r3, r7, #12
 800898e:	461a      	mov	r2, r3
 8008990:	2104      	movs	r1, #4
 8008992:	f640 20a2 	movw	r0, #2722	; 0xaa2
 8008996:	f7fe fddb 	bl	8007550 <mpu_write_mem>
    }

    if (mask & DMP_FEATURE_TAP) {
 800899a:	88fb      	ldrh	r3, [r7, #6]
 800899c:	f003 0301 	and.w	r3, r3, #1
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d025      	beq.n	80089f0 <dmp_enable_feature+0x168>
        /* Enable tap. */
        tmp[0] = 0xF8;
 80089a4:	23f8      	movs	r3, #248	; 0xf8
 80089a6:	733b      	strb	r3, [r7, #12]
        mpu_write_mem(CFG_20, 1, tmp);
 80089a8:	f107 030c 	add.w	r3, r7, #12
 80089ac:	461a      	mov	r2, r3
 80089ae:	2101      	movs	r1, #1
 80089b0:	f44f 600b 	mov.w	r0, #2224	; 0x8b0
 80089b4:	f7fe fdcc 	bl	8007550 <mpu_write_mem>
        dmp_set_tap_thresh(TAP_XYZ, 250);
 80089b8:	21fa      	movs	r1, #250	; 0xfa
 80089ba:	2007      	movs	r0, #7
 80089bc:	f7ff fd2e 	bl	800841c <dmp_set_tap_thresh>
        dmp_set_tap_axes(TAP_XYZ);
 80089c0:	2007      	movs	r0, #7
 80089c2:	f7ff fe55 	bl	8008670 <dmp_set_tap_axes>
        dmp_set_tap_count(1);
 80089c6:	2001      	movs	r0, #1
 80089c8:	f7ff fe84 	bl	80086d4 <dmp_set_tap_count>
        dmp_set_tap_time(100);
 80089cc:	2064      	movs	r0, #100	; 0x64
 80089ce:	f7ff fea3 	bl	8008718 <dmp_set_tap_time>
        dmp_set_tap_time_multi(500);
 80089d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80089d6:	f7ff fec1 	bl	800875c <dmp_set_tap_time_multi>

        dmp_set_shake_reject_thresh(GYRO_SF, 200);
 80089da:	21c8      	movs	r1, #200	; 0xc8
 80089dc:	483c      	ldr	r0, [pc, #240]	; (8008ad0 <dmp_enable_feature+0x248>)
 80089de:	f7ff fedf 	bl	80087a0 <dmp_set_shake_reject_thresh>
        dmp_set_shake_reject_time(40);
 80089e2:	2028      	movs	r0, #40	; 0x28
 80089e4:	f7ff ff0c 	bl	8008800 <dmp_set_shake_reject_time>
        dmp_set_shake_reject_timeout(10);
 80089e8:	200a      	movs	r0, #10
 80089ea:	f7ff ff2b 	bl	8008844 <dmp_set_shake_reject_timeout>
 80089ee:	e009      	b.n	8008a04 <dmp_enable_feature+0x17c>
    } else {
        tmp[0] = 0xD8;
 80089f0:	23d8      	movs	r3, #216	; 0xd8
 80089f2:	733b      	strb	r3, [r7, #12]
        mpu_write_mem(CFG_20, 1, tmp);
 80089f4:	f107 030c 	add.w	r3, r7, #12
 80089f8:	461a      	mov	r2, r3
 80089fa:	2101      	movs	r1, #1
 80089fc:	f44f 600b 	mov.w	r0, #2224	; 0x8b0
 8008a00:	f7fe fda6 	bl	8007550 <mpu_write_mem>
    }

    if (mask & DMP_FEATURE_ANDROID_ORIENT) {
 8008a04:	88fb      	ldrh	r3, [r7, #6]
 8008a06:	f003 0302 	and.w	r3, r3, #2
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d002      	beq.n	8008a14 <dmp_enable_feature+0x18c>
        tmp[0] = 0xD9;
 8008a0e:	23d9      	movs	r3, #217	; 0xd9
 8008a10:	733b      	strb	r3, [r7, #12]
 8008a12:	e001      	b.n	8008a18 <dmp_enable_feature+0x190>
    } else
        tmp[0] = 0xD8;
 8008a14:	23d8      	movs	r3, #216	; 0xd8
 8008a16:	733b      	strb	r3, [r7, #12]
    mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);
 8008a18:	f107 030c 	add.w	r3, r7, #12
 8008a1c:	461a      	mov	r2, r3
 8008a1e:	2101      	movs	r1, #1
 8008a20:	f240 703d 	movw	r0, #1853	; 0x73d
 8008a24:	f7fe fd94 	bl	8007550 <mpu_write_mem>

    if (mask & DMP_FEATURE_LP_QUAT)
 8008a28:	88fb      	ldrh	r3, [r7, #6]
 8008a2a:	f003 0304 	and.w	r3, r3, #4
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d003      	beq.n	8008a3a <dmp_enable_feature+0x1b2>
        dmp_enable_lp_quat(1);
 8008a32:	2001      	movs	r0, #1
 8008a34:	f000 f880 	bl	8008b38 <dmp_enable_lp_quat>
 8008a38:	e002      	b.n	8008a40 <dmp_enable_feature+0x1b8>
    else
        dmp_enable_lp_quat(0);
 8008a3a:	2000      	movs	r0, #0
 8008a3c:	f000 f87c 	bl	8008b38 <dmp_enable_lp_quat>

    if (mask & DMP_FEATURE_6X_LP_QUAT)
 8008a40:	88fb      	ldrh	r3, [r7, #6]
 8008a42:	f003 0310 	and.w	r3, r3, #16
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d003      	beq.n	8008a52 <dmp_enable_feature+0x1ca>
        dmp_enable_6x_lp_quat(1);
 8008a4a:	2001      	movs	r0, #1
 8008a4c:	f000 f89b 	bl	8008b86 <dmp_enable_6x_lp_quat>
 8008a50:	e002      	b.n	8008a58 <dmp_enable_feature+0x1d0>
    else
        dmp_enable_6x_lp_quat(0);
 8008a52:	2000      	movs	r0, #0
 8008a54:	f000 f897 	bl	8008b86 <dmp_enable_6x_lp_quat>

    /* Pedometer is always enabled. */
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
 8008a58:	88fb      	ldrh	r3, [r7, #6]
 8008a5a:	f043 0308 	orr.w	r3, r3, #8
 8008a5e:	b29a      	uxth	r2, r3
 8008a60:	4b1c      	ldr	r3, [pc, #112]	; (8008ad4 <dmp_enable_feature+0x24c>)
 8008a62:	815a      	strh	r2, [r3, #10]
    mpu_reset_fifo();
 8008a64:	f7fd f944 	bl	8005cf0 <mpu_reset_fifo>

    dmp.packet_length = 0;
 8008a68:	4b1a      	ldr	r3, [pc, #104]	; (8008ad4 <dmp_enable_feature+0x24c>)
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
 8008a6e:	88fb      	ldrh	r3, [r7, #6]
 8008a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d005      	beq.n	8008a84 <dmp_enable_feature+0x1fc>
        dmp.packet_length += 6;
 8008a78:	4b16      	ldr	r3, [pc, #88]	; (8008ad4 <dmp_enable_feature+0x24c>)
 8008a7a:	7b9b      	ldrb	r3, [r3, #14]
 8008a7c:	3306      	adds	r3, #6
 8008a7e:	b2da      	uxtb	r2, r3
 8008a80:	4b14      	ldr	r3, [pc, #80]	; (8008ad4 <dmp_enable_feature+0x24c>)
 8008a82:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_ANY_GYRO)
 8008a84:	88fb      	ldrh	r3, [r7, #6]
 8008a86:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d005      	beq.n	8008a9a <dmp_enable_feature+0x212>
        dmp.packet_length += 6;
 8008a8e:	4b11      	ldr	r3, [pc, #68]	; (8008ad4 <dmp_enable_feature+0x24c>)
 8008a90:	7b9b      	ldrb	r3, [r3, #14]
 8008a92:	3306      	adds	r3, #6
 8008a94:	b2da      	uxtb	r2, r3
 8008a96:	4b0f      	ldr	r3, [pc, #60]	; (8008ad4 <dmp_enable_feature+0x24c>)
 8008a98:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
 8008a9a:	88fb      	ldrh	r3, [r7, #6]
 8008a9c:	f003 0314 	and.w	r3, r3, #20
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d005      	beq.n	8008ab0 <dmp_enable_feature+0x228>
        dmp.packet_length += 16;
 8008aa4:	4b0b      	ldr	r3, [pc, #44]	; (8008ad4 <dmp_enable_feature+0x24c>)
 8008aa6:	7b9b      	ldrb	r3, [r3, #14]
 8008aa8:	3310      	adds	r3, #16
 8008aaa:	b2da      	uxtb	r2, r3
 8008aac:	4b09      	ldr	r3, [pc, #36]	; (8008ad4 <dmp_enable_feature+0x24c>)
 8008aae:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 8008ab0:	88fb      	ldrh	r3, [r7, #6]
 8008ab2:	f003 0303 	and.w	r3, r3, #3
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d005      	beq.n	8008ac6 <dmp_enable_feature+0x23e>
        dmp.packet_length += 4;
 8008aba:	4b06      	ldr	r3, [pc, #24]	; (8008ad4 <dmp_enable_feature+0x24c>)
 8008abc:	7b9b      	ldrb	r3, [r3, #14]
 8008abe:	3304      	adds	r3, #4
 8008ac0:	b2da      	uxtb	r2, r3
 8008ac2:	4b04      	ldr	r3, [pc, #16]	; (8008ad4 <dmp_enable_feature+0x24c>)
 8008ac4:	739a      	strb	r2, [r3, #14]

    return 0;
 8008ac6:	2300      	movs	r3, #0
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3718      	adds	r7, #24
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}
 8008ad0:	02cae309 	.word	0x02cae309
 8008ad4:	20000324 	.word	0x20000324

08008ad8 <dmp_enable_gyro_cal>:
 *  subtracted from the gyro output.
 *  @param[in]  enable  1 to enable gyro calibration.
 *  @return     0 if successful.
 */
int dmp_enable_gyro_cal(unsigned char enable)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b088      	sub	sp, #32
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	4603      	mov	r3, r0
 8008ae0:	71fb      	strb	r3, [r7, #7]
    if (enable) {
 8008ae2:	79fb      	ldrb	r3, [r7, #7]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d00f      	beq.n	8008b08 <dmp_enable_gyro_cal+0x30>
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
 8008ae8:	4a11      	ldr	r2, [pc, #68]	; (8008b30 <dmp_enable_gyro_cal+0x58>)
 8008aea:	f107 0314 	add.w	r3, r7, #20
 8008aee:	ca07      	ldmia	r2, {r0, r1, r2}
 8008af0:	c303      	stmia	r3!, {r0, r1}
 8008af2:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 8008af4:	f107 0314 	add.w	r3, r7, #20
 8008af8:	461a      	mov	r2, r3
 8008afa:	2109      	movs	r1, #9
 8008afc:	f44f 6097 	mov.w	r0, #1208	; 0x4b8
 8008b00:	f7fe fd26 	bl	8007550 <mpu_write_mem>
 8008b04:	4603      	mov	r3, r0
 8008b06:	e00e      	b.n	8008b26 <dmp_enable_gyro_cal+0x4e>
    } else {
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
 8008b08:	4a0a      	ldr	r2, [pc, #40]	; (8008b34 <dmp_enable_gyro_cal+0x5c>)
 8008b0a:	f107 0308 	add.w	r3, r7, #8
 8008b0e:	ca07      	ldmia	r2, {r0, r1, r2}
 8008b10:	c303      	stmia	r3!, {r0, r1}
 8008b12:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 8008b14:	f107 0308 	add.w	r3, r7, #8
 8008b18:	461a      	mov	r2, r3
 8008b1a:	2109      	movs	r1, #9
 8008b1c:	f44f 6097 	mov.w	r0, #1208	; 0x4b8
 8008b20:	f7fe fd16 	bl	8007550 <mpu_write_mem>
 8008b24:	4603      	mov	r3, r0
    }
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	3720      	adds	r7, #32
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}
 8008b2e:	bf00      	nop
 8008b30:	0800c960 	.word	0x0800c960
 8008b34:	0800c96c 	.word	0x0800c96c

08008b38 <dmp_enable_lp_quat>:
 *  exclusive.
 *  @param[in]  enable  1 to enable 3-axis quaternion.
 *  @return     0 if successful.
 */
int dmp_enable_lp_quat(unsigned char enable)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b084      	sub	sp, #16
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	4603      	mov	r3, r0
 8008b40:	71fb      	strb	r3, [r7, #7]
    unsigned char regs[4];
    if (enable) {
 8008b42:	79fb      	ldrb	r3, [r7, #7]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d008      	beq.n	8008b5a <dmp_enable_lp_quat+0x22>
        regs[0] = DINBC0;
 8008b48:	23c0      	movs	r3, #192	; 0xc0
 8008b4a:	733b      	strb	r3, [r7, #12]
        regs[1] = DINBC2;
 8008b4c:	23c2      	movs	r3, #194	; 0xc2
 8008b4e:	737b      	strb	r3, [r7, #13]
        regs[2] = DINBC4;
 8008b50:	23c4      	movs	r3, #196	; 0xc4
 8008b52:	73bb      	strb	r3, [r7, #14]
        regs[3] = DINBC6;
 8008b54:	23c6      	movs	r3, #198	; 0xc6
 8008b56:	73fb      	strb	r3, [r7, #15]
 8008b58:	e006      	b.n	8008b68 <dmp_enable_lp_quat+0x30>
    }
    else
        memset(regs, 0x8B, 4);
 8008b5a:	f107 030c 	add.w	r3, r7, #12
 8008b5e:	2204      	movs	r2, #4
 8008b60:	218b      	movs	r1, #139	; 0x8b
 8008b62:	4618      	mov	r0, r3
 8008b64:	f001 f87c 	bl	8009c60 <memset>

    mpu_write_mem(CFG_LP_QUAT, 4, regs);
 8008b68:	f107 030c 	add.w	r3, r7, #12
 8008b6c:	461a      	mov	r2, r3
 8008b6e:	2104      	movs	r1, #4
 8008b70:	f640 2098 	movw	r0, #2712	; 0xa98
 8008b74:	f7fe fcec 	bl	8007550 <mpu_write_mem>

    return mpu_reset_fifo();
 8008b78:	f7fd f8ba 	bl	8005cf0 <mpu_reset_fifo>
 8008b7c:	4603      	mov	r3, r0
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3710      	adds	r7, #16
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}

08008b86 <dmp_enable_6x_lp_quat>:
 *  exclusive.
 *  @param[in]   enable  1 to enable 6-axis quaternion.
 *  @return      0 if successful.
 */
int dmp_enable_6x_lp_quat(unsigned char enable)
{
 8008b86:	b580      	push	{r7, lr}
 8008b88:	b084      	sub	sp, #16
 8008b8a:	af00      	add	r7, sp, #0
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	71fb      	strb	r3, [r7, #7]
    unsigned char regs[4];
    if (enable) {
 8008b90:	79fb      	ldrb	r3, [r7, #7]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d008      	beq.n	8008ba8 <dmp_enable_6x_lp_quat+0x22>
        regs[0] = DINA20;
 8008b96:	2320      	movs	r3, #32
 8008b98:	733b      	strb	r3, [r7, #12]
        regs[1] = DINA28;
 8008b9a:	2328      	movs	r3, #40	; 0x28
 8008b9c:	737b      	strb	r3, [r7, #13]
        regs[2] = DINA30;
 8008b9e:	2330      	movs	r3, #48	; 0x30
 8008ba0:	73bb      	strb	r3, [r7, #14]
        regs[3] = DINA38;
 8008ba2:	2338      	movs	r3, #56	; 0x38
 8008ba4:	73fb      	strb	r3, [r7, #15]
 8008ba6:	e006      	b.n	8008bb6 <dmp_enable_6x_lp_quat+0x30>
    } else
        memset(regs, 0xA3, 4);
 8008ba8:	f107 030c 	add.w	r3, r7, #12
 8008bac:	2204      	movs	r2, #4
 8008bae:	21a3      	movs	r1, #163	; 0xa3
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	f001 f855 	bl	8009c60 <memset>

    mpu_write_mem(CFG_8, 4, regs);
 8008bb6:	f107 030c 	add.w	r3, r7, #12
 8008bba:	461a      	mov	r2, r3
 8008bbc:	2104      	movs	r1, #4
 8008bbe:	f640 209e 	movw	r0, #2718	; 0xa9e
 8008bc2:	f7fe fcc5 	bl	8007550 <mpu_write_mem>

    return mpu_reset_fifo();
 8008bc6:	f7fd f893 	bl	8005cf0 <mpu_reset_fifo>
 8008bca:	4603      	mov	r3, r0
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	3710      	adds	r7, #16
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}

08008bd4 <decode_gesture>:
 *  @brief      Decode the four-byte gesture data and execute any callbacks.
 *  @param[in]  gesture Gesture data from DMP packet.
 *  @return     0 if successful.
 */
static int decode_gesture(unsigned char *gesture)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b084      	sub	sp, #16
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
    unsigned char tap, android_orient;

    android_orient = gesture[3] & 0xC0;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	3303      	adds	r3, #3
 8008be0:	781b      	ldrb	r3, [r3, #0]
 8008be2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008be6:	73fb      	strb	r3, [r7, #15]
    tap = 0x3F & gesture[3];
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	3303      	adds	r3, #3
 8008bec:	781b      	ldrb	r3, [r3, #0]
 8008bee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008bf2:	73bb      	strb	r3, [r7, #14]

    if (gesture[1] & INT_SRC_TAP) {
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	3301      	adds	r3, #1
 8008bf8:	781b      	ldrb	r3, [r3, #0]
 8008bfa:	f003 0301 	and.w	r3, r3, #1
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d012      	beq.n	8008c28 <decode_gesture+0x54>
        unsigned char direction, count;
        direction = tap >> 3;
 8008c02:	7bbb      	ldrb	r3, [r7, #14]
 8008c04:	08db      	lsrs	r3, r3, #3
 8008c06:	737b      	strb	r3, [r7, #13]
        count = (tap % 8) + 1;
 8008c08:	7bbb      	ldrb	r3, [r7, #14]
 8008c0a:	f003 0307 	and.w	r3, r3, #7
 8008c0e:	b2db      	uxtb	r3, r3
 8008c10:	3301      	adds	r3, #1
 8008c12:	733b      	strb	r3, [r7, #12]
        if (dmp.tap_cb)
 8008c14:	4b10      	ldr	r3, [pc, #64]	; (8008c58 <decode_gesture+0x84>)
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d005      	beq.n	8008c28 <decode_gesture+0x54>
            dmp.tap_cb(direction, count);
 8008c1c:	4b0e      	ldr	r3, [pc, #56]	; (8008c58 <decode_gesture+0x84>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	7b39      	ldrb	r1, [r7, #12]
 8008c22:	7b7a      	ldrb	r2, [r7, #13]
 8008c24:	4610      	mov	r0, r2
 8008c26:	4798      	blx	r3
    }

    if (gesture[1] & INT_SRC_ANDROID_ORIENT) {
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	3301      	adds	r3, #1
 8008c2c:	781b      	ldrb	r3, [r3, #0]
 8008c2e:	f003 0308 	and.w	r3, r3, #8
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d00a      	beq.n	8008c4c <decode_gesture+0x78>
        if (dmp.android_orient_cb)
 8008c36:	4b08      	ldr	r3, [pc, #32]	; (8008c58 <decode_gesture+0x84>)
 8008c38:	685b      	ldr	r3, [r3, #4]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d006      	beq.n	8008c4c <decode_gesture+0x78>
            dmp.android_orient_cb(android_orient >> 6);
 8008c3e:	4b06      	ldr	r3, [pc, #24]	; (8008c58 <decode_gesture+0x84>)
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	7bfa      	ldrb	r2, [r7, #15]
 8008c44:	0992      	lsrs	r2, r2, #6
 8008c46:	b2d2      	uxtb	r2, r2
 8008c48:	4610      	mov	r0, r2
 8008c4a:	4798      	blx	r3
    }

    return 0;
 8008c4c:	2300      	movs	r3, #0
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3710      	adds	r7, #16
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}
 8008c56:	bf00      	nop
 8008c58:	20000324 	.word	0x20000324

08008c5c <dmp_read_fifo>:
 *  @param[out] more        Number of remaining packets.
 *  @return     0 if successful.
 */
int dmp_read_fifo(short *gyro, short *accel, long *quat,
    unsigned long *timestamp, short *sensors, unsigned char *more)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b092      	sub	sp, #72	; 0x48
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	60f8      	str	r0, [r7, #12]
 8008c64:	60b9      	str	r1, [r7, #8]
 8008c66:	607a      	str	r2, [r7, #4]
 8008c68:	603b      	str	r3, [r7, #0]
    unsigned char fifo_data[MAX_PACKET_LENGTH];
    unsigned char ii = 0;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* TODO: sensors[0] only changes when dmp_enable_feature is called. We can
     * cache this value and save some cycles.
     */
    sensors[0] = 0;
 8008c70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c72:	2200      	movs	r2, #0
 8008c74:	801a      	strh	r2, [r3, #0]

    /* Get a packet. */
    if (mpu_read_fifo_stream(dmp.packet_length, fifo_data, more))
 8008c76:	4bae      	ldr	r3, [pc, #696]	; (8008f30 <dmp_read_fifo+0x2d4>)
 8008c78:	7b9b      	ldrb	r3, [r3, #14]
 8008c7a:	b29b      	uxth	r3, r3
 8008c7c:	f107 0120 	add.w	r1, r7, #32
 8008c80:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008c82:	4618      	mov	r0, r3
 8008c84:	f7fd fcc8 	bl	8006618 <mpu_read_fifo_stream>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d002      	beq.n	8008c94 <dmp_read_fifo+0x38>
        return -1;
 8008c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8008c92:	e148      	b.n	8008f26 <dmp_read_fifo+0x2ca>

    /* Parse DMP packet. */
    if (dmp.feature_mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT)) {
 8008c94:	4ba6      	ldr	r3, [pc, #664]	; (8008f30 <dmp_read_fifo+0x2d4>)
 8008c96:	895b      	ldrh	r3, [r3, #10]
 8008c98:	f003 0314 	and.w	r3, r3, #20
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	f000 808a 	beq.w	8008db6 <dmp_read_fifo+0x15a>
#ifdef FIFO_CORRUPTION_CHECK
        long quat_q14[4], quat_mag_sq;
#endif
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 8008ca2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008ca6:	061a      	lsls	r2, r3, #24
 8008ca8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8008cac:	041b      	lsls	r3, r3, #16
 8008cae:	431a      	orrs	r2, r3
            ((long)fifo_data[2] << 8) | fifo_data[3];
 8008cb0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008cb4:	021b      	lsls	r3, r3, #8
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 8008cb6:	4313      	orrs	r3, r2
            ((long)fifo_data[2] << 8) | fifo_data[3];
 8008cb8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8008cbc:	431a      	orrs	r2, r3
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	601a      	str	r2, [r3, #0]
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 8008cc2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008cc6:	061a      	lsls	r2, r3, #24
 8008cc8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8008ccc:	041b      	lsls	r3, r3, #16
 8008cce:	431a      	orrs	r2, r3
            ((long)fifo_data[6] << 8) | fifo_data[7];
 8008cd0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008cd4:	021b      	lsls	r3, r3, #8
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 8008cd6:	431a      	orrs	r2, r3
            ((long)fifo_data[6] << 8) | fifo_data[7];
 8008cd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008cdc:	4619      	mov	r1, r3
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	3304      	adds	r3, #4
            ((long)fifo_data[6] << 8) | fifo_data[7];
 8008ce2:	430a      	orrs	r2, r1
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 8008ce4:	601a      	str	r2, [r3, #0]
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 8008ce6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008cea:	061a      	lsls	r2, r3, #24
 8008cec:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8008cf0:	041b      	lsls	r3, r3, #16
 8008cf2:	431a      	orrs	r2, r3
            ((long)fifo_data[10] << 8) | fifo_data[11];
 8008cf4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8008cf8:	021b      	lsls	r3, r3, #8
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 8008cfa:	431a      	orrs	r2, r3
            ((long)fifo_data[10] << 8) | fifo_data[11];
 8008cfc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008d00:	4619      	mov	r1, r3
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	3308      	adds	r3, #8
            ((long)fifo_data[10] << 8) | fifo_data[11];
 8008d06:	430a      	orrs	r2, r1
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 8008d08:	601a      	str	r2, [r3, #0]
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 8008d0a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008d0e:	061a      	lsls	r2, r3, #24
 8008d10:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8008d14:	041b      	lsls	r3, r3, #16
 8008d16:	431a      	orrs	r2, r3
            ((long)fifo_data[14] << 8) | fifo_data[15];
 8008d18:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008d1c:	021b      	lsls	r3, r3, #8
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 8008d1e:	431a      	orrs	r2, r3
            ((long)fifo_data[14] << 8) | fifo_data[15];
 8008d20:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008d24:	4619      	mov	r1, r3
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	330c      	adds	r3, #12
            ((long)fifo_data[14] << 8) | fifo_data[15];
 8008d2a:	430a      	orrs	r2, r1
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 8008d2c:	601a      	str	r2, [r3, #0]
        ii += 16;
 8008d2e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008d32:	3310      	adds	r3, #16
 8008d34:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
         * the FIFO reads might become misaligned.
         *
         * Let's start by scaling down the quaternion data to avoid long long
         * math.
         */
        quat_q14[0] = quat[0] >> 16;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	141b      	asrs	r3, r3, #16
 8008d3e:	613b      	str	r3, [r7, #16]
        quat_q14[1] = quat[1] >> 16;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	3304      	adds	r3, #4
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	141b      	asrs	r3, r3, #16
 8008d48:	617b      	str	r3, [r7, #20]
        quat_q14[2] = quat[2] >> 16;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	3308      	adds	r3, #8
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	141b      	asrs	r3, r3, #16
 8008d52:	61bb      	str	r3, [r7, #24]
        quat_q14[3] = quat[3] >> 16;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	330c      	adds	r3, #12
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	141b      	asrs	r3, r3, #16
 8008d5c:	61fb      	str	r3, [r7, #28]
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8008d5e:	693b      	ldr	r3, [r7, #16]
 8008d60:	693a      	ldr	r2, [r7, #16]
 8008d62:	fb03 f202 	mul.w	r2, r3, r2
 8008d66:	697b      	ldr	r3, [r7, #20]
 8008d68:	6979      	ldr	r1, [r7, #20]
 8008d6a:	fb01 f303 	mul.w	r3, r1, r3
 8008d6e:	441a      	add	r2, r3
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
 8008d70:	69bb      	ldr	r3, [r7, #24]
 8008d72:	69b9      	ldr	r1, [r7, #24]
 8008d74:	fb01 f303 	mul.w	r3, r1, r3
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8008d78:	441a      	add	r2, r3
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
 8008d7a:	69fb      	ldr	r3, [r7, #28]
 8008d7c:	69f9      	ldr	r1, [r7, #28]
 8008d7e:	fb01 f303 	mul.w	r3, r1, r3
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8008d82:	4413      	add	r3, r2
 8008d84:	643b      	str	r3, [r7, #64]	; 0x40
        if ((quat_mag_sq < QUAT_MAG_SQ_MIN) ||
 8008d86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d88:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008d8c:	db03      	blt.n	8008d96 <dmp_read_fifo+0x13a>
 8008d8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d90:	f1b3 5f88 	cmp.w	r3, #285212672	; 0x11000000
 8008d94:	dd07      	ble.n	8008da6 <dmp_read_fifo+0x14a>
            (quat_mag_sq > QUAT_MAG_SQ_MAX)) {
            /* Quaternion is outside of the acceptable threshold. */
            mpu_reset_fifo();
 8008d96:	f7fc ffab 	bl	8005cf0 <mpu_reset_fifo>
            sensors[0] = 0;
 8008d9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	801a      	strh	r2, [r3, #0]
            return -1;
 8008da0:	f04f 33ff 	mov.w	r3, #4294967295
 8008da4:	e0bf      	b.n	8008f26 <dmp_read_fifo+0x2ca>
        }
        sensors[0] |= INV_WXYZ_QUAT;
 8008da6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008da8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008dac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008db0:	b21a      	sxth	r2, r3
 8008db2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008db4:	801a      	strh	r2, [r3, #0]
#endif
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 8008db6:	4b5e      	ldr	r3, [pc, #376]	; (8008f30 <dmp_read_fifo+0x2d4>)
 8008db8:	895b      	ldrh	r3, [r3, #10]
 8008dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d04c      	beq.n	8008e5c <dmp_read_fifo+0x200>
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8008dc2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008dc6:	3348      	adds	r3, #72	; 0x48
 8008dc8:	443b      	add	r3, r7
 8008dca:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8008dce:	021b      	lsls	r3, r3, #8
 8008dd0:	b21a      	sxth	r2, r3
 8008dd2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008dd6:	3301      	adds	r3, #1
 8008dd8:	3348      	adds	r3, #72	; 0x48
 8008dda:	443b      	add	r3, r7
 8008ddc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8008de0:	b21b      	sxth	r3, r3
 8008de2:	4313      	orrs	r3, r2
 8008de4:	b21a      	sxth	r2, r3
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	801a      	strh	r2, [r3, #0]
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 8008dea:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008dee:	3302      	adds	r3, #2
 8008df0:	3348      	adds	r3, #72	; 0x48
 8008df2:	443b      	add	r3, r7
 8008df4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8008df8:	021b      	lsls	r3, r3, #8
 8008dfa:	b219      	sxth	r1, r3
 8008dfc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008e00:	3303      	adds	r3, #3
 8008e02:	3348      	adds	r3, #72	; 0x48
 8008e04:	443b      	add	r3, r7
 8008e06:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8008e0a:	b21a      	sxth	r2, r3
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	3302      	adds	r3, #2
 8008e10:	430a      	orrs	r2, r1
 8008e12:	b212      	sxth	r2, r2
 8008e14:	801a      	strh	r2, [r3, #0]
        accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 8008e16:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008e1a:	3304      	adds	r3, #4
 8008e1c:	3348      	adds	r3, #72	; 0x48
 8008e1e:	443b      	add	r3, r7
 8008e20:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8008e24:	021b      	lsls	r3, r3, #8
 8008e26:	b219      	sxth	r1, r3
 8008e28:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008e2c:	3305      	adds	r3, #5
 8008e2e:	3348      	adds	r3, #72	; 0x48
 8008e30:	443b      	add	r3, r7
 8008e32:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8008e36:	b21a      	sxth	r2, r3
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	3304      	adds	r3, #4
 8008e3c:	430a      	orrs	r2, r1
 8008e3e:	b212      	sxth	r2, r2
 8008e40:	801a      	strh	r2, [r3, #0]
        ii += 6;
 8008e42:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008e46:	3306      	adds	r3, #6
 8008e48:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        sensors[0] |= INV_XYZ_ACCEL;
 8008e4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008e52:	f043 0308 	orr.w	r3, r3, #8
 8008e56:	b21a      	sxth	r2, r3
 8008e58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e5a:	801a      	strh	r2, [r3, #0]
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_ANY_GYRO) {
 8008e5c:	4b34      	ldr	r3, [pc, #208]	; (8008f30 <dmp_read_fifo+0x2d4>)
 8008e5e:	895b      	ldrh	r3, [r3, #10]
 8008e60:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d04c      	beq.n	8008f02 <dmp_read_fifo+0x2a6>
        gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8008e68:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008e6c:	3348      	adds	r3, #72	; 0x48
 8008e6e:	443b      	add	r3, r7
 8008e70:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8008e74:	021b      	lsls	r3, r3, #8
 8008e76:	b21a      	sxth	r2, r3
 8008e78:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008e7c:	3301      	adds	r3, #1
 8008e7e:	3348      	adds	r3, #72	; 0x48
 8008e80:	443b      	add	r3, r7
 8008e82:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8008e86:	b21b      	sxth	r3, r3
 8008e88:	4313      	orrs	r3, r2
 8008e8a:	b21a      	sxth	r2, r3
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	801a      	strh	r2, [r3, #0]
        gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 8008e90:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008e94:	3302      	adds	r3, #2
 8008e96:	3348      	adds	r3, #72	; 0x48
 8008e98:	443b      	add	r3, r7
 8008e9a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8008e9e:	021b      	lsls	r3, r3, #8
 8008ea0:	b219      	sxth	r1, r3
 8008ea2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008ea6:	3303      	adds	r3, #3
 8008ea8:	3348      	adds	r3, #72	; 0x48
 8008eaa:	443b      	add	r3, r7
 8008eac:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8008eb0:	b21a      	sxth	r2, r3
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	3302      	adds	r3, #2
 8008eb6:	430a      	orrs	r2, r1
 8008eb8:	b212      	sxth	r2, r2
 8008eba:	801a      	strh	r2, [r3, #0]
        gyro[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 8008ebc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008ec0:	3304      	adds	r3, #4
 8008ec2:	3348      	adds	r3, #72	; 0x48
 8008ec4:	443b      	add	r3, r7
 8008ec6:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8008eca:	021b      	lsls	r3, r3, #8
 8008ecc:	b219      	sxth	r1, r3
 8008ece:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008ed2:	3305      	adds	r3, #5
 8008ed4:	3348      	adds	r3, #72	; 0x48
 8008ed6:	443b      	add	r3, r7
 8008ed8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8008edc:	b21a      	sxth	r2, r3
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	3304      	adds	r3, #4
 8008ee2:	430a      	orrs	r2, r1
 8008ee4:	b212      	sxth	r2, r2
 8008ee6:	801a      	strh	r2, [r3, #0]
        ii += 6;
 8008ee8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008eec:	3306      	adds	r3, #6
 8008eee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        sensors[0] |= INV_XYZ_GYRO;
 8008ef2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ef4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008ef8:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8008efc:	b21a      	sxth	r2, r3
 8008efe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f00:	801a      	strh	r2, [r3, #0]
    }

    /* Gesture data is at the end of the DMP packet. Parse it and call
     * the gesture callbacks (if registered).
     */
    if (dmp.feature_mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 8008f02:	4b0b      	ldr	r3, [pc, #44]	; (8008f30 <dmp_read_fifo+0x2d4>)
 8008f04:	895b      	ldrh	r3, [r3, #10]
 8008f06:	f003 0303 	and.w	r3, r3, #3
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d007      	beq.n	8008f1e <dmp_read_fifo+0x2c2>
        decode_gesture(fifo_data + ii);
 8008f0e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008f12:	f107 0220 	add.w	r2, r7, #32
 8008f16:	4413      	add	r3, r2
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f7ff fe5b 	bl	8008bd4 <decode_gesture>

    get_ms(timestamp);
 8008f1e:	6838      	ldr	r0, [r7, #0]
 8008f20:	f7fe fd5c 	bl	80079dc <mget_ms>
    return 0;
 8008f24:	2300      	movs	r3, #0
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	3748      	adds	r7, #72	; 0x48
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}
 8008f2e:	bf00      	nop
 8008f30:	20000324 	.word	0x20000324

08008f34 <__cvt>:
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f3a:	461f      	mov	r7, r3
 8008f3c:	bfbb      	ittet	lt
 8008f3e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8008f42:	461f      	movlt	r7, r3
 8008f44:	2300      	movge	r3, #0
 8008f46:	232d      	movlt	r3, #45	; 0x2d
 8008f48:	b088      	sub	sp, #32
 8008f4a:	4614      	mov	r4, r2
 8008f4c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008f4e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008f50:	7013      	strb	r3, [r2, #0]
 8008f52:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008f54:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8008f58:	f023 0820 	bic.w	r8, r3, #32
 8008f5c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008f60:	d005      	beq.n	8008f6e <__cvt+0x3a>
 8008f62:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008f66:	d100      	bne.n	8008f6a <__cvt+0x36>
 8008f68:	3501      	adds	r5, #1
 8008f6a:	2302      	movs	r3, #2
 8008f6c:	e000      	b.n	8008f70 <__cvt+0x3c>
 8008f6e:	2303      	movs	r3, #3
 8008f70:	aa07      	add	r2, sp, #28
 8008f72:	9204      	str	r2, [sp, #16]
 8008f74:	aa06      	add	r2, sp, #24
 8008f76:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008f7a:	e9cd 3500 	strd	r3, r5, [sp]
 8008f7e:	4622      	mov	r2, r4
 8008f80:	463b      	mov	r3, r7
 8008f82:	f000 ff85 	bl	8009e90 <_dtoa_r>
 8008f86:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008f8a:	4606      	mov	r6, r0
 8008f8c:	d102      	bne.n	8008f94 <__cvt+0x60>
 8008f8e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008f90:	07db      	lsls	r3, r3, #31
 8008f92:	d522      	bpl.n	8008fda <__cvt+0xa6>
 8008f94:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008f98:	eb06 0905 	add.w	r9, r6, r5
 8008f9c:	d110      	bne.n	8008fc0 <__cvt+0x8c>
 8008f9e:	7833      	ldrb	r3, [r6, #0]
 8008fa0:	2b30      	cmp	r3, #48	; 0x30
 8008fa2:	d10a      	bne.n	8008fba <__cvt+0x86>
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	4620      	mov	r0, r4
 8008faa:	4639      	mov	r1, r7
 8008fac:	f7f7 fcfc 	bl	80009a8 <__aeabi_dcmpeq>
 8008fb0:	b918      	cbnz	r0, 8008fba <__cvt+0x86>
 8008fb2:	f1c5 0501 	rsb	r5, r5, #1
 8008fb6:	f8ca 5000 	str.w	r5, [sl]
 8008fba:	f8da 3000 	ldr.w	r3, [sl]
 8008fbe:	4499      	add	r9, r3
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	4620      	mov	r0, r4
 8008fc6:	4639      	mov	r1, r7
 8008fc8:	f7f7 fcee 	bl	80009a8 <__aeabi_dcmpeq>
 8008fcc:	b108      	cbz	r0, 8008fd2 <__cvt+0x9e>
 8008fce:	f8cd 901c 	str.w	r9, [sp, #28]
 8008fd2:	2230      	movs	r2, #48	; 0x30
 8008fd4:	9b07      	ldr	r3, [sp, #28]
 8008fd6:	454b      	cmp	r3, r9
 8008fd8:	d307      	bcc.n	8008fea <__cvt+0xb6>
 8008fda:	4630      	mov	r0, r6
 8008fdc:	9b07      	ldr	r3, [sp, #28]
 8008fde:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008fe0:	1b9b      	subs	r3, r3, r6
 8008fe2:	6013      	str	r3, [r2, #0]
 8008fe4:	b008      	add	sp, #32
 8008fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fea:	1c59      	adds	r1, r3, #1
 8008fec:	9107      	str	r1, [sp, #28]
 8008fee:	701a      	strb	r2, [r3, #0]
 8008ff0:	e7f0      	b.n	8008fd4 <__cvt+0xa0>

08008ff2 <__exponent>:
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008ff6:	2900      	cmp	r1, #0
 8008ff8:	f803 2b02 	strb.w	r2, [r3], #2
 8008ffc:	bfb6      	itet	lt
 8008ffe:	222d      	movlt	r2, #45	; 0x2d
 8009000:	222b      	movge	r2, #43	; 0x2b
 8009002:	4249      	neglt	r1, r1
 8009004:	2909      	cmp	r1, #9
 8009006:	7042      	strb	r2, [r0, #1]
 8009008:	dd2a      	ble.n	8009060 <__exponent+0x6e>
 800900a:	f10d 0207 	add.w	r2, sp, #7
 800900e:	4617      	mov	r7, r2
 8009010:	260a      	movs	r6, #10
 8009012:	fb91 f5f6 	sdiv	r5, r1, r6
 8009016:	4694      	mov	ip, r2
 8009018:	fb06 1415 	mls	r4, r6, r5, r1
 800901c:	3430      	adds	r4, #48	; 0x30
 800901e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009022:	460c      	mov	r4, r1
 8009024:	2c63      	cmp	r4, #99	; 0x63
 8009026:	4629      	mov	r1, r5
 8009028:	f102 32ff 	add.w	r2, r2, #4294967295
 800902c:	dcf1      	bgt.n	8009012 <__exponent+0x20>
 800902e:	3130      	adds	r1, #48	; 0x30
 8009030:	f1ac 0402 	sub.w	r4, ip, #2
 8009034:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009038:	4622      	mov	r2, r4
 800903a:	1c41      	adds	r1, r0, #1
 800903c:	42ba      	cmp	r2, r7
 800903e:	d30a      	bcc.n	8009056 <__exponent+0x64>
 8009040:	f10d 0209 	add.w	r2, sp, #9
 8009044:	eba2 020c 	sub.w	r2, r2, ip
 8009048:	42bc      	cmp	r4, r7
 800904a:	bf88      	it	hi
 800904c:	2200      	movhi	r2, #0
 800904e:	4413      	add	r3, r2
 8009050:	1a18      	subs	r0, r3, r0
 8009052:	b003      	add	sp, #12
 8009054:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009056:	f812 5b01 	ldrb.w	r5, [r2], #1
 800905a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800905e:	e7ed      	b.n	800903c <__exponent+0x4a>
 8009060:	2330      	movs	r3, #48	; 0x30
 8009062:	3130      	adds	r1, #48	; 0x30
 8009064:	7083      	strb	r3, [r0, #2]
 8009066:	70c1      	strb	r1, [r0, #3]
 8009068:	1d03      	adds	r3, r0, #4
 800906a:	e7f1      	b.n	8009050 <__exponent+0x5e>

0800906c <_printf_float>:
 800906c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009070:	b091      	sub	sp, #68	; 0x44
 8009072:	460c      	mov	r4, r1
 8009074:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8009078:	4616      	mov	r6, r2
 800907a:	461f      	mov	r7, r3
 800907c:	4605      	mov	r5, r0
 800907e:	f000 fdf7 	bl	8009c70 <_localeconv_r>
 8009082:	6803      	ldr	r3, [r0, #0]
 8009084:	4618      	mov	r0, r3
 8009086:	9309      	str	r3, [sp, #36]	; 0x24
 8009088:	f7f7 f862 	bl	8000150 <strlen>
 800908c:	2300      	movs	r3, #0
 800908e:	930e      	str	r3, [sp, #56]	; 0x38
 8009090:	f8d8 3000 	ldr.w	r3, [r8]
 8009094:	900a      	str	r0, [sp, #40]	; 0x28
 8009096:	3307      	adds	r3, #7
 8009098:	f023 0307 	bic.w	r3, r3, #7
 800909c:	f103 0208 	add.w	r2, r3, #8
 80090a0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80090a4:	f8d4 b000 	ldr.w	fp, [r4]
 80090a8:	f8c8 2000 	str.w	r2, [r8]
 80090ac:	e9d3 a800 	ldrd	sl, r8, [r3]
 80090b0:	4652      	mov	r2, sl
 80090b2:	4643      	mov	r3, r8
 80090b4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80090b8:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 80090bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80090be:	f04f 32ff 	mov.w	r2, #4294967295
 80090c2:	4650      	mov	r0, sl
 80090c4:	4b9c      	ldr	r3, [pc, #624]	; (8009338 <_printf_float+0x2cc>)
 80090c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80090c8:	f7f7 fca0 	bl	8000a0c <__aeabi_dcmpun>
 80090cc:	bb70      	cbnz	r0, 800912c <_printf_float+0xc0>
 80090ce:	f04f 32ff 	mov.w	r2, #4294967295
 80090d2:	4650      	mov	r0, sl
 80090d4:	4b98      	ldr	r3, [pc, #608]	; (8009338 <_printf_float+0x2cc>)
 80090d6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80090d8:	f7f7 fc7a 	bl	80009d0 <__aeabi_dcmple>
 80090dc:	bb30      	cbnz	r0, 800912c <_printf_float+0xc0>
 80090de:	2200      	movs	r2, #0
 80090e0:	2300      	movs	r3, #0
 80090e2:	4650      	mov	r0, sl
 80090e4:	4641      	mov	r1, r8
 80090e6:	f7f7 fc69 	bl	80009bc <__aeabi_dcmplt>
 80090ea:	b110      	cbz	r0, 80090f2 <_printf_float+0x86>
 80090ec:	232d      	movs	r3, #45	; 0x2d
 80090ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090f2:	4a92      	ldr	r2, [pc, #584]	; (800933c <_printf_float+0x2d0>)
 80090f4:	4b92      	ldr	r3, [pc, #584]	; (8009340 <_printf_float+0x2d4>)
 80090f6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80090fa:	bf94      	ite	ls
 80090fc:	4690      	movls	r8, r2
 80090fe:	4698      	movhi	r8, r3
 8009100:	2303      	movs	r3, #3
 8009102:	f04f 0a00 	mov.w	sl, #0
 8009106:	6123      	str	r3, [r4, #16]
 8009108:	f02b 0304 	bic.w	r3, fp, #4
 800910c:	6023      	str	r3, [r4, #0]
 800910e:	4633      	mov	r3, r6
 8009110:	4621      	mov	r1, r4
 8009112:	4628      	mov	r0, r5
 8009114:	9700      	str	r7, [sp, #0]
 8009116:	aa0f      	add	r2, sp, #60	; 0x3c
 8009118:	f000 f9d6 	bl	80094c8 <_printf_common>
 800911c:	3001      	adds	r0, #1
 800911e:	f040 8090 	bne.w	8009242 <_printf_float+0x1d6>
 8009122:	f04f 30ff 	mov.w	r0, #4294967295
 8009126:	b011      	add	sp, #68	; 0x44
 8009128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800912c:	4652      	mov	r2, sl
 800912e:	4643      	mov	r3, r8
 8009130:	4650      	mov	r0, sl
 8009132:	4641      	mov	r1, r8
 8009134:	f7f7 fc6a 	bl	8000a0c <__aeabi_dcmpun>
 8009138:	b148      	cbz	r0, 800914e <_printf_float+0xe2>
 800913a:	f1b8 0f00 	cmp.w	r8, #0
 800913e:	bfb8      	it	lt
 8009140:	232d      	movlt	r3, #45	; 0x2d
 8009142:	4a80      	ldr	r2, [pc, #512]	; (8009344 <_printf_float+0x2d8>)
 8009144:	bfb8      	it	lt
 8009146:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800914a:	4b7f      	ldr	r3, [pc, #508]	; (8009348 <_printf_float+0x2dc>)
 800914c:	e7d3      	b.n	80090f6 <_printf_float+0x8a>
 800914e:	6863      	ldr	r3, [r4, #4]
 8009150:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8009154:	1c5a      	adds	r2, r3, #1
 8009156:	d142      	bne.n	80091de <_printf_float+0x172>
 8009158:	2306      	movs	r3, #6
 800915a:	6063      	str	r3, [r4, #4]
 800915c:	2200      	movs	r2, #0
 800915e:	9206      	str	r2, [sp, #24]
 8009160:	aa0e      	add	r2, sp, #56	; 0x38
 8009162:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8009166:	aa0d      	add	r2, sp, #52	; 0x34
 8009168:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800916c:	9203      	str	r2, [sp, #12]
 800916e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8009172:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009176:	6023      	str	r3, [r4, #0]
 8009178:	6863      	ldr	r3, [r4, #4]
 800917a:	4652      	mov	r2, sl
 800917c:	9300      	str	r3, [sp, #0]
 800917e:	4628      	mov	r0, r5
 8009180:	4643      	mov	r3, r8
 8009182:	910b      	str	r1, [sp, #44]	; 0x2c
 8009184:	f7ff fed6 	bl	8008f34 <__cvt>
 8009188:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800918a:	4680      	mov	r8, r0
 800918c:	2947      	cmp	r1, #71	; 0x47
 800918e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009190:	d108      	bne.n	80091a4 <_printf_float+0x138>
 8009192:	1cc8      	adds	r0, r1, #3
 8009194:	db02      	blt.n	800919c <_printf_float+0x130>
 8009196:	6863      	ldr	r3, [r4, #4]
 8009198:	4299      	cmp	r1, r3
 800919a:	dd40      	ble.n	800921e <_printf_float+0x1b2>
 800919c:	f1a9 0902 	sub.w	r9, r9, #2
 80091a0:	fa5f f989 	uxtb.w	r9, r9
 80091a4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80091a8:	d81f      	bhi.n	80091ea <_printf_float+0x17e>
 80091aa:	464a      	mov	r2, r9
 80091ac:	3901      	subs	r1, #1
 80091ae:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80091b2:	910d      	str	r1, [sp, #52]	; 0x34
 80091b4:	f7ff ff1d 	bl	8008ff2 <__exponent>
 80091b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80091ba:	4682      	mov	sl, r0
 80091bc:	1813      	adds	r3, r2, r0
 80091be:	2a01      	cmp	r2, #1
 80091c0:	6123      	str	r3, [r4, #16]
 80091c2:	dc02      	bgt.n	80091ca <_printf_float+0x15e>
 80091c4:	6822      	ldr	r2, [r4, #0]
 80091c6:	07d2      	lsls	r2, r2, #31
 80091c8:	d501      	bpl.n	80091ce <_printf_float+0x162>
 80091ca:	3301      	adds	r3, #1
 80091cc:	6123      	str	r3, [r4, #16]
 80091ce:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d09b      	beq.n	800910e <_printf_float+0xa2>
 80091d6:	232d      	movs	r3, #45	; 0x2d
 80091d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80091dc:	e797      	b.n	800910e <_printf_float+0xa2>
 80091de:	2947      	cmp	r1, #71	; 0x47
 80091e0:	d1bc      	bne.n	800915c <_printf_float+0xf0>
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d1ba      	bne.n	800915c <_printf_float+0xf0>
 80091e6:	2301      	movs	r3, #1
 80091e8:	e7b7      	b.n	800915a <_printf_float+0xee>
 80091ea:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80091ee:	d118      	bne.n	8009222 <_printf_float+0x1b6>
 80091f0:	2900      	cmp	r1, #0
 80091f2:	6863      	ldr	r3, [r4, #4]
 80091f4:	dd0b      	ble.n	800920e <_printf_float+0x1a2>
 80091f6:	6121      	str	r1, [r4, #16]
 80091f8:	b913      	cbnz	r3, 8009200 <_printf_float+0x194>
 80091fa:	6822      	ldr	r2, [r4, #0]
 80091fc:	07d0      	lsls	r0, r2, #31
 80091fe:	d502      	bpl.n	8009206 <_printf_float+0x19a>
 8009200:	3301      	adds	r3, #1
 8009202:	440b      	add	r3, r1
 8009204:	6123      	str	r3, [r4, #16]
 8009206:	f04f 0a00 	mov.w	sl, #0
 800920a:	65a1      	str	r1, [r4, #88]	; 0x58
 800920c:	e7df      	b.n	80091ce <_printf_float+0x162>
 800920e:	b913      	cbnz	r3, 8009216 <_printf_float+0x1aa>
 8009210:	6822      	ldr	r2, [r4, #0]
 8009212:	07d2      	lsls	r2, r2, #31
 8009214:	d501      	bpl.n	800921a <_printf_float+0x1ae>
 8009216:	3302      	adds	r3, #2
 8009218:	e7f4      	b.n	8009204 <_printf_float+0x198>
 800921a:	2301      	movs	r3, #1
 800921c:	e7f2      	b.n	8009204 <_printf_float+0x198>
 800921e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8009222:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009224:	4299      	cmp	r1, r3
 8009226:	db05      	blt.n	8009234 <_printf_float+0x1c8>
 8009228:	6823      	ldr	r3, [r4, #0]
 800922a:	6121      	str	r1, [r4, #16]
 800922c:	07d8      	lsls	r0, r3, #31
 800922e:	d5ea      	bpl.n	8009206 <_printf_float+0x19a>
 8009230:	1c4b      	adds	r3, r1, #1
 8009232:	e7e7      	b.n	8009204 <_printf_float+0x198>
 8009234:	2900      	cmp	r1, #0
 8009236:	bfcc      	ite	gt
 8009238:	2201      	movgt	r2, #1
 800923a:	f1c1 0202 	rsble	r2, r1, #2
 800923e:	4413      	add	r3, r2
 8009240:	e7e0      	b.n	8009204 <_printf_float+0x198>
 8009242:	6823      	ldr	r3, [r4, #0]
 8009244:	055a      	lsls	r2, r3, #21
 8009246:	d407      	bmi.n	8009258 <_printf_float+0x1ec>
 8009248:	6923      	ldr	r3, [r4, #16]
 800924a:	4642      	mov	r2, r8
 800924c:	4631      	mov	r1, r6
 800924e:	4628      	mov	r0, r5
 8009250:	47b8      	blx	r7
 8009252:	3001      	adds	r0, #1
 8009254:	d12b      	bne.n	80092ae <_printf_float+0x242>
 8009256:	e764      	b.n	8009122 <_printf_float+0xb6>
 8009258:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800925c:	f240 80dd 	bls.w	800941a <_printf_float+0x3ae>
 8009260:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009264:	2200      	movs	r2, #0
 8009266:	2300      	movs	r3, #0
 8009268:	f7f7 fb9e 	bl	80009a8 <__aeabi_dcmpeq>
 800926c:	2800      	cmp	r0, #0
 800926e:	d033      	beq.n	80092d8 <_printf_float+0x26c>
 8009270:	2301      	movs	r3, #1
 8009272:	4631      	mov	r1, r6
 8009274:	4628      	mov	r0, r5
 8009276:	4a35      	ldr	r2, [pc, #212]	; (800934c <_printf_float+0x2e0>)
 8009278:	47b8      	blx	r7
 800927a:	3001      	adds	r0, #1
 800927c:	f43f af51 	beq.w	8009122 <_printf_float+0xb6>
 8009280:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009284:	429a      	cmp	r2, r3
 8009286:	db02      	blt.n	800928e <_printf_float+0x222>
 8009288:	6823      	ldr	r3, [r4, #0]
 800928a:	07d8      	lsls	r0, r3, #31
 800928c:	d50f      	bpl.n	80092ae <_printf_float+0x242>
 800928e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009292:	4631      	mov	r1, r6
 8009294:	4628      	mov	r0, r5
 8009296:	47b8      	blx	r7
 8009298:	3001      	adds	r0, #1
 800929a:	f43f af42 	beq.w	8009122 <_printf_float+0xb6>
 800929e:	f04f 0800 	mov.w	r8, #0
 80092a2:	f104 091a 	add.w	r9, r4, #26
 80092a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80092a8:	3b01      	subs	r3, #1
 80092aa:	4543      	cmp	r3, r8
 80092ac:	dc09      	bgt.n	80092c2 <_printf_float+0x256>
 80092ae:	6823      	ldr	r3, [r4, #0]
 80092b0:	079b      	lsls	r3, r3, #30
 80092b2:	f100 8104 	bmi.w	80094be <_printf_float+0x452>
 80092b6:	68e0      	ldr	r0, [r4, #12]
 80092b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80092ba:	4298      	cmp	r0, r3
 80092bc:	bfb8      	it	lt
 80092be:	4618      	movlt	r0, r3
 80092c0:	e731      	b.n	8009126 <_printf_float+0xba>
 80092c2:	2301      	movs	r3, #1
 80092c4:	464a      	mov	r2, r9
 80092c6:	4631      	mov	r1, r6
 80092c8:	4628      	mov	r0, r5
 80092ca:	47b8      	blx	r7
 80092cc:	3001      	adds	r0, #1
 80092ce:	f43f af28 	beq.w	8009122 <_printf_float+0xb6>
 80092d2:	f108 0801 	add.w	r8, r8, #1
 80092d6:	e7e6      	b.n	80092a6 <_printf_float+0x23a>
 80092d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80092da:	2b00      	cmp	r3, #0
 80092dc:	dc38      	bgt.n	8009350 <_printf_float+0x2e4>
 80092de:	2301      	movs	r3, #1
 80092e0:	4631      	mov	r1, r6
 80092e2:	4628      	mov	r0, r5
 80092e4:	4a19      	ldr	r2, [pc, #100]	; (800934c <_printf_float+0x2e0>)
 80092e6:	47b8      	blx	r7
 80092e8:	3001      	adds	r0, #1
 80092ea:	f43f af1a 	beq.w	8009122 <_printf_float+0xb6>
 80092ee:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80092f2:	4313      	orrs	r3, r2
 80092f4:	d102      	bne.n	80092fc <_printf_float+0x290>
 80092f6:	6823      	ldr	r3, [r4, #0]
 80092f8:	07d9      	lsls	r1, r3, #31
 80092fa:	d5d8      	bpl.n	80092ae <_printf_float+0x242>
 80092fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009300:	4631      	mov	r1, r6
 8009302:	4628      	mov	r0, r5
 8009304:	47b8      	blx	r7
 8009306:	3001      	adds	r0, #1
 8009308:	f43f af0b 	beq.w	8009122 <_printf_float+0xb6>
 800930c:	f04f 0900 	mov.w	r9, #0
 8009310:	f104 0a1a 	add.w	sl, r4, #26
 8009314:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009316:	425b      	negs	r3, r3
 8009318:	454b      	cmp	r3, r9
 800931a:	dc01      	bgt.n	8009320 <_printf_float+0x2b4>
 800931c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800931e:	e794      	b.n	800924a <_printf_float+0x1de>
 8009320:	2301      	movs	r3, #1
 8009322:	4652      	mov	r2, sl
 8009324:	4631      	mov	r1, r6
 8009326:	4628      	mov	r0, r5
 8009328:	47b8      	blx	r7
 800932a:	3001      	adds	r0, #1
 800932c:	f43f aef9 	beq.w	8009122 <_printf_float+0xb6>
 8009330:	f109 0901 	add.w	r9, r9, #1
 8009334:	e7ee      	b.n	8009314 <_printf_float+0x2a8>
 8009336:	bf00      	nop
 8009338:	7fefffff 	.word	0x7fefffff
 800933c:	0800d616 	.word	0x0800d616
 8009340:	0800d61a 	.word	0x0800d61a
 8009344:	0800d61e 	.word	0x0800d61e
 8009348:	0800d622 	.word	0x0800d622
 800934c:	0800d626 	.word	0x0800d626
 8009350:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009352:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009354:	429a      	cmp	r2, r3
 8009356:	bfa8      	it	ge
 8009358:	461a      	movge	r2, r3
 800935a:	2a00      	cmp	r2, #0
 800935c:	4691      	mov	r9, r2
 800935e:	dc37      	bgt.n	80093d0 <_printf_float+0x364>
 8009360:	f04f 0b00 	mov.w	fp, #0
 8009364:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009368:	f104 021a 	add.w	r2, r4, #26
 800936c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009370:	ebaa 0309 	sub.w	r3, sl, r9
 8009374:	455b      	cmp	r3, fp
 8009376:	dc33      	bgt.n	80093e0 <_printf_float+0x374>
 8009378:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800937c:	429a      	cmp	r2, r3
 800937e:	db3b      	blt.n	80093f8 <_printf_float+0x38c>
 8009380:	6823      	ldr	r3, [r4, #0]
 8009382:	07da      	lsls	r2, r3, #31
 8009384:	d438      	bmi.n	80093f8 <_printf_float+0x38c>
 8009386:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800938a:	eba2 0903 	sub.w	r9, r2, r3
 800938e:	eba2 020a 	sub.w	r2, r2, sl
 8009392:	4591      	cmp	r9, r2
 8009394:	bfa8      	it	ge
 8009396:	4691      	movge	r9, r2
 8009398:	f1b9 0f00 	cmp.w	r9, #0
 800939c:	dc34      	bgt.n	8009408 <_printf_float+0x39c>
 800939e:	f04f 0800 	mov.w	r8, #0
 80093a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80093a6:	f104 0a1a 	add.w	sl, r4, #26
 80093aa:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80093ae:	1a9b      	subs	r3, r3, r2
 80093b0:	eba3 0309 	sub.w	r3, r3, r9
 80093b4:	4543      	cmp	r3, r8
 80093b6:	f77f af7a 	ble.w	80092ae <_printf_float+0x242>
 80093ba:	2301      	movs	r3, #1
 80093bc:	4652      	mov	r2, sl
 80093be:	4631      	mov	r1, r6
 80093c0:	4628      	mov	r0, r5
 80093c2:	47b8      	blx	r7
 80093c4:	3001      	adds	r0, #1
 80093c6:	f43f aeac 	beq.w	8009122 <_printf_float+0xb6>
 80093ca:	f108 0801 	add.w	r8, r8, #1
 80093ce:	e7ec      	b.n	80093aa <_printf_float+0x33e>
 80093d0:	4613      	mov	r3, r2
 80093d2:	4631      	mov	r1, r6
 80093d4:	4642      	mov	r2, r8
 80093d6:	4628      	mov	r0, r5
 80093d8:	47b8      	blx	r7
 80093da:	3001      	adds	r0, #1
 80093dc:	d1c0      	bne.n	8009360 <_printf_float+0x2f4>
 80093de:	e6a0      	b.n	8009122 <_printf_float+0xb6>
 80093e0:	2301      	movs	r3, #1
 80093e2:	4631      	mov	r1, r6
 80093e4:	4628      	mov	r0, r5
 80093e6:	920b      	str	r2, [sp, #44]	; 0x2c
 80093e8:	47b8      	blx	r7
 80093ea:	3001      	adds	r0, #1
 80093ec:	f43f ae99 	beq.w	8009122 <_printf_float+0xb6>
 80093f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80093f2:	f10b 0b01 	add.w	fp, fp, #1
 80093f6:	e7b9      	b.n	800936c <_printf_float+0x300>
 80093f8:	4631      	mov	r1, r6
 80093fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80093fe:	4628      	mov	r0, r5
 8009400:	47b8      	blx	r7
 8009402:	3001      	adds	r0, #1
 8009404:	d1bf      	bne.n	8009386 <_printf_float+0x31a>
 8009406:	e68c      	b.n	8009122 <_printf_float+0xb6>
 8009408:	464b      	mov	r3, r9
 800940a:	4631      	mov	r1, r6
 800940c:	4628      	mov	r0, r5
 800940e:	eb08 020a 	add.w	r2, r8, sl
 8009412:	47b8      	blx	r7
 8009414:	3001      	adds	r0, #1
 8009416:	d1c2      	bne.n	800939e <_printf_float+0x332>
 8009418:	e683      	b.n	8009122 <_printf_float+0xb6>
 800941a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800941c:	2a01      	cmp	r2, #1
 800941e:	dc01      	bgt.n	8009424 <_printf_float+0x3b8>
 8009420:	07db      	lsls	r3, r3, #31
 8009422:	d539      	bpl.n	8009498 <_printf_float+0x42c>
 8009424:	2301      	movs	r3, #1
 8009426:	4642      	mov	r2, r8
 8009428:	4631      	mov	r1, r6
 800942a:	4628      	mov	r0, r5
 800942c:	47b8      	blx	r7
 800942e:	3001      	adds	r0, #1
 8009430:	f43f ae77 	beq.w	8009122 <_printf_float+0xb6>
 8009434:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009438:	4631      	mov	r1, r6
 800943a:	4628      	mov	r0, r5
 800943c:	47b8      	blx	r7
 800943e:	3001      	adds	r0, #1
 8009440:	f43f ae6f 	beq.w	8009122 <_printf_float+0xb6>
 8009444:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009448:	2200      	movs	r2, #0
 800944a:	2300      	movs	r3, #0
 800944c:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8009450:	f7f7 faaa 	bl	80009a8 <__aeabi_dcmpeq>
 8009454:	b9d8      	cbnz	r0, 800948e <_printf_float+0x422>
 8009456:	f109 33ff 	add.w	r3, r9, #4294967295
 800945a:	f108 0201 	add.w	r2, r8, #1
 800945e:	4631      	mov	r1, r6
 8009460:	4628      	mov	r0, r5
 8009462:	47b8      	blx	r7
 8009464:	3001      	adds	r0, #1
 8009466:	d10e      	bne.n	8009486 <_printf_float+0x41a>
 8009468:	e65b      	b.n	8009122 <_printf_float+0xb6>
 800946a:	2301      	movs	r3, #1
 800946c:	464a      	mov	r2, r9
 800946e:	4631      	mov	r1, r6
 8009470:	4628      	mov	r0, r5
 8009472:	47b8      	blx	r7
 8009474:	3001      	adds	r0, #1
 8009476:	f43f ae54 	beq.w	8009122 <_printf_float+0xb6>
 800947a:	f108 0801 	add.w	r8, r8, #1
 800947e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009480:	3b01      	subs	r3, #1
 8009482:	4543      	cmp	r3, r8
 8009484:	dcf1      	bgt.n	800946a <_printf_float+0x3fe>
 8009486:	4653      	mov	r3, sl
 8009488:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800948c:	e6de      	b.n	800924c <_printf_float+0x1e0>
 800948e:	f04f 0800 	mov.w	r8, #0
 8009492:	f104 091a 	add.w	r9, r4, #26
 8009496:	e7f2      	b.n	800947e <_printf_float+0x412>
 8009498:	2301      	movs	r3, #1
 800949a:	4642      	mov	r2, r8
 800949c:	e7df      	b.n	800945e <_printf_float+0x3f2>
 800949e:	2301      	movs	r3, #1
 80094a0:	464a      	mov	r2, r9
 80094a2:	4631      	mov	r1, r6
 80094a4:	4628      	mov	r0, r5
 80094a6:	47b8      	blx	r7
 80094a8:	3001      	adds	r0, #1
 80094aa:	f43f ae3a 	beq.w	8009122 <_printf_float+0xb6>
 80094ae:	f108 0801 	add.w	r8, r8, #1
 80094b2:	68e3      	ldr	r3, [r4, #12]
 80094b4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80094b6:	1a5b      	subs	r3, r3, r1
 80094b8:	4543      	cmp	r3, r8
 80094ba:	dcf0      	bgt.n	800949e <_printf_float+0x432>
 80094bc:	e6fb      	b.n	80092b6 <_printf_float+0x24a>
 80094be:	f04f 0800 	mov.w	r8, #0
 80094c2:	f104 0919 	add.w	r9, r4, #25
 80094c6:	e7f4      	b.n	80094b2 <_printf_float+0x446>

080094c8 <_printf_common>:
 80094c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094cc:	4616      	mov	r6, r2
 80094ce:	4699      	mov	r9, r3
 80094d0:	688a      	ldr	r2, [r1, #8]
 80094d2:	690b      	ldr	r3, [r1, #16]
 80094d4:	4607      	mov	r7, r0
 80094d6:	4293      	cmp	r3, r2
 80094d8:	bfb8      	it	lt
 80094da:	4613      	movlt	r3, r2
 80094dc:	6033      	str	r3, [r6, #0]
 80094de:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80094e2:	460c      	mov	r4, r1
 80094e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80094e8:	b10a      	cbz	r2, 80094ee <_printf_common+0x26>
 80094ea:	3301      	adds	r3, #1
 80094ec:	6033      	str	r3, [r6, #0]
 80094ee:	6823      	ldr	r3, [r4, #0]
 80094f0:	0699      	lsls	r1, r3, #26
 80094f2:	bf42      	ittt	mi
 80094f4:	6833      	ldrmi	r3, [r6, #0]
 80094f6:	3302      	addmi	r3, #2
 80094f8:	6033      	strmi	r3, [r6, #0]
 80094fa:	6825      	ldr	r5, [r4, #0]
 80094fc:	f015 0506 	ands.w	r5, r5, #6
 8009500:	d106      	bne.n	8009510 <_printf_common+0x48>
 8009502:	f104 0a19 	add.w	sl, r4, #25
 8009506:	68e3      	ldr	r3, [r4, #12]
 8009508:	6832      	ldr	r2, [r6, #0]
 800950a:	1a9b      	subs	r3, r3, r2
 800950c:	42ab      	cmp	r3, r5
 800950e:	dc2b      	bgt.n	8009568 <_printf_common+0xa0>
 8009510:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009514:	1e13      	subs	r3, r2, #0
 8009516:	6822      	ldr	r2, [r4, #0]
 8009518:	bf18      	it	ne
 800951a:	2301      	movne	r3, #1
 800951c:	0692      	lsls	r2, r2, #26
 800951e:	d430      	bmi.n	8009582 <_printf_common+0xba>
 8009520:	4649      	mov	r1, r9
 8009522:	4638      	mov	r0, r7
 8009524:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009528:	47c0      	blx	r8
 800952a:	3001      	adds	r0, #1
 800952c:	d023      	beq.n	8009576 <_printf_common+0xae>
 800952e:	6823      	ldr	r3, [r4, #0]
 8009530:	6922      	ldr	r2, [r4, #16]
 8009532:	f003 0306 	and.w	r3, r3, #6
 8009536:	2b04      	cmp	r3, #4
 8009538:	bf14      	ite	ne
 800953a:	2500      	movne	r5, #0
 800953c:	6833      	ldreq	r3, [r6, #0]
 800953e:	f04f 0600 	mov.w	r6, #0
 8009542:	bf08      	it	eq
 8009544:	68e5      	ldreq	r5, [r4, #12]
 8009546:	f104 041a 	add.w	r4, r4, #26
 800954a:	bf08      	it	eq
 800954c:	1aed      	subeq	r5, r5, r3
 800954e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009552:	bf08      	it	eq
 8009554:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009558:	4293      	cmp	r3, r2
 800955a:	bfc4      	itt	gt
 800955c:	1a9b      	subgt	r3, r3, r2
 800955e:	18ed      	addgt	r5, r5, r3
 8009560:	42b5      	cmp	r5, r6
 8009562:	d11a      	bne.n	800959a <_printf_common+0xd2>
 8009564:	2000      	movs	r0, #0
 8009566:	e008      	b.n	800957a <_printf_common+0xb2>
 8009568:	2301      	movs	r3, #1
 800956a:	4652      	mov	r2, sl
 800956c:	4649      	mov	r1, r9
 800956e:	4638      	mov	r0, r7
 8009570:	47c0      	blx	r8
 8009572:	3001      	adds	r0, #1
 8009574:	d103      	bne.n	800957e <_printf_common+0xb6>
 8009576:	f04f 30ff 	mov.w	r0, #4294967295
 800957a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800957e:	3501      	adds	r5, #1
 8009580:	e7c1      	b.n	8009506 <_printf_common+0x3e>
 8009582:	2030      	movs	r0, #48	; 0x30
 8009584:	18e1      	adds	r1, r4, r3
 8009586:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800958a:	1c5a      	adds	r2, r3, #1
 800958c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009590:	4422      	add	r2, r4
 8009592:	3302      	adds	r3, #2
 8009594:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009598:	e7c2      	b.n	8009520 <_printf_common+0x58>
 800959a:	2301      	movs	r3, #1
 800959c:	4622      	mov	r2, r4
 800959e:	4649      	mov	r1, r9
 80095a0:	4638      	mov	r0, r7
 80095a2:	47c0      	blx	r8
 80095a4:	3001      	adds	r0, #1
 80095a6:	d0e6      	beq.n	8009576 <_printf_common+0xae>
 80095a8:	3601      	adds	r6, #1
 80095aa:	e7d9      	b.n	8009560 <_printf_common+0x98>

080095ac <_printf_i>:
 80095ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80095b0:	7e0f      	ldrb	r7, [r1, #24]
 80095b2:	4691      	mov	r9, r2
 80095b4:	2f78      	cmp	r7, #120	; 0x78
 80095b6:	4680      	mov	r8, r0
 80095b8:	460c      	mov	r4, r1
 80095ba:	469a      	mov	sl, r3
 80095bc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80095be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80095c2:	d807      	bhi.n	80095d4 <_printf_i+0x28>
 80095c4:	2f62      	cmp	r7, #98	; 0x62
 80095c6:	d80a      	bhi.n	80095de <_printf_i+0x32>
 80095c8:	2f00      	cmp	r7, #0
 80095ca:	f000 80d5 	beq.w	8009778 <_printf_i+0x1cc>
 80095ce:	2f58      	cmp	r7, #88	; 0x58
 80095d0:	f000 80c1 	beq.w	8009756 <_printf_i+0x1aa>
 80095d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80095d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80095dc:	e03a      	b.n	8009654 <_printf_i+0xa8>
 80095de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80095e2:	2b15      	cmp	r3, #21
 80095e4:	d8f6      	bhi.n	80095d4 <_printf_i+0x28>
 80095e6:	a101      	add	r1, pc, #4	; (adr r1, 80095ec <_printf_i+0x40>)
 80095e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80095ec:	08009645 	.word	0x08009645
 80095f0:	08009659 	.word	0x08009659
 80095f4:	080095d5 	.word	0x080095d5
 80095f8:	080095d5 	.word	0x080095d5
 80095fc:	080095d5 	.word	0x080095d5
 8009600:	080095d5 	.word	0x080095d5
 8009604:	08009659 	.word	0x08009659
 8009608:	080095d5 	.word	0x080095d5
 800960c:	080095d5 	.word	0x080095d5
 8009610:	080095d5 	.word	0x080095d5
 8009614:	080095d5 	.word	0x080095d5
 8009618:	0800975f 	.word	0x0800975f
 800961c:	08009685 	.word	0x08009685
 8009620:	08009719 	.word	0x08009719
 8009624:	080095d5 	.word	0x080095d5
 8009628:	080095d5 	.word	0x080095d5
 800962c:	08009781 	.word	0x08009781
 8009630:	080095d5 	.word	0x080095d5
 8009634:	08009685 	.word	0x08009685
 8009638:	080095d5 	.word	0x080095d5
 800963c:	080095d5 	.word	0x080095d5
 8009640:	08009721 	.word	0x08009721
 8009644:	682b      	ldr	r3, [r5, #0]
 8009646:	1d1a      	adds	r2, r3, #4
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	602a      	str	r2, [r5, #0]
 800964c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009650:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009654:	2301      	movs	r3, #1
 8009656:	e0a0      	b.n	800979a <_printf_i+0x1ee>
 8009658:	6820      	ldr	r0, [r4, #0]
 800965a:	682b      	ldr	r3, [r5, #0]
 800965c:	0607      	lsls	r7, r0, #24
 800965e:	f103 0104 	add.w	r1, r3, #4
 8009662:	6029      	str	r1, [r5, #0]
 8009664:	d501      	bpl.n	800966a <_printf_i+0xbe>
 8009666:	681e      	ldr	r6, [r3, #0]
 8009668:	e003      	b.n	8009672 <_printf_i+0xc6>
 800966a:	0646      	lsls	r6, r0, #25
 800966c:	d5fb      	bpl.n	8009666 <_printf_i+0xba>
 800966e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009672:	2e00      	cmp	r6, #0
 8009674:	da03      	bge.n	800967e <_printf_i+0xd2>
 8009676:	232d      	movs	r3, #45	; 0x2d
 8009678:	4276      	negs	r6, r6
 800967a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800967e:	230a      	movs	r3, #10
 8009680:	4859      	ldr	r0, [pc, #356]	; (80097e8 <_printf_i+0x23c>)
 8009682:	e012      	b.n	80096aa <_printf_i+0xfe>
 8009684:	682b      	ldr	r3, [r5, #0]
 8009686:	6820      	ldr	r0, [r4, #0]
 8009688:	1d19      	adds	r1, r3, #4
 800968a:	6029      	str	r1, [r5, #0]
 800968c:	0605      	lsls	r5, r0, #24
 800968e:	d501      	bpl.n	8009694 <_printf_i+0xe8>
 8009690:	681e      	ldr	r6, [r3, #0]
 8009692:	e002      	b.n	800969a <_printf_i+0xee>
 8009694:	0641      	lsls	r1, r0, #25
 8009696:	d5fb      	bpl.n	8009690 <_printf_i+0xe4>
 8009698:	881e      	ldrh	r6, [r3, #0]
 800969a:	2f6f      	cmp	r7, #111	; 0x6f
 800969c:	bf0c      	ite	eq
 800969e:	2308      	moveq	r3, #8
 80096a0:	230a      	movne	r3, #10
 80096a2:	4851      	ldr	r0, [pc, #324]	; (80097e8 <_printf_i+0x23c>)
 80096a4:	2100      	movs	r1, #0
 80096a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80096aa:	6865      	ldr	r5, [r4, #4]
 80096ac:	2d00      	cmp	r5, #0
 80096ae:	bfa8      	it	ge
 80096b0:	6821      	ldrge	r1, [r4, #0]
 80096b2:	60a5      	str	r5, [r4, #8]
 80096b4:	bfa4      	itt	ge
 80096b6:	f021 0104 	bicge.w	r1, r1, #4
 80096ba:	6021      	strge	r1, [r4, #0]
 80096bc:	b90e      	cbnz	r6, 80096c2 <_printf_i+0x116>
 80096be:	2d00      	cmp	r5, #0
 80096c0:	d04b      	beq.n	800975a <_printf_i+0x1ae>
 80096c2:	4615      	mov	r5, r2
 80096c4:	fbb6 f1f3 	udiv	r1, r6, r3
 80096c8:	fb03 6711 	mls	r7, r3, r1, r6
 80096cc:	5dc7      	ldrb	r7, [r0, r7]
 80096ce:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80096d2:	4637      	mov	r7, r6
 80096d4:	42bb      	cmp	r3, r7
 80096d6:	460e      	mov	r6, r1
 80096d8:	d9f4      	bls.n	80096c4 <_printf_i+0x118>
 80096da:	2b08      	cmp	r3, #8
 80096dc:	d10b      	bne.n	80096f6 <_printf_i+0x14a>
 80096de:	6823      	ldr	r3, [r4, #0]
 80096e0:	07de      	lsls	r6, r3, #31
 80096e2:	d508      	bpl.n	80096f6 <_printf_i+0x14a>
 80096e4:	6923      	ldr	r3, [r4, #16]
 80096e6:	6861      	ldr	r1, [r4, #4]
 80096e8:	4299      	cmp	r1, r3
 80096ea:	bfde      	ittt	le
 80096ec:	2330      	movle	r3, #48	; 0x30
 80096ee:	f805 3c01 	strble.w	r3, [r5, #-1]
 80096f2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80096f6:	1b52      	subs	r2, r2, r5
 80096f8:	6122      	str	r2, [r4, #16]
 80096fa:	464b      	mov	r3, r9
 80096fc:	4621      	mov	r1, r4
 80096fe:	4640      	mov	r0, r8
 8009700:	f8cd a000 	str.w	sl, [sp]
 8009704:	aa03      	add	r2, sp, #12
 8009706:	f7ff fedf 	bl	80094c8 <_printf_common>
 800970a:	3001      	adds	r0, #1
 800970c:	d14a      	bne.n	80097a4 <_printf_i+0x1f8>
 800970e:	f04f 30ff 	mov.w	r0, #4294967295
 8009712:	b004      	add	sp, #16
 8009714:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009718:	6823      	ldr	r3, [r4, #0]
 800971a:	f043 0320 	orr.w	r3, r3, #32
 800971e:	6023      	str	r3, [r4, #0]
 8009720:	2778      	movs	r7, #120	; 0x78
 8009722:	4832      	ldr	r0, [pc, #200]	; (80097ec <_printf_i+0x240>)
 8009724:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009728:	6823      	ldr	r3, [r4, #0]
 800972a:	6829      	ldr	r1, [r5, #0]
 800972c:	061f      	lsls	r7, r3, #24
 800972e:	f851 6b04 	ldr.w	r6, [r1], #4
 8009732:	d402      	bmi.n	800973a <_printf_i+0x18e>
 8009734:	065f      	lsls	r7, r3, #25
 8009736:	bf48      	it	mi
 8009738:	b2b6      	uxthmi	r6, r6
 800973a:	07df      	lsls	r7, r3, #31
 800973c:	bf48      	it	mi
 800973e:	f043 0320 	orrmi.w	r3, r3, #32
 8009742:	6029      	str	r1, [r5, #0]
 8009744:	bf48      	it	mi
 8009746:	6023      	strmi	r3, [r4, #0]
 8009748:	b91e      	cbnz	r6, 8009752 <_printf_i+0x1a6>
 800974a:	6823      	ldr	r3, [r4, #0]
 800974c:	f023 0320 	bic.w	r3, r3, #32
 8009750:	6023      	str	r3, [r4, #0]
 8009752:	2310      	movs	r3, #16
 8009754:	e7a6      	b.n	80096a4 <_printf_i+0xf8>
 8009756:	4824      	ldr	r0, [pc, #144]	; (80097e8 <_printf_i+0x23c>)
 8009758:	e7e4      	b.n	8009724 <_printf_i+0x178>
 800975a:	4615      	mov	r5, r2
 800975c:	e7bd      	b.n	80096da <_printf_i+0x12e>
 800975e:	682b      	ldr	r3, [r5, #0]
 8009760:	6826      	ldr	r6, [r4, #0]
 8009762:	1d18      	adds	r0, r3, #4
 8009764:	6961      	ldr	r1, [r4, #20]
 8009766:	6028      	str	r0, [r5, #0]
 8009768:	0635      	lsls	r5, r6, #24
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	d501      	bpl.n	8009772 <_printf_i+0x1c6>
 800976e:	6019      	str	r1, [r3, #0]
 8009770:	e002      	b.n	8009778 <_printf_i+0x1cc>
 8009772:	0670      	lsls	r0, r6, #25
 8009774:	d5fb      	bpl.n	800976e <_printf_i+0x1c2>
 8009776:	8019      	strh	r1, [r3, #0]
 8009778:	2300      	movs	r3, #0
 800977a:	4615      	mov	r5, r2
 800977c:	6123      	str	r3, [r4, #16]
 800977e:	e7bc      	b.n	80096fa <_printf_i+0x14e>
 8009780:	682b      	ldr	r3, [r5, #0]
 8009782:	2100      	movs	r1, #0
 8009784:	1d1a      	adds	r2, r3, #4
 8009786:	602a      	str	r2, [r5, #0]
 8009788:	681d      	ldr	r5, [r3, #0]
 800978a:	6862      	ldr	r2, [r4, #4]
 800978c:	4628      	mov	r0, r5
 800978e:	f000 fae6 	bl	8009d5e <memchr>
 8009792:	b108      	cbz	r0, 8009798 <_printf_i+0x1ec>
 8009794:	1b40      	subs	r0, r0, r5
 8009796:	6060      	str	r0, [r4, #4]
 8009798:	6863      	ldr	r3, [r4, #4]
 800979a:	6123      	str	r3, [r4, #16]
 800979c:	2300      	movs	r3, #0
 800979e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80097a2:	e7aa      	b.n	80096fa <_printf_i+0x14e>
 80097a4:	462a      	mov	r2, r5
 80097a6:	4649      	mov	r1, r9
 80097a8:	4640      	mov	r0, r8
 80097aa:	6923      	ldr	r3, [r4, #16]
 80097ac:	47d0      	blx	sl
 80097ae:	3001      	adds	r0, #1
 80097b0:	d0ad      	beq.n	800970e <_printf_i+0x162>
 80097b2:	6823      	ldr	r3, [r4, #0]
 80097b4:	079b      	lsls	r3, r3, #30
 80097b6:	d413      	bmi.n	80097e0 <_printf_i+0x234>
 80097b8:	68e0      	ldr	r0, [r4, #12]
 80097ba:	9b03      	ldr	r3, [sp, #12]
 80097bc:	4298      	cmp	r0, r3
 80097be:	bfb8      	it	lt
 80097c0:	4618      	movlt	r0, r3
 80097c2:	e7a6      	b.n	8009712 <_printf_i+0x166>
 80097c4:	2301      	movs	r3, #1
 80097c6:	4632      	mov	r2, r6
 80097c8:	4649      	mov	r1, r9
 80097ca:	4640      	mov	r0, r8
 80097cc:	47d0      	blx	sl
 80097ce:	3001      	adds	r0, #1
 80097d0:	d09d      	beq.n	800970e <_printf_i+0x162>
 80097d2:	3501      	adds	r5, #1
 80097d4:	68e3      	ldr	r3, [r4, #12]
 80097d6:	9903      	ldr	r1, [sp, #12]
 80097d8:	1a5b      	subs	r3, r3, r1
 80097da:	42ab      	cmp	r3, r5
 80097dc:	dcf2      	bgt.n	80097c4 <_printf_i+0x218>
 80097de:	e7eb      	b.n	80097b8 <_printf_i+0x20c>
 80097e0:	2500      	movs	r5, #0
 80097e2:	f104 0619 	add.w	r6, r4, #25
 80097e6:	e7f5      	b.n	80097d4 <_printf_i+0x228>
 80097e8:	0800d628 	.word	0x0800d628
 80097ec:	0800d639 	.word	0x0800d639

080097f0 <std>:
 80097f0:	2300      	movs	r3, #0
 80097f2:	b510      	push	{r4, lr}
 80097f4:	4604      	mov	r4, r0
 80097f6:	e9c0 3300 	strd	r3, r3, [r0]
 80097fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80097fe:	6083      	str	r3, [r0, #8]
 8009800:	8181      	strh	r1, [r0, #12]
 8009802:	6643      	str	r3, [r0, #100]	; 0x64
 8009804:	81c2      	strh	r2, [r0, #14]
 8009806:	6183      	str	r3, [r0, #24]
 8009808:	4619      	mov	r1, r3
 800980a:	2208      	movs	r2, #8
 800980c:	305c      	adds	r0, #92	; 0x5c
 800980e:	f000 fa27 	bl	8009c60 <memset>
 8009812:	4b0d      	ldr	r3, [pc, #52]	; (8009848 <std+0x58>)
 8009814:	6224      	str	r4, [r4, #32]
 8009816:	6263      	str	r3, [r4, #36]	; 0x24
 8009818:	4b0c      	ldr	r3, [pc, #48]	; (800984c <std+0x5c>)
 800981a:	62a3      	str	r3, [r4, #40]	; 0x28
 800981c:	4b0c      	ldr	r3, [pc, #48]	; (8009850 <std+0x60>)
 800981e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009820:	4b0c      	ldr	r3, [pc, #48]	; (8009854 <std+0x64>)
 8009822:	6323      	str	r3, [r4, #48]	; 0x30
 8009824:	4b0c      	ldr	r3, [pc, #48]	; (8009858 <std+0x68>)
 8009826:	429c      	cmp	r4, r3
 8009828:	d006      	beq.n	8009838 <std+0x48>
 800982a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800982e:	4294      	cmp	r4, r2
 8009830:	d002      	beq.n	8009838 <std+0x48>
 8009832:	33d0      	adds	r3, #208	; 0xd0
 8009834:	429c      	cmp	r4, r3
 8009836:	d105      	bne.n	8009844 <std+0x54>
 8009838:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800983c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009840:	f000 ba8a 	b.w	8009d58 <__retarget_lock_init_recursive>
 8009844:	bd10      	pop	{r4, pc}
 8009846:	bf00      	nop
 8009848:	08009a91 	.word	0x08009a91
 800984c:	08009ab3 	.word	0x08009ab3
 8009850:	08009aeb 	.word	0x08009aeb
 8009854:	08009b0f 	.word	0x08009b0f
 8009858:	20000334 	.word	0x20000334

0800985c <stdio_exit_handler>:
 800985c:	4a02      	ldr	r2, [pc, #8]	; (8009868 <stdio_exit_handler+0xc>)
 800985e:	4903      	ldr	r1, [pc, #12]	; (800986c <stdio_exit_handler+0x10>)
 8009860:	4803      	ldr	r0, [pc, #12]	; (8009870 <stdio_exit_handler+0x14>)
 8009862:	f000 b869 	b.w	8009938 <_fwalk_sglue>
 8009866:	bf00      	nop
 8009868:	20000044 	.word	0x20000044
 800986c:	0800b979 	.word	0x0800b979
 8009870:	20000050 	.word	0x20000050

08009874 <cleanup_stdio>:
 8009874:	6841      	ldr	r1, [r0, #4]
 8009876:	4b0c      	ldr	r3, [pc, #48]	; (80098a8 <cleanup_stdio+0x34>)
 8009878:	b510      	push	{r4, lr}
 800987a:	4299      	cmp	r1, r3
 800987c:	4604      	mov	r4, r0
 800987e:	d001      	beq.n	8009884 <cleanup_stdio+0x10>
 8009880:	f002 f87a 	bl	800b978 <_fflush_r>
 8009884:	68a1      	ldr	r1, [r4, #8]
 8009886:	4b09      	ldr	r3, [pc, #36]	; (80098ac <cleanup_stdio+0x38>)
 8009888:	4299      	cmp	r1, r3
 800988a:	d002      	beq.n	8009892 <cleanup_stdio+0x1e>
 800988c:	4620      	mov	r0, r4
 800988e:	f002 f873 	bl	800b978 <_fflush_r>
 8009892:	68e1      	ldr	r1, [r4, #12]
 8009894:	4b06      	ldr	r3, [pc, #24]	; (80098b0 <cleanup_stdio+0x3c>)
 8009896:	4299      	cmp	r1, r3
 8009898:	d004      	beq.n	80098a4 <cleanup_stdio+0x30>
 800989a:	4620      	mov	r0, r4
 800989c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098a0:	f002 b86a 	b.w	800b978 <_fflush_r>
 80098a4:	bd10      	pop	{r4, pc}
 80098a6:	bf00      	nop
 80098a8:	20000334 	.word	0x20000334
 80098ac:	2000039c 	.word	0x2000039c
 80098b0:	20000404 	.word	0x20000404

080098b4 <global_stdio_init.part.0>:
 80098b4:	b510      	push	{r4, lr}
 80098b6:	4b0b      	ldr	r3, [pc, #44]	; (80098e4 <global_stdio_init.part.0+0x30>)
 80098b8:	4c0b      	ldr	r4, [pc, #44]	; (80098e8 <global_stdio_init.part.0+0x34>)
 80098ba:	4a0c      	ldr	r2, [pc, #48]	; (80098ec <global_stdio_init.part.0+0x38>)
 80098bc:	4620      	mov	r0, r4
 80098be:	601a      	str	r2, [r3, #0]
 80098c0:	2104      	movs	r1, #4
 80098c2:	2200      	movs	r2, #0
 80098c4:	f7ff ff94 	bl	80097f0 <std>
 80098c8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80098cc:	2201      	movs	r2, #1
 80098ce:	2109      	movs	r1, #9
 80098d0:	f7ff ff8e 	bl	80097f0 <std>
 80098d4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80098d8:	2202      	movs	r2, #2
 80098da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098de:	2112      	movs	r1, #18
 80098e0:	f7ff bf86 	b.w	80097f0 <std>
 80098e4:	2000046c 	.word	0x2000046c
 80098e8:	20000334 	.word	0x20000334
 80098ec:	0800985d 	.word	0x0800985d

080098f0 <__sfp_lock_acquire>:
 80098f0:	4801      	ldr	r0, [pc, #4]	; (80098f8 <__sfp_lock_acquire+0x8>)
 80098f2:	f000 ba32 	b.w	8009d5a <__retarget_lock_acquire_recursive>
 80098f6:	bf00      	nop
 80098f8:	20000475 	.word	0x20000475

080098fc <__sfp_lock_release>:
 80098fc:	4801      	ldr	r0, [pc, #4]	; (8009904 <__sfp_lock_release+0x8>)
 80098fe:	f000 ba2d 	b.w	8009d5c <__retarget_lock_release_recursive>
 8009902:	bf00      	nop
 8009904:	20000475 	.word	0x20000475

08009908 <__sinit>:
 8009908:	b510      	push	{r4, lr}
 800990a:	4604      	mov	r4, r0
 800990c:	f7ff fff0 	bl	80098f0 <__sfp_lock_acquire>
 8009910:	6a23      	ldr	r3, [r4, #32]
 8009912:	b11b      	cbz	r3, 800991c <__sinit+0x14>
 8009914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009918:	f7ff bff0 	b.w	80098fc <__sfp_lock_release>
 800991c:	4b04      	ldr	r3, [pc, #16]	; (8009930 <__sinit+0x28>)
 800991e:	6223      	str	r3, [r4, #32]
 8009920:	4b04      	ldr	r3, [pc, #16]	; (8009934 <__sinit+0x2c>)
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d1f5      	bne.n	8009914 <__sinit+0xc>
 8009928:	f7ff ffc4 	bl	80098b4 <global_stdio_init.part.0>
 800992c:	e7f2      	b.n	8009914 <__sinit+0xc>
 800992e:	bf00      	nop
 8009930:	08009875 	.word	0x08009875
 8009934:	2000046c 	.word	0x2000046c

08009938 <_fwalk_sglue>:
 8009938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800993c:	4607      	mov	r7, r0
 800993e:	4688      	mov	r8, r1
 8009940:	4614      	mov	r4, r2
 8009942:	2600      	movs	r6, #0
 8009944:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009948:	f1b9 0901 	subs.w	r9, r9, #1
 800994c:	d505      	bpl.n	800995a <_fwalk_sglue+0x22>
 800994e:	6824      	ldr	r4, [r4, #0]
 8009950:	2c00      	cmp	r4, #0
 8009952:	d1f7      	bne.n	8009944 <_fwalk_sglue+0xc>
 8009954:	4630      	mov	r0, r6
 8009956:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800995a:	89ab      	ldrh	r3, [r5, #12]
 800995c:	2b01      	cmp	r3, #1
 800995e:	d907      	bls.n	8009970 <_fwalk_sglue+0x38>
 8009960:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009964:	3301      	adds	r3, #1
 8009966:	d003      	beq.n	8009970 <_fwalk_sglue+0x38>
 8009968:	4629      	mov	r1, r5
 800996a:	4638      	mov	r0, r7
 800996c:	47c0      	blx	r8
 800996e:	4306      	orrs	r6, r0
 8009970:	3568      	adds	r5, #104	; 0x68
 8009972:	e7e9      	b.n	8009948 <_fwalk_sglue+0x10>

08009974 <iprintf>:
 8009974:	b40f      	push	{r0, r1, r2, r3}
 8009976:	b507      	push	{r0, r1, r2, lr}
 8009978:	4906      	ldr	r1, [pc, #24]	; (8009994 <iprintf+0x20>)
 800997a:	ab04      	add	r3, sp, #16
 800997c:	6808      	ldr	r0, [r1, #0]
 800997e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009982:	6881      	ldr	r1, [r0, #8]
 8009984:	9301      	str	r3, [sp, #4]
 8009986:	f001 fe5b 	bl	800b640 <_vfiprintf_r>
 800998a:	b003      	add	sp, #12
 800998c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009990:	b004      	add	sp, #16
 8009992:	4770      	bx	lr
 8009994:	2000009c 	.word	0x2000009c

08009998 <_puts_r>:
 8009998:	6a03      	ldr	r3, [r0, #32]
 800999a:	b570      	push	{r4, r5, r6, lr}
 800999c:	4605      	mov	r5, r0
 800999e:	460e      	mov	r6, r1
 80099a0:	6884      	ldr	r4, [r0, #8]
 80099a2:	b90b      	cbnz	r3, 80099a8 <_puts_r+0x10>
 80099a4:	f7ff ffb0 	bl	8009908 <__sinit>
 80099a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80099aa:	07db      	lsls	r3, r3, #31
 80099ac:	d405      	bmi.n	80099ba <_puts_r+0x22>
 80099ae:	89a3      	ldrh	r3, [r4, #12]
 80099b0:	0598      	lsls	r0, r3, #22
 80099b2:	d402      	bmi.n	80099ba <_puts_r+0x22>
 80099b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099b6:	f000 f9d0 	bl	8009d5a <__retarget_lock_acquire_recursive>
 80099ba:	89a3      	ldrh	r3, [r4, #12]
 80099bc:	0719      	lsls	r1, r3, #28
 80099be:	d513      	bpl.n	80099e8 <_puts_r+0x50>
 80099c0:	6923      	ldr	r3, [r4, #16]
 80099c2:	b18b      	cbz	r3, 80099e8 <_puts_r+0x50>
 80099c4:	3e01      	subs	r6, #1
 80099c6:	68a3      	ldr	r3, [r4, #8]
 80099c8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80099cc:	3b01      	subs	r3, #1
 80099ce:	60a3      	str	r3, [r4, #8]
 80099d0:	b9e9      	cbnz	r1, 8009a0e <_puts_r+0x76>
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	da2e      	bge.n	8009a34 <_puts_r+0x9c>
 80099d6:	4622      	mov	r2, r4
 80099d8:	210a      	movs	r1, #10
 80099da:	4628      	mov	r0, r5
 80099dc:	f000 f89b 	bl	8009b16 <__swbuf_r>
 80099e0:	3001      	adds	r0, #1
 80099e2:	d007      	beq.n	80099f4 <_puts_r+0x5c>
 80099e4:	250a      	movs	r5, #10
 80099e6:	e007      	b.n	80099f8 <_puts_r+0x60>
 80099e8:	4621      	mov	r1, r4
 80099ea:	4628      	mov	r0, r5
 80099ec:	f000 f8d0 	bl	8009b90 <__swsetup_r>
 80099f0:	2800      	cmp	r0, #0
 80099f2:	d0e7      	beq.n	80099c4 <_puts_r+0x2c>
 80099f4:	f04f 35ff 	mov.w	r5, #4294967295
 80099f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80099fa:	07da      	lsls	r2, r3, #31
 80099fc:	d405      	bmi.n	8009a0a <_puts_r+0x72>
 80099fe:	89a3      	ldrh	r3, [r4, #12]
 8009a00:	059b      	lsls	r3, r3, #22
 8009a02:	d402      	bmi.n	8009a0a <_puts_r+0x72>
 8009a04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a06:	f000 f9a9 	bl	8009d5c <__retarget_lock_release_recursive>
 8009a0a:	4628      	mov	r0, r5
 8009a0c:	bd70      	pop	{r4, r5, r6, pc}
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	da04      	bge.n	8009a1c <_puts_r+0x84>
 8009a12:	69a2      	ldr	r2, [r4, #24]
 8009a14:	429a      	cmp	r2, r3
 8009a16:	dc06      	bgt.n	8009a26 <_puts_r+0x8e>
 8009a18:	290a      	cmp	r1, #10
 8009a1a:	d004      	beq.n	8009a26 <_puts_r+0x8e>
 8009a1c:	6823      	ldr	r3, [r4, #0]
 8009a1e:	1c5a      	adds	r2, r3, #1
 8009a20:	6022      	str	r2, [r4, #0]
 8009a22:	7019      	strb	r1, [r3, #0]
 8009a24:	e7cf      	b.n	80099c6 <_puts_r+0x2e>
 8009a26:	4622      	mov	r2, r4
 8009a28:	4628      	mov	r0, r5
 8009a2a:	f000 f874 	bl	8009b16 <__swbuf_r>
 8009a2e:	3001      	adds	r0, #1
 8009a30:	d1c9      	bne.n	80099c6 <_puts_r+0x2e>
 8009a32:	e7df      	b.n	80099f4 <_puts_r+0x5c>
 8009a34:	250a      	movs	r5, #10
 8009a36:	6823      	ldr	r3, [r4, #0]
 8009a38:	1c5a      	adds	r2, r3, #1
 8009a3a:	6022      	str	r2, [r4, #0]
 8009a3c:	701d      	strb	r5, [r3, #0]
 8009a3e:	e7db      	b.n	80099f8 <_puts_r+0x60>

08009a40 <puts>:
 8009a40:	4b02      	ldr	r3, [pc, #8]	; (8009a4c <puts+0xc>)
 8009a42:	4601      	mov	r1, r0
 8009a44:	6818      	ldr	r0, [r3, #0]
 8009a46:	f7ff bfa7 	b.w	8009998 <_puts_r>
 8009a4a:	bf00      	nop
 8009a4c:	2000009c 	.word	0x2000009c

08009a50 <siprintf>:
 8009a50:	b40e      	push	{r1, r2, r3}
 8009a52:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009a56:	b500      	push	{lr}
 8009a58:	b09c      	sub	sp, #112	; 0x70
 8009a5a:	ab1d      	add	r3, sp, #116	; 0x74
 8009a5c:	9002      	str	r0, [sp, #8]
 8009a5e:	9006      	str	r0, [sp, #24]
 8009a60:	9107      	str	r1, [sp, #28]
 8009a62:	9104      	str	r1, [sp, #16]
 8009a64:	4808      	ldr	r0, [pc, #32]	; (8009a88 <siprintf+0x38>)
 8009a66:	4909      	ldr	r1, [pc, #36]	; (8009a8c <siprintf+0x3c>)
 8009a68:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a6c:	9105      	str	r1, [sp, #20]
 8009a6e:	6800      	ldr	r0, [r0, #0]
 8009a70:	a902      	add	r1, sp, #8
 8009a72:	9301      	str	r3, [sp, #4]
 8009a74:	f001 fcbe 	bl	800b3f4 <_svfiprintf_r>
 8009a78:	2200      	movs	r2, #0
 8009a7a:	9b02      	ldr	r3, [sp, #8]
 8009a7c:	701a      	strb	r2, [r3, #0]
 8009a7e:	b01c      	add	sp, #112	; 0x70
 8009a80:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a84:	b003      	add	sp, #12
 8009a86:	4770      	bx	lr
 8009a88:	2000009c 	.word	0x2000009c
 8009a8c:	ffff0208 	.word	0xffff0208

08009a90 <__sread>:
 8009a90:	b510      	push	{r4, lr}
 8009a92:	460c      	mov	r4, r1
 8009a94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a98:	f000 f910 	bl	8009cbc <_read_r>
 8009a9c:	2800      	cmp	r0, #0
 8009a9e:	bfab      	itete	ge
 8009aa0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009aa2:	89a3      	ldrhlt	r3, [r4, #12]
 8009aa4:	181b      	addge	r3, r3, r0
 8009aa6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009aaa:	bfac      	ite	ge
 8009aac:	6563      	strge	r3, [r4, #84]	; 0x54
 8009aae:	81a3      	strhlt	r3, [r4, #12]
 8009ab0:	bd10      	pop	{r4, pc}

08009ab2 <__swrite>:
 8009ab2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ab6:	461f      	mov	r7, r3
 8009ab8:	898b      	ldrh	r3, [r1, #12]
 8009aba:	4605      	mov	r5, r0
 8009abc:	05db      	lsls	r3, r3, #23
 8009abe:	460c      	mov	r4, r1
 8009ac0:	4616      	mov	r6, r2
 8009ac2:	d505      	bpl.n	8009ad0 <__swrite+0x1e>
 8009ac4:	2302      	movs	r3, #2
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009acc:	f000 f8e4 	bl	8009c98 <_lseek_r>
 8009ad0:	89a3      	ldrh	r3, [r4, #12]
 8009ad2:	4632      	mov	r2, r6
 8009ad4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009ad8:	81a3      	strh	r3, [r4, #12]
 8009ada:	4628      	mov	r0, r5
 8009adc:	463b      	mov	r3, r7
 8009ade:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ae2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ae6:	f000 b8fb 	b.w	8009ce0 <_write_r>

08009aea <__sseek>:
 8009aea:	b510      	push	{r4, lr}
 8009aec:	460c      	mov	r4, r1
 8009aee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009af2:	f000 f8d1 	bl	8009c98 <_lseek_r>
 8009af6:	1c43      	adds	r3, r0, #1
 8009af8:	89a3      	ldrh	r3, [r4, #12]
 8009afa:	bf15      	itete	ne
 8009afc:	6560      	strne	r0, [r4, #84]	; 0x54
 8009afe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009b02:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009b06:	81a3      	strheq	r3, [r4, #12]
 8009b08:	bf18      	it	ne
 8009b0a:	81a3      	strhne	r3, [r4, #12]
 8009b0c:	bd10      	pop	{r4, pc}

08009b0e <__sclose>:
 8009b0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b12:	f000 b8b1 	b.w	8009c78 <_close_r>

08009b16 <__swbuf_r>:
 8009b16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b18:	460e      	mov	r6, r1
 8009b1a:	4614      	mov	r4, r2
 8009b1c:	4605      	mov	r5, r0
 8009b1e:	b118      	cbz	r0, 8009b28 <__swbuf_r+0x12>
 8009b20:	6a03      	ldr	r3, [r0, #32]
 8009b22:	b90b      	cbnz	r3, 8009b28 <__swbuf_r+0x12>
 8009b24:	f7ff fef0 	bl	8009908 <__sinit>
 8009b28:	69a3      	ldr	r3, [r4, #24]
 8009b2a:	60a3      	str	r3, [r4, #8]
 8009b2c:	89a3      	ldrh	r3, [r4, #12]
 8009b2e:	071a      	lsls	r2, r3, #28
 8009b30:	d525      	bpl.n	8009b7e <__swbuf_r+0x68>
 8009b32:	6923      	ldr	r3, [r4, #16]
 8009b34:	b31b      	cbz	r3, 8009b7e <__swbuf_r+0x68>
 8009b36:	6823      	ldr	r3, [r4, #0]
 8009b38:	6922      	ldr	r2, [r4, #16]
 8009b3a:	b2f6      	uxtb	r6, r6
 8009b3c:	1a98      	subs	r0, r3, r2
 8009b3e:	6963      	ldr	r3, [r4, #20]
 8009b40:	4637      	mov	r7, r6
 8009b42:	4283      	cmp	r3, r0
 8009b44:	dc04      	bgt.n	8009b50 <__swbuf_r+0x3a>
 8009b46:	4621      	mov	r1, r4
 8009b48:	4628      	mov	r0, r5
 8009b4a:	f001 ff15 	bl	800b978 <_fflush_r>
 8009b4e:	b9e0      	cbnz	r0, 8009b8a <__swbuf_r+0x74>
 8009b50:	68a3      	ldr	r3, [r4, #8]
 8009b52:	3b01      	subs	r3, #1
 8009b54:	60a3      	str	r3, [r4, #8]
 8009b56:	6823      	ldr	r3, [r4, #0]
 8009b58:	1c5a      	adds	r2, r3, #1
 8009b5a:	6022      	str	r2, [r4, #0]
 8009b5c:	701e      	strb	r6, [r3, #0]
 8009b5e:	6962      	ldr	r2, [r4, #20]
 8009b60:	1c43      	adds	r3, r0, #1
 8009b62:	429a      	cmp	r2, r3
 8009b64:	d004      	beq.n	8009b70 <__swbuf_r+0x5a>
 8009b66:	89a3      	ldrh	r3, [r4, #12]
 8009b68:	07db      	lsls	r3, r3, #31
 8009b6a:	d506      	bpl.n	8009b7a <__swbuf_r+0x64>
 8009b6c:	2e0a      	cmp	r6, #10
 8009b6e:	d104      	bne.n	8009b7a <__swbuf_r+0x64>
 8009b70:	4621      	mov	r1, r4
 8009b72:	4628      	mov	r0, r5
 8009b74:	f001 ff00 	bl	800b978 <_fflush_r>
 8009b78:	b938      	cbnz	r0, 8009b8a <__swbuf_r+0x74>
 8009b7a:	4638      	mov	r0, r7
 8009b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b7e:	4621      	mov	r1, r4
 8009b80:	4628      	mov	r0, r5
 8009b82:	f000 f805 	bl	8009b90 <__swsetup_r>
 8009b86:	2800      	cmp	r0, #0
 8009b88:	d0d5      	beq.n	8009b36 <__swbuf_r+0x20>
 8009b8a:	f04f 37ff 	mov.w	r7, #4294967295
 8009b8e:	e7f4      	b.n	8009b7a <__swbuf_r+0x64>

08009b90 <__swsetup_r>:
 8009b90:	b538      	push	{r3, r4, r5, lr}
 8009b92:	4b2a      	ldr	r3, [pc, #168]	; (8009c3c <__swsetup_r+0xac>)
 8009b94:	4605      	mov	r5, r0
 8009b96:	6818      	ldr	r0, [r3, #0]
 8009b98:	460c      	mov	r4, r1
 8009b9a:	b118      	cbz	r0, 8009ba4 <__swsetup_r+0x14>
 8009b9c:	6a03      	ldr	r3, [r0, #32]
 8009b9e:	b90b      	cbnz	r3, 8009ba4 <__swsetup_r+0x14>
 8009ba0:	f7ff feb2 	bl	8009908 <__sinit>
 8009ba4:	89a3      	ldrh	r3, [r4, #12]
 8009ba6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009baa:	0718      	lsls	r0, r3, #28
 8009bac:	d422      	bmi.n	8009bf4 <__swsetup_r+0x64>
 8009bae:	06d9      	lsls	r1, r3, #27
 8009bb0:	d407      	bmi.n	8009bc2 <__swsetup_r+0x32>
 8009bb2:	2309      	movs	r3, #9
 8009bb4:	602b      	str	r3, [r5, #0]
 8009bb6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009bba:	f04f 30ff 	mov.w	r0, #4294967295
 8009bbe:	81a3      	strh	r3, [r4, #12]
 8009bc0:	e034      	b.n	8009c2c <__swsetup_r+0x9c>
 8009bc2:	0758      	lsls	r0, r3, #29
 8009bc4:	d512      	bpl.n	8009bec <__swsetup_r+0x5c>
 8009bc6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009bc8:	b141      	cbz	r1, 8009bdc <__swsetup_r+0x4c>
 8009bca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009bce:	4299      	cmp	r1, r3
 8009bd0:	d002      	beq.n	8009bd8 <__swsetup_r+0x48>
 8009bd2:	4628      	mov	r0, r5
 8009bd4:	f000 ff40 	bl	800aa58 <_free_r>
 8009bd8:	2300      	movs	r3, #0
 8009bda:	6363      	str	r3, [r4, #52]	; 0x34
 8009bdc:	89a3      	ldrh	r3, [r4, #12]
 8009bde:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009be2:	81a3      	strh	r3, [r4, #12]
 8009be4:	2300      	movs	r3, #0
 8009be6:	6063      	str	r3, [r4, #4]
 8009be8:	6923      	ldr	r3, [r4, #16]
 8009bea:	6023      	str	r3, [r4, #0]
 8009bec:	89a3      	ldrh	r3, [r4, #12]
 8009bee:	f043 0308 	orr.w	r3, r3, #8
 8009bf2:	81a3      	strh	r3, [r4, #12]
 8009bf4:	6923      	ldr	r3, [r4, #16]
 8009bf6:	b94b      	cbnz	r3, 8009c0c <__swsetup_r+0x7c>
 8009bf8:	89a3      	ldrh	r3, [r4, #12]
 8009bfa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009bfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c02:	d003      	beq.n	8009c0c <__swsetup_r+0x7c>
 8009c04:	4621      	mov	r1, r4
 8009c06:	4628      	mov	r0, r5
 8009c08:	f001 ff03 	bl	800ba12 <__smakebuf_r>
 8009c0c:	89a0      	ldrh	r0, [r4, #12]
 8009c0e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009c12:	f010 0301 	ands.w	r3, r0, #1
 8009c16:	d00a      	beq.n	8009c2e <__swsetup_r+0x9e>
 8009c18:	2300      	movs	r3, #0
 8009c1a:	60a3      	str	r3, [r4, #8]
 8009c1c:	6963      	ldr	r3, [r4, #20]
 8009c1e:	425b      	negs	r3, r3
 8009c20:	61a3      	str	r3, [r4, #24]
 8009c22:	6923      	ldr	r3, [r4, #16]
 8009c24:	b943      	cbnz	r3, 8009c38 <__swsetup_r+0xa8>
 8009c26:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009c2a:	d1c4      	bne.n	8009bb6 <__swsetup_r+0x26>
 8009c2c:	bd38      	pop	{r3, r4, r5, pc}
 8009c2e:	0781      	lsls	r1, r0, #30
 8009c30:	bf58      	it	pl
 8009c32:	6963      	ldrpl	r3, [r4, #20]
 8009c34:	60a3      	str	r3, [r4, #8]
 8009c36:	e7f4      	b.n	8009c22 <__swsetup_r+0x92>
 8009c38:	2000      	movs	r0, #0
 8009c3a:	e7f7      	b.n	8009c2c <__swsetup_r+0x9c>
 8009c3c:	2000009c 	.word	0x2000009c

08009c40 <memcmp>:
 8009c40:	b510      	push	{r4, lr}
 8009c42:	3901      	subs	r1, #1
 8009c44:	4402      	add	r2, r0
 8009c46:	4290      	cmp	r0, r2
 8009c48:	d101      	bne.n	8009c4e <memcmp+0xe>
 8009c4a:	2000      	movs	r0, #0
 8009c4c:	e005      	b.n	8009c5a <memcmp+0x1a>
 8009c4e:	7803      	ldrb	r3, [r0, #0]
 8009c50:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009c54:	42a3      	cmp	r3, r4
 8009c56:	d001      	beq.n	8009c5c <memcmp+0x1c>
 8009c58:	1b18      	subs	r0, r3, r4
 8009c5a:	bd10      	pop	{r4, pc}
 8009c5c:	3001      	adds	r0, #1
 8009c5e:	e7f2      	b.n	8009c46 <memcmp+0x6>

08009c60 <memset>:
 8009c60:	4603      	mov	r3, r0
 8009c62:	4402      	add	r2, r0
 8009c64:	4293      	cmp	r3, r2
 8009c66:	d100      	bne.n	8009c6a <memset+0xa>
 8009c68:	4770      	bx	lr
 8009c6a:	f803 1b01 	strb.w	r1, [r3], #1
 8009c6e:	e7f9      	b.n	8009c64 <memset+0x4>

08009c70 <_localeconv_r>:
 8009c70:	4800      	ldr	r0, [pc, #0]	; (8009c74 <_localeconv_r+0x4>)
 8009c72:	4770      	bx	lr
 8009c74:	20000190 	.word	0x20000190

08009c78 <_close_r>:
 8009c78:	b538      	push	{r3, r4, r5, lr}
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	4d05      	ldr	r5, [pc, #20]	; (8009c94 <_close_r+0x1c>)
 8009c7e:	4604      	mov	r4, r0
 8009c80:	4608      	mov	r0, r1
 8009c82:	602b      	str	r3, [r5, #0]
 8009c84:	f7f8 fb00 	bl	8002288 <_close>
 8009c88:	1c43      	adds	r3, r0, #1
 8009c8a:	d102      	bne.n	8009c92 <_close_r+0x1a>
 8009c8c:	682b      	ldr	r3, [r5, #0]
 8009c8e:	b103      	cbz	r3, 8009c92 <_close_r+0x1a>
 8009c90:	6023      	str	r3, [r4, #0]
 8009c92:	bd38      	pop	{r3, r4, r5, pc}
 8009c94:	20000470 	.word	0x20000470

08009c98 <_lseek_r>:
 8009c98:	b538      	push	{r3, r4, r5, lr}
 8009c9a:	4604      	mov	r4, r0
 8009c9c:	4608      	mov	r0, r1
 8009c9e:	4611      	mov	r1, r2
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	4d05      	ldr	r5, [pc, #20]	; (8009cb8 <_lseek_r+0x20>)
 8009ca4:	602a      	str	r2, [r5, #0]
 8009ca6:	461a      	mov	r2, r3
 8009ca8:	f7f8 fb12 	bl	80022d0 <_lseek>
 8009cac:	1c43      	adds	r3, r0, #1
 8009cae:	d102      	bne.n	8009cb6 <_lseek_r+0x1e>
 8009cb0:	682b      	ldr	r3, [r5, #0]
 8009cb2:	b103      	cbz	r3, 8009cb6 <_lseek_r+0x1e>
 8009cb4:	6023      	str	r3, [r4, #0]
 8009cb6:	bd38      	pop	{r3, r4, r5, pc}
 8009cb8:	20000470 	.word	0x20000470

08009cbc <_read_r>:
 8009cbc:	b538      	push	{r3, r4, r5, lr}
 8009cbe:	4604      	mov	r4, r0
 8009cc0:	4608      	mov	r0, r1
 8009cc2:	4611      	mov	r1, r2
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	4d05      	ldr	r5, [pc, #20]	; (8009cdc <_read_r+0x20>)
 8009cc8:	602a      	str	r2, [r5, #0]
 8009cca:	461a      	mov	r2, r3
 8009ccc:	f7f8 faa3 	bl	8002216 <_read>
 8009cd0:	1c43      	adds	r3, r0, #1
 8009cd2:	d102      	bne.n	8009cda <_read_r+0x1e>
 8009cd4:	682b      	ldr	r3, [r5, #0]
 8009cd6:	b103      	cbz	r3, 8009cda <_read_r+0x1e>
 8009cd8:	6023      	str	r3, [r4, #0]
 8009cda:	bd38      	pop	{r3, r4, r5, pc}
 8009cdc:	20000470 	.word	0x20000470

08009ce0 <_write_r>:
 8009ce0:	b538      	push	{r3, r4, r5, lr}
 8009ce2:	4604      	mov	r4, r0
 8009ce4:	4608      	mov	r0, r1
 8009ce6:	4611      	mov	r1, r2
 8009ce8:	2200      	movs	r2, #0
 8009cea:	4d05      	ldr	r5, [pc, #20]	; (8009d00 <_write_r+0x20>)
 8009cec:	602a      	str	r2, [r5, #0]
 8009cee:	461a      	mov	r2, r3
 8009cf0:	f7f8 faae 	bl	8002250 <_write>
 8009cf4:	1c43      	adds	r3, r0, #1
 8009cf6:	d102      	bne.n	8009cfe <_write_r+0x1e>
 8009cf8:	682b      	ldr	r3, [r5, #0]
 8009cfa:	b103      	cbz	r3, 8009cfe <_write_r+0x1e>
 8009cfc:	6023      	str	r3, [r4, #0]
 8009cfe:	bd38      	pop	{r3, r4, r5, pc}
 8009d00:	20000470 	.word	0x20000470

08009d04 <__errno>:
 8009d04:	4b01      	ldr	r3, [pc, #4]	; (8009d0c <__errno+0x8>)
 8009d06:	6818      	ldr	r0, [r3, #0]
 8009d08:	4770      	bx	lr
 8009d0a:	bf00      	nop
 8009d0c:	2000009c 	.word	0x2000009c

08009d10 <__libc_init_array>:
 8009d10:	b570      	push	{r4, r5, r6, lr}
 8009d12:	2600      	movs	r6, #0
 8009d14:	4d0c      	ldr	r5, [pc, #48]	; (8009d48 <__libc_init_array+0x38>)
 8009d16:	4c0d      	ldr	r4, [pc, #52]	; (8009d4c <__libc_init_array+0x3c>)
 8009d18:	1b64      	subs	r4, r4, r5
 8009d1a:	10a4      	asrs	r4, r4, #2
 8009d1c:	42a6      	cmp	r6, r4
 8009d1e:	d109      	bne.n	8009d34 <__libc_init_array+0x24>
 8009d20:	f002 fd58 	bl	800c7d4 <_init>
 8009d24:	2600      	movs	r6, #0
 8009d26:	4d0a      	ldr	r5, [pc, #40]	; (8009d50 <__libc_init_array+0x40>)
 8009d28:	4c0a      	ldr	r4, [pc, #40]	; (8009d54 <__libc_init_array+0x44>)
 8009d2a:	1b64      	subs	r4, r4, r5
 8009d2c:	10a4      	asrs	r4, r4, #2
 8009d2e:	42a6      	cmp	r6, r4
 8009d30:	d105      	bne.n	8009d3e <__libc_init_array+0x2e>
 8009d32:	bd70      	pop	{r4, r5, r6, pc}
 8009d34:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d38:	4798      	blx	r3
 8009d3a:	3601      	adds	r6, #1
 8009d3c:	e7ee      	b.n	8009d1c <__libc_init_array+0xc>
 8009d3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d42:	4798      	blx	r3
 8009d44:	3601      	adds	r6, #1
 8009d46:	e7f2      	b.n	8009d2e <__libc_init_array+0x1e>
 8009d48:	0800da00 	.word	0x0800da00
 8009d4c:	0800da00 	.word	0x0800da00
 8009d50:	0800da00 	.word	0x0800da00
 8009d54:	0800da04 	.word	0x0800da04

08009d58 <__retarget_lock_init_recursive>:
 8009d58:	4770      	bx	lr

08009d5a <__retarget_lock_acquire_recursive>:
 8009d5a:	4770      	bx	lr

08009d5c <__retarget_lock_release_recursive>:
 8009d5c:	4770      	bx	lr

08009d5e <memchr>:
 8009d5e:	4603      	mov	r3, r0
 8009d60:	b510      	push	{r4, lr}
 8009d62:	b2c9      	uxtb	r1, r1
 8009d64:	4402      	add	r2, r0
 8009d66:	4293      	cmp	r3, r2
 8009d68:	4618      	mov	r0, r3
 8009d6a:	d101      	bne.n	8009d70 <memchr+0x12>
 8009d6c:	2000      	movs	r0, #0
 8009d6e:	e003      	b.n	8009d78 <memchr+0x1a>
 8009d70:	7804      	ldrb	r4, [r0, #0]
 8009d72:	3301      	adds	r3, #1
 8009d74:	428c      	cmp	r4, r1
 8009d76:	d1f6      	bne.n	8009d66 <memchr+0x8>
 8009d78:	bd10      	pop	{r4, pc}

08009d7a <quorem>:
 8009d7a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d7e:	6903      	ldr	r3, [r0, #16]
 8009d80:	690c      	ldr	r4, [r1, #16]
 8009d82:	4607      	mov	r7, r0
 8009d84:	42a3      	cmp	r3, r4
 8009d86:	db7f      	blt.n	8009e88 <quorem+0x10e>
 8009d88:	3c01      	subs	r4, #1
 8009d8a:	f100 0514 	add.w	r5, r0, #20
 8009d8e:	f101 0814 	add.w	r8, r1, #20
 8009d92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009d96:	9301      	str	r3, [sp, #4]
 8009d98:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009d9c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009da0:	3301      	adds	r3, #1
 8009da2:	429a      	cmp	r2, r3
 8009da4:	fbb2 f6f3 	udiv	r6, r2, r3
 8009da8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009dac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009db0:	d331      	bcc.n	8009e16 <quorem+0x9c>
 8009db2:	f04f 0e00 	mov.w	lr, #0
 8009db6:	4640      	mov	r0, r8
 8009db8:	46ac      	mov	ip, r5
 8009dba:	46f2      	mov	sl, lr
 8009dbc:	f850 2b04 	ldr.w	r2, [r0], #4
 8009dc0:	b293      	uxth	r3, r2
 8009dc2:	fb06 e303 	mla	r3, r6, r3, lr
 8009dc6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009dca:	0c1a      	lsrs	r2, r3, #16
 8009dcc:	b29b      	uxth	r3, r3
 8009dce:	fb06 220e 	mla	r2, r6, lr, r2
 8009dd2:	ebaa 0303 	sub.w	r3, sl, r3
 8009dd6:	f8dc a000 	ldr.w	sl, [ip]
 8009dda:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009dde:	fa1f fa8a 	uxth.w	sl, sl
 8009de2:	4453      	add	r3, sl
 8009de4:	f8dc a000 	ldr.w	sl, [ip]
 8009de8:	b292      	uxth	r2, r2
 8009dea:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009dee:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009df2:	b29b      	uxth	r3, r3
 8009df4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009df8:	4581      	cmp	r9, r0
 8009dfa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009dfe:	f84c 3b04 	str.w	r3, [ip], #4
 8009e02:	d2db      	bcs.n	8009dbc <quorem+0x42>
 8009e04:	f855 300b 	ldr.w	r3, [r5, fp]
 8009e08:	b92b      	cbnz	r3, 8009e16 <quorem+0x9c>
 8009e0a:	9b01      	ldr	r3, [sp, #4]
 8009e0c:	3b04      	subs	r3, #4
 8009e0e:	429d      	cmp	r5, r3
 8009e10:	461a      	mov	r2, r3
 8009e12:	d32d      	bcc.n	8009e70 <quorem+0xf6>
 8009e14:	613c      	str	r4, [r7, #16]
 8009e16:	4638      	mov	r0, r7
 8009e18:	f001 f994 	bl	800b144 <__mcmp>
 8009e1c:	2800      	cmp	r0, #0
 8009e1e:	db23      	blt.n	8009e68 <quorem+0xee>
 8009e20:	4629      	mov	r1, r5
 8009e22:	2000      	movs	r0, #0
 8009e24:	3601      	adds	r6, #1
 8009e26:	f858 2b04 	ldr.w	r2, [r8], #4
 8009e2a:	f8d1 c000 	ldr.w	ip, [r1]
 8009e2e:	b293      	uxth	r3, r2
 8009e30:	1ac3      	subs	r3, r0, r3
 8009e32:	0c12      	lsrs	r2, r2, #16
 8009e34:	fa1f f08c 	uxth.w	r0, ip
 8009e38:	4403      	add	r3, r0
 8009e3a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009e3e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009e42:	b29b      	uxth	r3, r3
 8009e44:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e48:	45c1      	cmp	r9, r8
 8009e4a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009e4e:	f841 3b04 	str.w	r3, [r1], #4
 8009e52:	d2e8      	bcs.n	8009e26 <quorem+0xac>
 8009e54:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009e58:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009e5c:	b922      	cbnz	r2, 8009e68 <quorem+0xee>
 8009e5e:	3b04      	subs	r3, #4
 8009e60:	429d      	cmp	r5, r3
 8009e62:	461a      	mov	r2, r3
 8009e64:	d30a      	bcc.n	8009e7c <quorem+0x102>
 8009e66:	613c      	str	r4, [r7, #16]
 8009e68:	4630      	mov	r0, r6
 8009e6a:	b003      	add	sp, #12
 8009e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e70:	6812      	ldr	r2, [r2, #0]
 8009e72:	3b04      	subs	r3, #4
 8009e74:	2a00      	cmp	r2, #0
 8009e76:	d1cd      	bne.n	8009e14 <quorem+0x9a>
 8009e78:	3c01      	subs	r4, #1
 8009e7a:	e7c8      	b.n	8009e0e <quorem+0x94>
 8009e7c:	6812      	ldr	r2, [r2, #0]
 8009e7e:	3b04      	subs	r3, #4
 8009e80:	2a00      	cmp	r2, #0
 8009e82:	d1f0      	bne.n	8009e66 <quorem+0xec>
 8009e84:	3c01      	subs	r4, #1
 8009e86:	e7eb      	b.n	8009e60 <quorem+0xe6>
 8009e88:	2000      	movs	r0, #0
 8009e8a:	e7ee      	b.n	8009e6a <quorem+0xf0>
 8009e8c:	0000      	movs	r0, r0
	...

08009e90 <_dtoa_r>:
 8009e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e94:	4616      	mov	r6, r2
 8009e96:	461f      	mov	r7, r3
 8009e98:	69c4      	ldr	r4, [r0, #28]
 8009e9a:	b099      	sub	sp, #100	; 0x64
 8009e9c:	4605      	mov	r5, r0
 8009e9e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009ea2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8009ea6:	b974      	cbnz	r4, 8009ec6 <_dtoa_r+0x36>
 8009ea8:	2010      	movs	r0, #16
 8009eaa:	f000 fe1d 	bl	800aae8 <malloc>
 8009eae:	4602      	mov	r2, r0
 8009eb0:	61e8      	str	r0, [r5, #28]
 8009eb2:	b920      	cbnz	r0, 8009ebe <_dtoa_r+0x2e>
 8009eb4:	21ef      	movs	r1, #239	; 0xef
 8009eb6:	4bac      	ldr	r3, [pc, #688]	; (800a168 <_dtoa_r+0x2d8>)
 8009eb8:	48ac      	ldr	r0, [pc, #688]	; (800a16c <_dtoa_r+0x2dc>)
 8009eba:	f001 fe41 	bl	800bb40 <__assert_func>
 8009ebe:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009ec2:	6004      	str	r4, [r0, #0]
 8009ec4:	60c4      	str	r4, [r0, #12]
 8009ec6:	69eb      	ldr	r3, [r5, #28]
 8009ec8:	6819      	ldr	r1, [r3, #0]
 8009eca:	b151      	cbz	r1, 8009ee2 <_dtoa_r+0x52>
 8009ecc:	685a      	ldr	r2, [r3, #4]
 8009ece:	2301      	movs	r3, #1
 8009ed0:	4093      	lsls	r3, r2
 8009ed2:	604a      	str	r2, [r1, #4]
 8009ed4:	608b      	str	r3, [r1, #8]
 8009ed6:	4628      	mov	r0, r5
 8009ed8:	f000 fefa 	bl	800acd0 <_Bfree>
 8009edc:	2200      	movs	r2, #0
 8009ede:	69eb      	ldr	r3, [r5, #28]
 8009ee0:	601a      	str	r2, [r3, #0]
 8009ee2:	1e3b      	subs	r3, r7, #0
 8009ee4:	bfaf      	iteee	ge
 8009ee6:	2300      	movge	r3, #0
 8009ee8:	2201      	movlt	r2, #1
 8009eea:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009eee:	9305      	strlt	r3, [sp, #20]
 8009ef0:	bfa8      	it	ge
 8009ef2:	f8c8 3000 	strge.w	r3, [r8]
 8009ef6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8009efa:	4b9d      	ldr	r3, [pc, #628]	; (800a170 <_dtoa_r+0x2e0>)
 8009efc:	bfb8      	it	lt
 8009efe:	f8c8 2000 	strlt.w	r2, [r8]
 8009f02:	ea33 0309 	bics.w	r3, r3, r9
 8009f06:	d119      	bne.n	8009f3c <_dtoa_r+0xac>
 8009f08:	f242 730f 	movw	r3, #9999	; 0x270f
 8009f0c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009f0e:	6013      	str	r3, [r2, #0]
 8009f10:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009f14:	4333      	orrs	r3, r6
 8009f16:	f000 8589 	beq.w	800aa2c <_dtoa_r+0xb9c>
 8009f1a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009f1c:	b953      	cbnz	r3, 8009f34 <_dtoa_r+0xa4>
 8009f1e:	4b95      	ldr	r3, [pc, #596]	; (800a174 <_dtoa_r+0x2e4>)
 8009f20:	e023      	b.n	8009f6a <_dtoa_r+0xda>
 8009f22:	4b95      	ldr	r3, [pc, #596]	; (800a178 <_dtoa_r+0x2e8>)
 8009f24:	9303      	str	r3, [sp, #12]
 8009f26:	3308      	adds	r3, #8
 8009f28:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009f2a:	6013      	str	r3, [r2, #0]
 8009f2c:	9803      	ldr	r0, [sp, #12]
 8009f2e:	b019      	add	sp, #100	; 0x64
 8009f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f34:	4b8f      	ldr	r3, [pc, #572]	; (800a174 <_dtoa_r+0x2e4>)
 8009f36:	9303      	str	r3, [sp, #12]
 8009f38:	3303      	adds	r3, #3
 8009f3a:	e7f5      	b.n	8009f28 <_dtoa_r+0x98>
 8009f3c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009f40:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8009f44:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009f48:	2200      	movs	r2, #0
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	f7f6 fd2c 	bl	80009a8 <__aeabi_dcmpeq>
 8009f50:	4680      	mov	r8, r0
 8009f52:	b160      	cbz	r0, 8009f6e <_dtoa_r+0xde>
 8009f54:	2301      	movs	r3, #1
 8009f56:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009f58:	6013      	str	r3, [r2, #0]
 8009f5a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	f000 8562 	beq.w	800aa26 <_dtoa_r+0xb96>
 8009f62:	4b86      	ldr	r3, [pc, #536]	; (800a17c <_dtoa_r+0x2ec>)
 8009f64:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009f66:	6013      	str	r3, [r2, #0]
 8009f68:	3b01      	subs	r3, #1
 8009f6a:	9303      	str	r3, [sp, #12]
 8009f6c:	e7de      	b.n	8009f2c <_dtoa_r+0x9c>
 8009f6e:	ab16      	add	r3, sp, #88	; 0x58
 8009f70:	9301      	str	r3, [sp, #4]
 8009f72:	ab17      	add	r3, sp, #92	; 0x5c
 8009f74:	9300      	str	r3, [sp, #0]
 8009f76:	4628      	mov	r0, r5
 8009f78:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009f7c:	f001 f98a 	bl	800b294 <__d2b>
 8009f80:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009f84:	4682      	mov	sl, r0
 8009f86:	2c00      	cmp	r4, #0
 8009f88:	d07e      	beq.n	800a088 <_dtoa_r+0x1f8>
 8009f8a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009f8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f90:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8009f94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009f98:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009f9c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009fa0:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8009fa4:	4619      	mov	r1, r3
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	4b75      	ldr	r3, [pc, #468]	; (800a180 <_dtoa_r+0x2f0>)
 8009faa:	f7f6 f8dd 	bl	8000168 <__aeabi_dsub>
 8009fae:	a368      	add	r3, pc, #416	; (adr r3, 800a150 <_dtoa_r+0x2c0>)
 8009fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fb4:	f7f6 fa90 	bl	80004d8 <__aeabi_dmul>
 8009fb8:	a367      	add	r3, pc, #412	; (adr r3, 800a158 <_dtoa_r+0x2c8>)
 8009fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fbe:	f7f6 f8d5 	bl	800016c <__adddf3>
 8009fc2:	4606      	mov	r6, r0
 8009fc4:	4620      	mov	r0, r4
 8009fc6:	460f      	mov	r7, r1
 8009fc8:	f7f6 fa1c 	bl	8000404 <__aeabi_i2d>
 8009fcc:	a364      	add	r3, pc, #400	; (adr r3, 800a160 <_dtoa_r+0x2d0>)
 8009fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fd2:	f7f6 fa81 	bl	80004d8 <__aeabi_dmul>
 8009fd6:	4602      	mov	r2, r0
 8009fd8:	460b      	mov	r3, r1
 8009fda:	4630      	mov	r0, r6
 8009fdc:	4639      	mov	r1, r7
 8009fde:	f7f6 f8c5 	bl	800016c <__adddf3>
 8009fe2:	4606      	mov	r6, r0
 8009fe4:	460f      	mov	r7, r1
 8009fe6:	f7f6 fd27 	bl	8000a38 <__aeabi_d2iz>
 8009fea:	2200      	movs	r2, #0
 8009fec:	4683      	mov	fp, r0
 8009fee:	2300      	movs	r3, #0
 8009ff0:	4630      	mov	r0, r6
 8009ff2:	4639      	mov	r1, r7
 8009ff4:	f7f6 fce2 	bl	80009bc <__aeabi_dcmplt>
 8009ff8:	b148      	cbz	r0, 800a00e <_dtoa_r+0x17e>
 8009ffa:	4658      	mov	r0, fp
 8009ffc:	f7f6 fa02 	bl	8000404 <__aeabi_i2d>
 800a000:	4632      	mov	r2, r6
 800a002:	463b      	mov	r3, r7
 800a004:	f7f6 fcd0 	bl	80009a8 <__aeabi_dcmpeq>
 800a008:	b908      	cbnz	r0, 800a00e <_dtoa_r+0x17e>
 800a00a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a00e:	f1bb 0f16 	cmp.w	fp, #22
 800a012:	d857      	bhi.n	800a0c4 <_dtoa_r+0x234>
 800a014:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a018:	4b5a      	ldr	r3, [pc, #360]	; (800a184 <_dtoa_r+0x2f4>)
 800a01a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a01e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a022:	f7f6 fccb 	bl	80009bc <__aeabi_dcmplt>
 800a026:	2800      	cmp	r0, #0
 800a028:	d04e      	beq.n	800a0c8 <_dtoa_r+0x238>
 800a02a:	2300      	movs	r3, #0
 800a02c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a030:	930f      	str	r3, [sp, #60]	; 0x3c
 800a032:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a034:	1b1b      	subs	r3, r3, r4
 800a036:	1e5a      	subs	r2, r3, #1
 800a038:	bf46      	itte	mi
 800a03a:	f1c3 0901 	rsbmi	r9, r3, #1
 800a03e:	2300      	movmi	r3, #0
 800a040:	f04f 0900 	movpl.w	r9, #0
 800a044:	9209      	str	r2, [sp, #36]	; 0x24
 800a046:	bf48      	it	mi
 800a048:	9309      	strmi	r3, [sp, #36]	; 0x24
 800a04a:	f1bb 0f00 	cmp.w	fp, #0
 800a04e:	db3d      	blt.n	800a0cc <_dtoa_r+0x23c>
 800a050:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a052:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800a056:	445b      	add	r3, fp
 800a058:	9309      	str	r3, [sp, #36]	; 0x24
 800a05a:	2300      	movs	r3, #0
 800a05c:	930a      	str	r3, [sp, #40]	; 0x28
 800a05e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a060:	2b09      	cmp	r3, #9
 800a062:	d867      	bhi.n	800a134 <_dtoa_r+0x2a4>
 800a064:	2b05      	cmp	r3, #5
 800a066:	bfc4      	itt	gt
 800a068:	3b04      	subgt	r3, #4
 800a06a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800a06c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a06e:	bfc8      	it	gt
 800a070:	2400      	movgt	r4, #0
 800a072:	f1a3 0302 	sub.w	r3, r3, #2
 800a076:	bfd8      	it	le
 800a078:	2401      	movle	r4, #1
 800a07a:	2b03      	cmp	r3, #3
 800a07c:	f200 8086 	bhi.w	800a18c <_dtoa_r+0x2fc>
 800a080:	e8df f003 	tbb	[pc, r3]
 800a084:	5637392c 	.word	0x5637392c
 800a088:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800a08c:	441c      	add	r4, r3
 800a08e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800a092:	2b20      	cmp	r3, #32
 800a094:	bfc1      	itttt	gt
 800a096:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a09a:	fa09 f903 	lslgt.w	r9, r9, r3
 800a09e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 800a0a2:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a0a6:	bfd6      	itet	le
 800a0a8:	f1c3 0320 	rsble	r3, r3, #32
 800a0ac:	ea49 0003 	orrgt.w	r0, r9, r3
 800a0b0:	fa06 f003 	lslle.w	r0, r6, r3
 800a0b4:	f7f6 f996 	bl	80003e4 <__aeabi_ui2d>
 800a0b8:	2201      	movs	r2, #1
 800a0ba:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a0be:	3c01      	subs	r4, #1
 800a0c0:	9213      	str	r2, [sp, #76]	; 0x4c
 800a0c2:	e76f      	b.n	8009fa4 <_dtoa_r+0x114>
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	e7b3      	b.n	800a030 <_dtoa_r+0x1a0>
 800a0c8:	900f      	str	r0, [sp, #60]	; 0x3c
 800a0ca:	e7b2      	b.n	800a032 <_dtoa_r+0x1a2>
 800a0cc:	f1cb 0300 	rsb	r3, fp, #0
 800a0d0:	930a      	str	r3, [sp, #40]	; 0x28
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	eba9 090b 	sub.w	r9, r9, fp
 800a0d8:	930e      	str	r3, [sp, #56]	; 0x38
 800a0da:	e7c0      	b.n	800a05e <_dtoa_r+0x1ce>
 800a0dc:	2300      	movs	r3, #0
 800a0de:	930b      	str	r3, [sp, #44]	; 0x2c
 800a0e0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	dc55      	bgt.n	800a192 <_dtoa_r+0x302>
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	461a      	mov	r2, r3
 800a0ea:	9306      	str	r3, [sp, #24]
 800a0ec:	9308      	str	r3, [sp, #32]
 800a0ee:	9223      	str	r2, [sp, #140]	; 0x8c
 800a0f0:	e00b      	b.n	800a10a <_dtoa_r+0x27a>
 800a0f2:	2301      	movs	r3, #1
 800a0f4:	e7f3      	b.n	800a0de <_dtoa_r+0x24e>
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	930b      	str	r3, [sp, #44]	; 0x2c
 800a0fa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a0fc:	445b      	add	r3, fp
 800a0fe:	9306      	str	r3, [sp, #24]
 800a100:	3301      	adds	r3, #1
 800a102:	2b01      	cmp	r3, #1
 800a104:	9308      	str	r3, [sp, #32]
 800a106:	bfb8      	it	lt
 800a108:	2301      	movlt	r3, #1
 800a10a:	2100      	movs	r1, #0
 800a10c:	2204      	movs	r2, #4
 800a10e:	69e8      	ldr	r0, [r5, #28]
 800a110:	f102 0614 	add.w	r6, r2, #20
 800a114:	429e      	cmp	r6, r3
 800a116:	d940      	bls.n	800a19a <_dtoa_r+0x30a>
 800a118:	6041      	str	r1, [r0, #4]
 800a11a:	4628      	mov	r0, r5
 800a11c:	f000 fd98 	bl	800ac50 <_Balloc>
 800a120:	9003      	str	r0, [sp, #12]
 800a122:	2800      	cmp	r0, #0
 800a124:	d13c      	bne.n	800a1a0 <_dtoa_r+0x310>
 800a126:	4602      	mov	r2, r0
 800a128:	f240 11af 	movw	r1, #431	; 0x1af
 800a12c:	4b16      	ldr	r3, [pc, #88]	; (800a188 <_dtoa_r+0x2f8>)
 800a12e:	e6c3      	b.n	8009eb8 <_dtoa_r+0x28>
 800a130:	2301      	movs	r3, #1
 800a132:	e7e1      	b.n	800a0f8 <_dtoa_r+0x268>
 800a134:	2401      	movs	r4, #1
 800a136:	2300      	movs	r3, #0
 800a138:	940b      	str	r4, [sp, #44]	; 0x2c
 800a13a:	9322      	str	r3, [sp, #136]	; 0x88
 800a13c:	f04f 33ff 	mov.w	r3, #4294967295
 800a140:	2200      	movs	r2, #0
 800a142:	9306      	str	r3, [sp, #24]
 800a144:	9308      	str	r3, [sp, #32]
 800a146:	2312      	movs	r3, #18
 800a148:	e7d1      	b.n	800a0ee <_dtoa_r+0x25e>
 800a14a:	bf00      	nop
 800a14c:	f3af 8000 	nop.w
 800a150:	636f4361 	.word	0x636f4361
 800a154:	3fd287a7 	.word	0x3fd287a7
 800a158:	8b60c8b3 	.word	0x8b60c8b3
 800a15c:	3fc68a28 	.word	0x3fc68a28
 800a160:	509f79fb 	.word	0x509f79fb
 800a164:	3fd34413 	.word	0x3fd34413
 800a168:	0800d657 	.word	0x0800d657
 800a16c:	0800d66e 	.word	0x0800d66e
 800a170:	7ff00000 	.word	0x7ff00000
 800a174:	0800d653 	.word	0x0800d653
 800a178:	0800d64a 	.word	0x0800d64a
 800a17c:	0800d627 	.word	0x0800d627
 800a180:	3ff80000 	.word	0x3ff80000
 800a184:	0800d758 	.word	0x0800d758
 800a188:	0800d6c6 	.word	0x0800d6c6
 800a18c:	2301      	movs	r3, #1
 800a18e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a190:	e7d4      	b.n	800a13c <_dtoa_r+0x2ac>
 800a192:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a194:	9306      	str	r3, [sp, #24]
 800a196:	9308      	str	r3, [sp, #32]
 800a198:	e7b7      	b.n	800a10a <_dtoa_r+0x27a>
 800a19a:	3101      	adds	r1, #1
 800a19c:	0052      	lsls	r2, r2, #1
 800a19e:	e7b7      	b.n	800a110 <_dtoa_r+0x280>
 800a1a0:	69eb      	ldr	r3, [r5, #28]
 800a1a2:	9a03      	ldr	r2, [sp, #12]
 800a1a4:	601a      	str	r2, [r3, #0]
 800a1a6:	9b08      	ldr	r3, [sp, #32]
 800a1a8:	2b0e      	cmp	r3, #14
 800a1aa:	f200 80a8 	bhi.w	800a2fe <_dtoa_r+0x46e>
 800a1ae:	2c00      	cmp	r4, #0
 800a1b0:	f000 80a5 	beq.w	800a2fe <_dtoa_r+0x46e>
 800a1b4:	f1bb 0f00 	cmp.w	fp, #0
 800a1b8:	dd34      	ble.n	800a224 <_dtoa_r+0x394>
 800a1ba:	4b9a      	ldr	r3, [pc, #616]	; (800a424 <_dtoa_r+0x594>)
 800a1bc:	f00b 020f 	and.w	r2, fp, #15
 800a1c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a1c4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a1c8:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a1cc:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a1d0:	ea4f 142b 	mov.w	r4, fp, asr #4
 800a1d4:	d016      	beq.n	800a204 <_dtoa_r+0x374>
 800a1d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a1da:	4b93      	ldr	r3, [pc, #588]	; (800a428 <_dtoa_r+0x598>)
 800a1dc:	2703      	movs	r7, #3
 800a1de:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a1e2:	f7f6 faa3 	bl	800072c <__aeabi_ddiv>
 800a1e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a1ea:	f004 040f 	and.w	r4, r4, #15
 800a1ee:	4e8e      	ldr	r6, [pc, #568]	; (800a428 <_dtoa_r+0x598>)
 800a1f0:	b954      	cbnz	r4, 800a208 <_dtoa_r+0x378>
 800a1f2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a1f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a1fa:	f7f6 fa97 	bl	800072c <__aeabi_ddiv>
 800a1fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a202:	e029      	b.n	800a258 <_dtoa_r+0x3c8>
 800a204:	2702      	movs	r7, #2
 800a206:	e7f2      	b.n	800a1ee <_dtoa_r+0x35e>
 800a208:	07e1      	lsls	r1, r4, #31
 800a20a:	d508      	bpl.n	800a21e <_dtoa_r+0x38e>
 800a20c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a210:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a214:	f7f6 f960 	bl	80004d8 <__aeabi_dmul>
 800a218:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a21c:	3701      	adds	r7, #1
 800a21e:	1064      	asrs	r4, r4, #1
 800a220:	3608      	adds	r6, #8
 800a222:	e7e5      	b.n	800a1f0 <_dtoa_r+0x360>
 800a224:	f000 80a5 	beq.w	800a372 <_dtoa_r+0x4e2>
 800a228:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a22c:	f1cb 0400 	rsb	r4, fp, #0
 800a230:	4b7c      	ldr	r3, [pc, #496]	; (800a424 <_dtoa_r+0x594>)
 800a232:	f004 020f 	and.w	r2, r4, #15
 800a236:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a23a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a23e:	f7f6 f94b 	bl	80004d8 <__aeabi_dmul>
 800a242:	2702      	movs	r7, #2
 800a244:	2300      	movs	r3, #0
 800a246:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a24a:	4e77      	ldr	r6, [pc, #476]	; (800a428 <_dtoa_r+0x598>)
 800a24c:	1124      	asrs	r4, r4, #4
 800a24e:	2c00      	cmp	r4, #0
 800a250:	f040 8084 	bne.w	800a35c <_dtoa_r+0x4cc>
 800a254:	2b00      	cmp	r3, #0
 800a256:	d1d2      	bne.n	800a1fe <_dtoa_r+0x36e>
 800a258:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a25c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a260:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a262:	2b00      	cmp	r3, #0
 800a264:	f000 8087 	beq.w	800a376 <_dtoa_r+0x4e6>
 800a268:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a26c:	2200      	movs	r2, #0
 800a26e:	4b6f      	ldr	r3, [pc, #444]	; (800a42c <_dtoa_r+0x59c>)
 800a270:	f7f6 fba4 	bl	80009bc <__aeabi_dcmplt>
 800a274:	2800      	cmp	r0, #0
 800a276:	d07e      	beq.n	800a376 <_dtoa_r+0x4e6>
 800a278:	9b08      	ldr	r3, [sp, #32]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d07b      	beq.n	800a376 <_dtoa_r+0x4e6>
 800a27e:	9b06      	ldr	r3, [sp, #24]
 800a280:	2b00      	cmp	r3, #0
 800a282:	dd38      	ble.n	800a2f6 <_dtoa_r+0x466>
 800a284:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a288:	2200      	movs	r2, #0
 800a28a:	4b69      	ldr	r3, [pc, #420]	; (800a430 <_dtoa_r+0x5a0>)
 800a28c:	f7f6 f924 	bl	80004d8 <__aeabi_dmul>
 800a290:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a294:	9c06      	ldr	r4, [sp, #24]
 800a296:	f10b 38ff 	add.w	r8, fp, #4294967295
 800a29a:	3701      	adds	r7, #1
 800a29c:	4638      	mov	r0, r7
 800a29e:	f7f6 f8b1 	bl	8000404 <__aeabi_i2d>
 800a2a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a2a6:	f7f6 f917 	bl	80004d8 <__aeabi_dmul>
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	4b61      	ldr	r3, [pc, #388]	; (800a434 <_dtoa_r+0x5a4>)
 800a2ae:	f7f5 ff5d 	bl	800016c <__adddf3>
 800a2b2:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a2b6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a2ba:	9611      	str	r6, [sp, #68]	; 0x44
 800a2bc:	2c00      	cmp	r4, #0
 800a2be:	d15d      	bne.n	800a37c <_dtoa_r+0x4ec>
 800a2c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	4b5c      	ldr	r3, [pc, #368]	; (800a438 <_dtoa_r+0x5a8>)
 800a2c8:	f7f5 ff4e 	bl	8000168 <__aeabi_dsub>
 800a2cc:	4602      	mov	r2, r0
 800a2ce:	460b      	mov	r3, r1
 800a2d0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a2d4:	4633      	mov	r3, r6
 800a2d6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a2d8:	f7f6 fb8e 	bl	80009f8 <__aeabi_dcmpgt>
 800a2dc:	2800      	cmp	r0, #0
 800a2de:	f040 8295 	bne.w	800a80c <_dtoa_r+0x97c>
 800a2e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a2e6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a2e8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a2ec:	f7f6 fb66 	bl	80009bc <__aeabi_dcmplt>
 800a2f0:	2800      	cmp	r0, #0
 800a2f2:	f040 8289 	bne.w	800a808 <_dtoa_r+0x978>
 800a2f6:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800a2fa:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a2fe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a300:	2b00      	cmp	r3, #0
 800a302:	f2c0 8151 	blt.w	800a5a8 <_dtoa_r+0x718>
 800a306:	f1bb 0f0e 	cmp.w	fp, #14
 800a30a:	f300 814d 	bgt.w	800a5a8 <_dtoa_r+0x718>
 800a30e:	4b45      	ldr	r3, [pc, #276]	; (800a424 <_dtoa_r+0x594>)
 800a310:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a314:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a318:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800a31c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a31e:	2b00      	cmp	r3, #0
 800a320:	f280 80da 	bge.w	800a4d8 <_dtoa_r+0x648>
 800a324:	9b08      	ldr	r3, [sp, #32]
 800a326:	2b00      	cmp	r3, #0
 800a328:	f300 80d6 	bgt.w	800a4d8 <_dtoa_r+0x648>
 800a32c:	f040 826b 	bne.w	800a806 <_dtoa_r+0x976>
 800a330:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a334:	2200      	movs	r2, #0
 800a336:	4b40      	ldr	r3, [pc, #256]	; (800a438 <_dtoa_r+0x5a8>)
 800a338:	f7f6 f8ce 	bl	80004d8 <__aeabi_dmul>
 800a33c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a340:	f7f6 fb50 	bl	80009e4 <__aeabi_dcmpge>
 800a344:	9c08      	ldr	r4, [sp, #32]
 800a346:	4626      	mov	r6, r4
 800a348:	2800      	cmp	r0, #0
 800a34a:	f040 8241 	bne.w	800a7d0 <_dtoa_r+0x940>
 800a34e:	2331      	movs	r3, #49	; 0x31
 800a350:	9f03      	ldr	r7, [sp, #12]
 800a352:	f10b 0b01 	add.w	fp, fp, #1
 800a356:	f807 3b01 	strb.w	r3, [r7], #1
 800a35a:	e23d      	b.n	800a7d8 <_dtoa_r+0x948>
 800a35c:	07e2      	lsls	r2, r4, #31
 800a35e:	d505      	bpl.n	800a36c <_dtoa_r+0x4dc>
 800a360:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a364:	f7f6 f8b8 	bl	80004d8 <__aeabi_dmul>
 800a368:	2301      	movs	r3, #1
 800a36a:	3701      	adds	r7, #1
 800a36c:	1064      	asrs	r4, r4, #1
 800a36e:	3608      	adds	r6, #8
 800a370:	e76d      	b.n	800a24e <_dtoa_r+0x3be>
 800a372:	2702      	movs	r7, #2
 800a374:	e770      	b.n	800a258 <_dtoa_r+0x3c8>
 800a376:	46d8      	mov	r8, fp
 800a378:	9c08      	ldr	r4, [sp, #32]
 800a37a:	e78f      	b.n	800a29c <_dtoa_r+0x40c>
 800a37c:	9903      	ldr	r1, [sp, #12]
 800a37e:	4b29      	ldr	r3, [pc, #164]	; (800a424 <_dtoa_r+0x594>)
 800a380:	4421      	add	r1, r4
 800a382:	9112      	str	r1, [sp, #72]	; 0x48
 800a384:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a386:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a38a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a38e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a392:	2900      	cmp	r1, #0
 800a394:	d054      	beq.n	800a440 <_dtoa_r+0x5b0>
 800a396:	2000      	movs	r0, #0
 800a398:	4928      	ldr	r1, [pc, #160]	; (800a43c <_dtoa_r+0x5ac>)
 800a39a:	f7f6 f9c7 	bl	800072c <__aeabi_ddiv>
 800a39e:	463b      	mov	r3, r7
 800a3a0:	4632      	mov	r2, r6
 800a3a2:	f7f5 fee1 	bl	8000168 <__aeabi_dsub>
 800a3a6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a3aa:	9f03      	ldr	r7, [sp, #12]
 800a3ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a3b0:	f7f6 fb42 	bl	8000a38 <__aeabi_d2iz>
 800a3b4:	4604      	mov	r4, r0
 800a3b6:	f7f6 f825 	bl	8000404 <__aeabi_i2d>
 800a3ba:	4602      	mov	r2, r0
 800a3bc:	460b      	mov	r3, r1
 800a3be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a3c2:	f7f5 fed1 	bl	8000168 <__aeabi_dsub>
 800a3c6:	4602      	mov	r2, r0
 800a3c8:	460b      	mov	r3, r1
 800a3ca:	3430      	adds	r4, #48	; 0x30
 800a3cc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a3d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a3d4:	f807 4b01 	strb.w	r4, [r7], #1
 800a3d8:	f7f6 faf0 	bl	80009bc <__aeabi_dcmplt>
 800a3dc:	2800      	cmp	r0, #0
 800a3de:	d173      	bne.n	800a4c8 <_dtoa_r+0x638>
 800a3e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a3e4:	2000      	movs	r0, #0
 800a3e6:	4911      	ldr	r1, [pc, #68]	; (800a42c <_dtoa_r+0x59c>)
 800a3e8:	f7f5 febe 	bl	8000168 <__aeabi_dsub>
 800a3ec:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a3f0:	f7f6 fae4 	bl	80009bc <__aeabi_dcmplt>
 800a3f4:	2800      	cmp	r0, #0
 800a3f6:	f040 80b6 	bne.w	800a566 <_dtoa_r+0x6d6>
 800a3fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a3fc:	429f      	cmp	r7, r3
 800a3fe:	f43f af7a 	beq.w	800a2f6 <_dtoa_r+0x466>
 800a402:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a406:	2200      	movs	r2, #0
 800a408:	4b09      	ldr	r3, [pc, #36]	; (800a430 <_dtoa_r+0x5a0>)
 800a40a:	f7f6 f865 	bl	80004d8 <__aeabi_dmul>
 800a40e:	2200      	movs	r2, #0
 800a410:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a414:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a418:	4b05      	ldr	r3, [pc, #20]	; (800a430 <_dtoa_r+0x5a0>)
 800a41a:	f7f6 f85d 	bl	80004d8 <__aeabi_dmul>
 800a41e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a422:	e7c3      	b.n	800a3ac <_dtoa_r+0x51c>
 800a424:	0800d758 	.word	0x0800d758
 800a428:	0800d730 	.word	0x0800d730
 800a42c:	3ff00000 	.word	0x3ff00000
 800a430:	40240000 	.word	0x40240000
 800a434:	401c0000 	.word	0x401c0000
 800a438:	40140000 	.word	0x40140000
 800a43c:	3fe00000 	.word	0x3fe00000
 800a440:	4630      	mov	r0, r6
 800a442:	4639      	mov	r1, r7
 800a444:	f7f6 f848 	bl	80004d8 <__aeabi_dmul>
 800a448:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a44a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a44e:	9c03      	ldr	r4, [sp, #12]
 800a450:	9314      	str	r3, [sp, #80]	; 0x50
 800a452:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a456:	f7f6 faef 	bl	8000a38 <__aeabi_d2iz>
 800a45a:	9015      	str	r0, [sp, #84]	; 0x54
 800a45c:	f7f5 ffd2 	bl	8000404 <__aeabi_i2d>
 800a460:	4602      	mov	r2, r0
 800a462:	460b      	mov	r3, r1
 800a464:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a468:	f7f5 fe7e 	bl	8000168 <__aeabi_dsub>
 800a46c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a46e:	4606      	mov	r6, r0
 800a470:	3330      	adds	r3, #48	; 0x30
 800a472:	f804 3b01 	strb.w	r3, [r4], #1
 800a476:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a478:	460f      	mov	r7, r1
 800a47a:	429c      	cmp	r4, r3
 800a47c:	f04f 0200 	mov.w	r2, #0
 800a480:	d124      	bne.n	800a4cc <_dtoa_r+0x63c>
 800a482:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a486:	4baf      	ldr	r3, [pc, #700]	; (800a744 <_dtoa_r+0x8b4>)
 800a488:	f7f5 fe70 	bl	800016c <__adddf3>
 800a48c:	4602      	mov	r2, r0
 800a48e:	460b      	mov	r3, r1
 800a490:	4630      	mov	r0, r6
 800a492:	4639      	mov	r1, r7
 800a494:	f7f6 fab0 	bl	80009f8 <__aeabi_dcmpgt>
 800a498:	2800      	cmp	r0, #0
 800a49a:	d163      	bne.n	800a564 <_dtoa_r+0x6d4>
 800a49c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a4a0:	2000      	movs	r0, #0
 800a4a2:	49a8      	ldr	r1, [pc, #672]	; (800a744 <_dtoa_r+0x8b4>)
 800a4a4:	f7f5 fe60 	bl	8000168 <__aeabi_dsub>
 800a4a8:	4602      	mov	r2, r0
 800a4aa:	460b      	mov	r3, r1
 800a4ac:	4630      	mov	r0, r6
 800a4ae:	4639      	mov	r1, r7
 800a4b0:	f7f6 fa84 	bl	80009bc <__aeabi_dcmplt>
 800a4b4:	2800      	cmp	r0, #0
 800a4b6:	f43f af1e 	beq.w	800a2f6 <_dtoa_r+0x466>
 800a4ba:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800a4bc:	1e7b      	subs	r3, r7, #1
 800a4be:	9314      	str	r3, [sp, #80]	; 0x50
 800a4c0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800a4c4:	2b30      	cmp	r3, #48	; 0x30
 800a4c6:	d0f8      	beq.n	800a4ba <_dtoa_r+0x62a>
 800a4c8:	46c3      	mov	fp, r8
 800a4ca:	e03b      	b.n	800a544 <_dtoa_r+0x6b4>
 800a4cc:	4b9e      	ldr	r3, [pc, #632]	; (800a748 <_dtoa_r+0x8b8>)
 800a4ce:	f7f6 f803 	bl	80004d8 <__aeabi_dmul>
 800a4d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a4d6:	e7bc      	b.n	800a452 <_dtoa_r+0x5c2>
 800a4d8:	9f03      	ldr	r7, [sp, #12]
 800a4da:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800a4de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a4e2:	4640      	mov	r0, r8
 800a4e4:	4649      	mov	r1, r9
 800a4e6:	f7f6 f921 	bl	800072c <__aeabi_ddiv>
 800a4ea:	f7f6 faa5 	bl	8000a38 <__aeabi_d2iz>
 800a4ee:	4604      	mov	r4, r0
 800a4f0:	f7f5 ff88 	bl	8000404 <__aeabi_i2d>
 800a4f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a4f8:	f7f5 ffee 	bl	80004d8 <__aeabi_dmul>
 800a4fc:	4602      	mov	r2, r0
 800a4fe:	460b      	mov	r3, r1
 800a500:	4640      	mov	r0, r8
 800a502:	4649      	mov	r1, r9
 800a504:	f7f5 fe30 	bl	8000168 <__aeabi_dsub>
 800a508:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800a50c:	f807 6b01 	strb.w	r6, [r7], #1
 800a510:	9e03      	ldr	r6, [sp, #12]
 800a512:	f8dd c020 	ldr.w	ip, [sp, #32]
 800a516:	1bbe      	subs	r6, r7, r6
 800a518:	45b4      	cmp	ip, r6
 800a51a:	4602      	mov	r2, r0
 800a51c:	460b      	mov	r3, r1
 800a51e:	d136      	bne.n	800a58e <_dtoa_r+0x6fe>
 800a520:	f7f5 fe24 	bl	800016c <__adddf3>
 800a524:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a528:	4680      	mov	r8, r0
 800a52a:	4689      	mov	r9, r1
 800a52c:	f7f6 fa64 	bl	80009f8 <__aeabi_dcmpgt>
 800a530:	bb58      	cbnz	r0, 800a58a <_dtoa_r+0x6fa>
 800a532:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a536:	4640      	mov	r0, r8
 800a538:	4649      	mov	r1, r9
 800a53a:	f7f6 fa35 	bl	80009a8 <__aeabi_dcmpeq>
 800a53e:	b108      	cbz	r0, 800a544 <_dtoa_r+0x6b4>
 800a540:	07e3      	lsls	r3, r4, #31
 800a542:	d422      	bmi.n	800a58a <_dtoa_r+0x6fa>
 800a544:	4651      	mov	r1, sl
 800a546:	4628      	mov	r0, r5
 800a548:	f000 fbc2 	bl	800acd0 <_Bfree>
 800a54c:	2300      	movs	r3, #0
 800a54e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a550:	703b      	strb	r3, [r7, #0]
 800a552:	f10b 0301 	add.w	r3, fp, #1
 800a556:	6013      	str	r3, [r2, #0]
 800a558:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	f43f ace6 	beq.w	8009f2c <_dtoa_r+0x9c>
 800a560:	601f      	str	r7, [r3, #0]
 800a562:	e4e3      	b.n	8009f2c <_dtoa_r+0x9c>
 800a564:	4627      	mov	r7, r4
 800a566:	463b      	mov	r3, r7
 800a568:	461f      	mov	r7, r3
 800a56a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a56e:	2a39      	cmp	r2, #57	; 0x39
 800a570:	d107      	bne.n	800a582 <_dtoa_r+0x6f2>
 800a572:	9a03      	ldr	r2, [sp, #12]
 800a574:	429a      	cmp	r2, r3
 800a576:	d1f7      	bne.n	800a568 <_dtoa_r+0x6d8>
 800a578:	2230      	movs	r2, #48	; 0x30
 800a57a:	9903      	ldr	r1, [sp, #12]
 800a57c:	f108 0801 	add.w	r8, r8, #1
 800a580:	700a      	strb	r2, [r1, #0]
 800a582:	781a      	ldrb	r2, [r3, #0]
 800a584:	3201      	adds	r2, #1
 800a586:	701a      	strb	r2, [r3, #0]
 800a588:	e79e      	b.n	800a4c8 <_dtoa_r+0x638>
 800a58a:	46d8      	mov	r8, fp
 800a58c:	e7eb      	b.n	800a566 <_dtoa_r+0x6d6>
 800a58e:	2200      	movs	r2, #0
 800a590:	4b6d      	ldr	r3, [pc, #436]	; (800a748 <_dtoa_r+0x8b8>)
 800a592:	f7f5 ffa1 	bl	80004d8 <__aeabi_dmul>
 800a596:	2200      	movs	r2, #0
 800a598:	2300      	movs	r3, #0
 800a59a:	4680      	mov	r8, r0
 800a59c:	4689      	mov	r9, r1
 800a59e:	f7f6 fa03 	bl	80009a8 <__aeabi_dcmpeq>
 800a5a2:	2800      	cmp	r0, #0
 800a5a4:	d09b      	beq.n	800a4de <_dtoa_r+0x64e>
 800a5a6:	e7cd      	b.n	800a544 <_dtoa_r+0x6b4>
 800a5a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a5aa:	2a00      	cmp	r2, #0
 800a5ac:	f000 80c4 	beq.w	800a738 <_dtoa_r+0x8a8>
 800a5b0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a5b2:	2a01      	cmp	r2, #1
 800a5b4:	f300 80a8 	bgt.w	800a708 <_dtoa_r+0x878>
 800a5b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a5ba:	2a00      	cmp	r2, #0
 800a5bc:	f000 80a0 	beq.w	800a700 <_dtoa_r+0x870>
 800a5c0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a5c4:	464f      	mov	r7, r9
 800a5c6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a5c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a5ca:	2101      	movs	r1, #1
 800a5cc:	441a      	add	r2, r3
 800a5ce:	4628      	mov	r0, r5
 800a5d0:	4499      	add	r9, r3
 800a5d2:	9209      	str	r2, [sp, #36]	; 0x24
 800a5d4:	f000 fc32 	bl	800ae3c <__i2b>
 800a5d8:	4606      	mov	r6, r0
 800a5da:	b15f      	cbz	r7, 800a5f4 <_dtoa_r+0x764>
 800a5dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	dd08      	ble.n	800a5f4 <_dtoa_r+0x764>
 800a5e2:	42bb      	cmp	r3, r7
 800a5e4:	bfa8      	it	ge
 800a5e6:	463b      	movge	r3, r7
 800a5e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a5ea:	eba9 0903 	sub.w	r9, r9, r3
 800a5ee:	1aff      	subs	r7, r7, r3
 800a5f0:	1ad3      	subs	r3, r2, r3
 800a5f2:	9309      	str	r3, [sp, #36]	; 0x24
 800a5f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5f6:	b1f3      	cbz	r3, 800a636 <_dtoa_r+0x7a6>
 800a5f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	f000 80a0 	beq.w	800a740 <_dtoa_r+0x8b0>
 800a600:	2c00      	cmp	r4, #0
 800a602:	dd10      	ble.n	800a626 <_dtoa_r+0x796>
 800a604:	4631      	mov	r1, r6
 800a606:	4622      	mov	r2, r4
 800a608:	4628      	mov	r0, r5
 800a60a:	f000 fcd5 	bl	800afb8 <__pow5mult>
 800a60e:	4652      	mov	r2, sl
 800a610:	4601      	mov	r1, r0
 800a612:	4606      	mov	r6, r0
 800a614:	4628      	mov	r0, r5
 800a616:	f000 fc27 	bl	800ae68 <__multiply>
 800a61a:	4680      	mov	r8, r0
 800a61c:	4651      	mov	r1, sl
 800a61e:	4628      	mov	r0, r5
 800a620:	f000 fb56 	bl	800acd0 <_Bfree>
 800a624:	46c2      	mov	sl, r8
 800a626:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a628:	1b1a      	subs	r2, r3, r4
 800a62a:	d004      	beq.n	800a636 <_dtoa_r+0x7a6>
 800a62c:	4651      	mov	r1, sl
 800a62e:	4628      	mov	r0, r5
 800a630:	f000 fcc2 	bl	800afb8 <__pow5mult>
 800a634:	4682      	mov	sl, r0
 800a636:	2101      	movs	r1, #1
 800a638:	4628      	mov	r0, r5
 800a63a:	f000 fbff 	bl	800ae3c <__i2b>
 800a63e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a640:	4604      	mov	r4, r0
 800a642:	2b00      	cmp	r3, #0
 800a644:	f340 8082 	ble.w	800a74c <_dtoa_r+0x8bc>
 800a648:	461a      	mov	r2, r3
 800a64a:	4601      	mov	r1, r0
 800a64c:	4628      	mov	r0, r5
 800a64e:	f000 fcb3 	bl	800afb8 <__pow5mult>
 800a652:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a654:	4604      	mov	r4, r0
 800a656:	2b01      	cmp	r3, #1
 800a658:	dd7b      	ble.n	800a752 <_dtoa_r+0x8c2>
 800a65a:	f04f 0800 	mov.w	r8, #0
 800a65e:	6923      	ldr	r3, [r4, #16]
 800a660:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a664:	6918      	ldr	r0, [r3, #16]
 800a666:	f000 fb9b 	bl	800ada0 <__hi0bits>
 800a66a:	f1c0 0020 	rsb	r0, r0, #32
 800a66e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a670:	4418      	add	r0, r3
 800a672:	f010 001f 	ands.w	r0, r0, #31
 800a676:	f000 8092 	beq.w	800a79e <_dtoa_r+0x90e>
 800a67a:	f1c0 0320 	rsb	r3, r0, #32
 800a67e:	2b04      	cmp	r3, #4
 800a680:	f340 8085 	ble.w	800a78e <_dtoa_r+0x8fe>
 800a684:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a686:	f1c0 001c 	rsb	r0, r0, #28
 800a68a:	4403      	add	r3, r0
 800a68c:	4481      	add	r9, r0
 800a68e:	4407      	add	r7, r0
 800a690:	9309      	str	r3, [sp, #36]	; 0x24
 800a692:	f1b9 0f00 	cmp.w	r9, #0
 800a696:	dd05      	ble.n	800a6a4 <_dtoa_r+0x814>
 800a698:	4651      	mov	r1, sl
 800a69a:	464a      	mov	r2, r9
 800a69c:	4628      	mov	r0, r5
 800a69e:	f000 fce5 	bl	800b06c <__lshift>
 800a6a2:	4682      	mov	sl, r0
 800a6a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	dd05      	ble.n	800a6b6 <_dtoa_r+0x826>
 800a6aa:	4621      	mov	r1, r4
 800a6ac:	461a      	mov	r2, r3
 800a6ae:	4628      	mov	r0, r5
 800a6b0:	f000 fcdc 	bl	800b06c <__lshift>
 800a6b4:	4604      	mov	r4, r0
 800a6b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d072      	beq.n	800a7a2 <_dtoa_r+0x912>
 800a6bc:	4621      	mov	r1, r4
 800a6be:	4650      	mov	r0, sl
 800a6c0:	f000 fd40 	bl	800b144 <__mcmp>
 800a6c4:	2800      	cmp	r0, #0
 800a6c6:	da6c      	bge.n	800a7a2 <_dtoa_r+0x912>
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	4651      	mov	r1, sl
 800a6cc:	220a      	movs	r2, #10
 800a6ce:	4628      	mov	r0, r5
 800a6d0:	f000 fb20 	bl	800ad14 <__multadd>
 800a6d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a6d6:	4682      	mov	sl, r0
 800a6d8:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	f000 81ac 	beq.w	800aa3a <_dtoa_r+0xbaa>
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	4631      	mov	r1, r6
 800a6e6:	220a      	movs	r2, #10
 800a6e8:	4628      	mov	r0, r5
 800a6ea:	f000 fb13 	bl	800ad14 <__multadd>
 800a6ee:	9b06      	ldr	r3, [sp, #24]
 800a6f0:	4606      	mov	r6, r0
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	f300 8093 	bgt.w	800a81e <_dtoa_r+0x98e>
 800a6f8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a6fa:	2b02      	cmp	r3, #2
 800a6fc:	dc59      	bgt.n	800a7b2 <_dtoa_r+0x922>
 800a6fe:	e08e      	b.n	800a81e <_dtoa_r+0x98e>
 800a700:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a702:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a706:	e75d      	b.n	800a5c4 <_dtoa_r+0x734>
 800a708:	9b08      	ldr	r3, [sp, #32]
 800a70a:	1e5c      	subs	r4, r3, #1
 800a70c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a70e:	42a3      	cmp	r3, r4
 800a710:	bfbf      	itttt	lt
 800a712:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a714:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800a716:	1ae3      	sublt	r3, r4, r3
 800a718:	18d2      	addlt	r2, r2, r3
 800a71a:	bfa8      	it	ge
 800a71c:	1b1c      	subge	r4, r3, r4
 800a71e:	9b08      	ldr	r3, [sp, #32]
 800a720:	bfbe      	ittt	lt
 800a722:	940a      	strlt	r4, [sp, #40]	; 0x28
 800a724:	920e      	strlt	r2, [sp, #56]	; 0x38
 800a726:	2400      	movlt	r4, #0
 800a728:	2b00      	cmp	r3, #0
 800a72a:	bfb5      	itete	lt
 800a72c:	eba9 0703 	sublt.w	r7, r9, r3
 800a730:	464f      	movge	r7, r9
 800a732:	2300      	movlt	r3, #0
 800a734:	9b08      	ldrge	r3, [sp, #32]
 800a736:	e747      	b.n	800a5c8 <_dtoa_r+0x738>
 800a738:	464f      	mov	r7, r9
 800a73a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a73c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a73e:	e74c      	b.n	800a5da <_dtoa_r+0x74a>
 800a740:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a742:	e773      	b.n	800a62c <_dtoa_r+0x79c>
 800a744:	3fe00000 	.word	0x3fe00000
 800a748:	40240000 	.word	0x40240000
 800a74c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a74e:	2b01      	cmp	r3, #1
 800a750:	dc18      	bgt.n	800a784 <_dtoa_r+0x8f4>
 800a752:	9b04      	ldr	r3, [sp, #16]
 800a754:	b9b3      	cbnz	r3, 800a784 <_dtoa_r+0x8f4>
 800a756:	9b05      	ldr	r3, [sp, #20]
 800a758:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a75c:	b993      	cbnz	r3, 800a784 <_dtoa_r+0x8f4>
 800a75e:	9b05      	ldr	r3, [sp, #20]
 800a760:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a764:	0d1b      	lsrs	r3, r3, #20
 800a766:	051b      	lsls	r3, r3, #20
 800a768:	b17b      	cbz	r3, 800a78a <_dtoa_r+0x8fa>
 800a76a:	f04f 0801 	mov.w	r8, #1
 800a76e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a770:	f109 0901 	add.w	r9, r9, #1
 800a774:	3301      	adds	r3, #1
 800a776:	9309      	str	r3, [sp, #36]	; 0x24
 800a778:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	f47f af6f 	bne.w	800a65e <_dtoa_r+0x7ce>
 800a780:	2001      	movs	r0, #1
 800a782:	e774      	b.n	800a66e <_dtoa_r+0x7de>
 800a784:	f04f 0800 	mov.w	r8, #0
 800a788:	e7f6      	b.n	800a778 <_dtoa_r+0x8e8>
 800a78a:	4698      	mov	r8, r3
 800a78c:	e7f4      	b.n	800a778 <_dtoa_r+0x8e8>
 800a78e:	d080      	beq.n	800a692 <_dtoa_r+0x802>
 800a790:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a792:	331c      	adds	r3, #28
 800a794:	441a      	add	r2, r3
 800a796:	4499      	add	r9, r3
 800a798:	441f      	add	r7, r3
 800a79a:	9209      	str	r2, [sp, #36]	; 0x24
 800a79c:	e779      	b.n	800a692 <_dtoa_r+0x802>
 800a79e:	4603      	mov	r3, r0
 800a7a0:	e7f6      	b.n	800a790 <_dtoa_r+0x900>
 800a7a2:	9b08      	ldr	r3, [sp, #32]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	dc34      	bgt.n	800a812 <_dtoa_r+0x982>
 800a7a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a7aa:	2b02      	cmp	r3, #2
 800a7ac:	dd31      	ble.n	800a812 <_dtoa_r+0x982>
 800a7ae:	9b08      	ldr	r3, [sp, #32]
 800a7b0:	9306      	str	r3, [sp, #24]
 800a7b2:	9b06      	ldr	r3, [sp, #24]
 800a7b4:	b963      	cbnz	r3, 800a7d0 <_dtoa_r+0x940>
 800a7b6:	4621      	mov	r1, r4
 800a7b8:	2205      	movs	r2, #5
 800a7ba:	4628      	mov	r0, r5
 800a7bc:	f000 faaa 	bl	800ad14 <__multadd>
 800a7c0:	4601      	mov	r1, r0
 800a7c2:	4604      	mov	r4, r0
 800a7c4:	4650      	mov	r0, sl
 800a7c6:	f000 fcbd 	bl	800b144 <__mcmp>
 800a7ca:	2800      	cmp	r0, #0
 800a7cc:	f73f adbf 	bgt.w	800a34e <_dtoa_r+0x4be>
 800a7d0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a7d2:	9f03      	ldr	r7, [sp, #12]
 800a7d4:	ea6f 0b03 	mvn.w	fp, r3
 800a7d8:	f04f 0800 	mov.w	r8, #0
 800a7dc:	4621      	mov	r1, r4
 800a7de:	4628      	mov	r0, r5
 800a7e0:	f000 fa76 	bl	800acd0 <_Bfree>
 800a7e4:	2e00      	cmp	r6, #0
 800a7e6:	f43f aead 	beq.w	800a544 <_dtoa_r+0x6b4>
 800a7ea:	f1b8 0f00 	cmp.w	r8, #0
 800a7ee:	d005      	beq.n	800a7fc <_dtoa_r+0x96c>
 800a7f0:	45b0      	cmp	r8, r6
 800a7f2:	d003      	beq.n	800a7fc <_dtoa_r+0x96c>
 800a7f4:	4641      	mov	r1, r8
 800a7f6:	4628      	mov	r0, r5
 800a7f8:	f000 fa6a 	bl	800acd0 <_Bfree>
 800a7fc:	4631      	mov	r1, r6
 800a7fe:	4628      	mov	r0, r5
 800a800:	f000 fa66 	bl	800acd0 <_Bfree>
 800a804:	e69e      	b.n	800a544 <_dtoa_r+0x6b4>
 800a806:	2400      	movs	r4, #0
 800a808:	4626      	mov	r6, r4
 800a80a:	e7e1      	b.n	800a7d0 <_dtoa_r+0x940>
 800a80c:	46c3      	mov	fp, r8
 800a80e:	4626      	mov	r6, r4
 800a810:	e59d      	b.n	800a34e <_dtoa_r+0x4be>
 800a812:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a814:	2b00      	cmp	r3, #0
 800a816:	f000 80c8 	beq.w	800a9aa <_dtoa_r+0xb1a>
 800a81a:	9b08      	ldr	r3, [sp, #32]
 800a81c:	9306      	str	r3, [sp, #24]
 800a81e:	2f00      	cmp	r7, #0
 800a820:	dd05      	ble.n	800a82e <_dtoa_r+0x99e>
 800a822:	4631      	mov	r1, r6
 800a824:	463a      	mov	r2, r7
 800a826:	4628      	mov	r0, r5
 800a828:	f000 fc20 	bl	800b06c <__lshift>
 800a82c:	4606      	mov	r6, r0
 800a82e:	f1b8 0f00 	cmp.w	r8, #0
 800a832:	d05b      	beq.n	800a8ec <_dtoa_r+0xa5c>
 800a834:	4628      	mov	r0, r5
 800a836:	6871      	ldr	r1, [r6, #4]
 800a838:	f000 fa0a 	bl	800ac50 <_Balloc>
 800a83c:	4607      	mov	r7, r0
 800a83e:	b928      	cbnz	r0, 800a84c <_dtoa_r+0x9bc>
 800a840:	4602      	mov	r2, r0
 800a842:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a846:	4b81      	ldr	r3, [pc, #516]	; (800aa4c <_dtoa_r+0xbbc>)
 800a848:	f7ff bb36 	b.w	8009eb8 <_dtoa_r+0x28>
 800a84c:	6932      	ldr	r2, [r6, #16]
 800a84e:	f106 010c 	add.w	r1, r6, #12
 800a852:	3202      	adds	r2, #2
 800a854:	0092      	lsls	r2, r2, #2
 800a856:	300c      	adds	r0, #12
 800a858:	f001 f964 	bl	800bb24 <memcpy>
 800a85c:	2201      	movs	r2, #1
 800a85e:	4639      	mov	r1, r7
 800a860:	4628      	mov	r0, r5
 800a862:	f000 fc03 	bl	800b06c <__lshift>
 800a866:	46b0      	mov	r8, r6
 800a868:	4606      	mov	r6, r0
 800a86a:	9b03      	ldr	r3, [sp, #12]
 800a86c:	9a03      	ldr	r2, [sp, #12]
 800a86e:	3301      	adds	r3, #1
 800a870:	9308      	str	r3, [sp, #32]
 800a872:	9b06      	ldr	r3, [sp, #24]
 800a874:	4413      	add	r3, r2
 800a876:	930b      	str	r3, [sp, #44]	; 0x2c
 800a878:	9b04      	ldr	r3, [sp, #16]
 800a87a:	f003 0301 	and.w	r3, r3, #1
 800a87e:	930a      	str	r3, [sp, #40]	; 0x28
 800a880:	9b08      	ldr	r3, [sp, #32]
 800a882:	4621      	mov	r1, r4
 800a884:	3b01      	subs	r3, #1
 800a886:	4650      	mov	r0, sl
 800a888:	9304      	str	r3, [sp, #16]
 800a88a:	f7ff fa76 	bl	8009d7a <quorem>
 800a88e:	4641      	mov	r1, r8
 800a890:	9006      	str	r0, [sp, #24]
 800a892:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a896:	4650      	mov	r0, sl
 800a898:	f000 fc54 	bl	800b144 <__mcmp>
 800a89c:	4632      	mov	r2, r6
 800a89e:	9009      	str	r0, [sp, #36]	; 0x24
 800a8a0:	4621      	mov	r1, r4
 800a8a2:	4628      	mov	r0, r5
 800a8a4:	f000 fc6a 	bl	800b17c <__mdiff>
 800a8a8:	68c2      	ldr	r2, [r0, #12]
 800a8aa:	4607      	mov	r7, r0
 800a8ac:	bb02      	cbnz	r2, 800a8f0 <_dtoa_r+0xa60>
 800a8ae:	4601      	mov	r1, r0
 800a8b0:	4650      	mov	r0, sl
 800a8b2:	f000 fc47 	bl	800b144 <__mcmp>
 800a8b6:	4602      	mov	r2, r0
 800a8b8:	4639      	mov	r1, r7
 800a8ba:	4628      	mov	r0, r5
 800a8bc:	920c      	str	r2, [sp, #48]	; 0x30
 800a8be:	f000 fa07 	bl	800acd0 <_Bfree>
 800a8c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a8c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a8c6:	9f08      	ldr	r7, [sp, #32]
 800a8c8:	ea43 0102 	orr.w	r1, r3, r2
 800a8cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8ce:	4319      	orrs	r1, r3
 800a8d0:	d110      	bne.n	800a8f4 <_dtoa_r+0xa64>
 800a8d2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a8d6:	d029      	beq.n	800a92c <_dtoa_r+0xa9c>
 800a8d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	dd02      	ble.n	800a8e4 <_dtoa_r+0xa54>
 800a8de:	9b06      	ldr	r3, [sp, #24]
 800a8e0:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a8e4:	9b04      	ldr	r3, [sp, #16]
 800a8e6:	f883 9000 	strb.w	r9, [r3]
 800a8ea:	e777      	b.n	800a7dc <_dtoa_r+0x94c>
 800a8ec:	4630      	mov	r0, r6
 800a8ee:	e7ba      	b.n	800a866 <_dtoa_r+0x9d6>
 800a8f0:	2201      	movs	r2, #1
 800a8f2:	e7e1      	b.n	800a8b8 <_dtoa_r+0xa28>
 800a8f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	db04      	blt.n	800a904 <_dtoa_r+0xa74>
 800a8fa:	9922      	ldr	r1, [sp, #136]	; 0x88
 800a8fc:	430b      	orrs	r3, r1
 800a8fe:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a900:	430b      	orrs	r3, r1
 800a902:	d120      	bne.n	800a946 <_dtoa_r+0xab6>
 800a904:	2a00      	cmp	r2, #0
 800a906:	dded      	ble.n	800a8e4 <_dtoa_r+0xa54>
 800a908:	4651      	mov	r1, sl
 800a90a:	2201      	movs	r2, #1
 800a90c:	4628      	mov	r0, r5
 800a90e:	f000 fbad 	bl	800b06c <__lshift>
 800a912:	4621      	mov	r1, r4
 800a914:	4682      	mov	sl, r0
 800a916:	f000 fc15 	bl	800b144 <__mcmp>
 800a91a:	2800      	cmp	r0, #0
 800a91c:	dc03      	bgt.n	800a926 <_dtoa_r+0xa96>
 800a91e:	d1e1      	bne.n	800a8e4 <_dtoa_r+0xa54>
 800a920:	f019 0f01 	tst.w	r9, #1
 800a924:	d0de      	beq.n	800a8e4 <_dtoa_r+0xa54>
 800a926:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a92a:	d1d8      	bne.n	800a8de <_dtoa_r+0xa4e>
 800a92c:	2339      	movs	r3, #57	; 0x39
 800a92e:	9a04      	ldr	r2, [sp, #16]
 800a930:	7013      	strb	r3, [r2, #0]
 800a932:	463b      	mov	r3, r7
 800a934:	461f      	mov	r7, r3
 800a936:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800a93a:	3b01      	subs	r3, #1
 800a93c:	2a39      	cmp	r2, #57	; 0x39
 800a93e:	d06b      	beq.n	800aa18 <_dtoa_r+0xb88>
 800a940:	3201      	adds	r2, #1
 800a942:	701a      	strb	r2, [r3, #0]
 800a944:	e74a      	b.n	800a7dc <_dtoa_r+0x94c>
 800a946:	2a00      	cmp	r2, #0
 800a948:	dd07      	ble.n	800a95a <_dtoa_r+0xaca>
 800a94a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a94e:	d0ed      	beq.n	800a92c <_dtoa_r+0xa9c>
 800a950:	9a04      	ldr	r2, [sp, #16]
 800a952:	f109 0301 	add.w	r3, r9, #1
 800a956:	7013      	strb	r3, [r2, #0]
 800a958:	e740      	b.n	800a7dc <_dtoa_r+0x94c>
 800a95a:	9b08      	ldr	r3, [sp, #32]
 800a95c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a95e:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a962:	4293      	cmp	r3, r2
 800a964:	d042      	beq.n	800a9ec <_dtoa_r+0xb5c>
 800a966:	4651      	mov	r1, sl
 800a968:	2300      	movs	r3, #0
 800a96a:	220a      	movs	r2, #10
 800a96c:	4628      	mov	r0, r5
 800a96e:	f000 f9d1 	bl	800ad14 <__multadd>
 800a972:	45b0      	cmp	r8, r6
 800a974:	4682      	mov	sl, r0
 800a976:	f04f 0300 	mov.w	r3, #0
 800a97a:	f04f 020a 	mov.w	r2, #10
 800a97e:	4641      	mov	r1, r8
 800a980:	4628      	mov	r0, r5
 800a982:	d107      	bne.n	800a994 <_dtoa_r+0xb04>
 800a984:	f000 f9c6 	bl	800ad14 <__multadd>
 800a988:	4680      	mov	r8, r0
 800a98a:	4606      	mov	r6, r0
 800a98c:	9b08      	ldr	r3, [sp, #32]
 800a98e:	3301      	adds	r3, #1
 800a990:	9308      	str	r3, [sp, #32]
 800a992:	e775      	b.n	800a880 <_dtoa_r+0x9f0>
 800a994:	f000 f9be 	bl	800ad14 <__multadd>
 800a998:	4631      	mov	r1, r6
 800a99a:	4680      	mov	r8, r0
 800a99c:	2300      	movs	r3, #0
 800a99e:	220a      	movs	r2, #10
 800a9a0:	4628      	mov	r0, r5
 800a9a2:	f000 f9b7 	bl	800ad14 <__multadd>
 800a9a6:	4606      	mov	r6, r0
 800a9a8:	e7f0      	b.n	800a98c <_dtoa_r+0xafc>
 800a9aa:	9b08      	ldr	r3, [sp, #32]
 800a9ac:	9306      	str	r3, [sp, #24]
 800a9ae:	9f03      	ldr	r7, [sp, #12]
 800a9b0:	4621      	mov	r1, r4
 800a9b2:	4650      	mov	r0, sl
 800a9b4:	f7ff f9e1 	bl	8009d7a <quorem>
 800a9b8:	9b03      	ldr	r3, [sp, #12]
 800a9ba:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a9be:	f807 9b01 	strb.w	r9, [r7], #1
 800a9c2:	1afa      	subs	r2, r7, r3
 800a9c4:	9b06      	ldr	r3, [sp, #24]
 800a9c6:	4293      	cmp	r3, r2
 800a9c8:	dd07      	ble.n	800a9da <_dtoa_r+0xb4a>
 800a9ca:	4651      	mov	r1, sl
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	220a      	movs	r2, #10
 800a9d0:	4628      	mov	r0, r5
 800a9d2:	f000 f99f 	bl	800ad14 <__multadd>
 800a9d6:	4682      	mov	sl, r0
 800a9d8:	e7ea      	b.n	800a9b0 <_dtoa_r+0xb20>
 800a9da:	9b06      	ldr	r3, [sp, #24]
 800a9dc:	f04f 0800 	mov.w	r8, #0
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	bfcc      	ite	gt
 800a9e4:	461f      	movgt	r7, r3
 800a9e6:	2701      	movle	r7, #1
 800a9e8:	9b03      	ldr	r3, [sp, #12]
 800a9ea:	441f      	add	r7, r3
 800a9ec:	4651      	mov	r1, sl
 800a9ee:	2201      	movs	r2, #1
 800a9f0:	4628      	mov	r0, r5
 800a9f2:	f000 fb3b 	bl	800b06c <__lshift>
 800a9f6:	4621      	mov	r1, r4
 800a9f8:	4682      	mov	sl, r0
 800a9fa:	f000 fba3 	bl	800b144 <__mcmp>
 800a9fe:	2800      	cmp	r0, #0
 800aa00:	dc97      	bgt.n	800a932 <_dtoa_r+0xaa2>
 800aa02:	d102      	bne.n	800aa0a <_dtoa_r+0xb7a>
 800aa04:	f019 0f01 	tst.w	r9, #1
 800aa08:	d193      	bne.n	800a932 <_dtoa_r+0xaa2>
 800aa0a:	463b      	mov	r3, r7
 800aa0c:	461f      	mov	r7, r3
 800aa0e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aa12:	2a30      	cmp	r2, #48	; 0x30
 800aa14:	d0fa      	beq.n	800aa0c <_dtoa_r+0xb7c>
 800aa16:	e6e1      	b.n	800a7dc <_dtoa_r+0x94c>
 800aa18:	9a03      	ldr	r2, [sp, #12]
 800aa1a:	429a      	cmp	r2, r3
 800aa1c:	d18a      	bne.n	800a934 <_dtoa_r+0xaa4>
 800aa1e:	2331      	movs	r3, #49	; 0x31
 800aa20:	f10b 0b01 	add.w	fp, fp, #1
 800aa24:	e797      	b.n	800a956 <_dtoa_r+0xac6>
 800aa26:	4b0a      	ldr	r3, [pc, #40]	; (800aa50 <_dtoa_r+0xbc0>)
 800aa28:	f7ff ba9f 	b.w	8009f6a <_dtoa_r+0xda>
 800aa2c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	f47f aa77 	bne.w	8009f22 <_dtoa_r+0x92>
 800aa34:	4b07      	ldr	r3, [pc, #28]	; (800aa54 <_dtoa_r+0xbc4>)
 800aa36:	f7ff ba98 	b.w	8009f6a <_dtoa_r+0xda>
 800aa3a:	9b06      	ldr	r3, [sp, #24]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	dcb6      	bgt.n	800a9ae <_dtoa_r+0xb1e>
 800aa40:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aa42:	2b02      	cmp	r3, #2
 800aa44:	f73f aeb5 	bgt.w	800a7b2 <_dtoa_r+0x922>
 800aa48:	e7b1      	b.n	800a9ae <_dtoa_r+0xb1e>
 800aa4a:	bf00      	nop
 800aa4c:	0800d6c6 	.word	0x0800d6c6
 800aa50:	0800d626 	.word	0x0800d626
 800aa54:	0800d64a 	.word	0x0800d64a

0800aa58 <_free_r>:
 800aa58:	b538      	push	{r3, r4, r5, lr}
 800aa5a:	4605      	mov	r5, r0
 800aa5c:	2900      	cmp	r1, #0
 800aa5e:	d040      	beq.n	800aae2 <_free_r+0x8a>
 800aa60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa64:	1f0c      	subs	r4, r1, #4
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	bfb8      	it	lt
 800aa6a:	18e4      	addlt	r4, r4, r3
 800aa6c:	f000 f8e4 	bl	800ac38 <__malloc_lock>
 800aa70:	4a1c      	ldr	r2, [pc, #112]	; (800aae4 <_free_r+0x8c>)
 800aa72:	6813      	ldr	r3, [r2, #0]
 800aa74:	b933      	cbnz	r3, 800aa84 <_free_r+0x2c>
 800aa76:	6063      	str	r3, [r4, #4]
 800aa78:	6014      	str	r4, [r2, #0]
 800aa7a:	4628      	mov	r0, r5
 800aa7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa80:	f000 b8e0 	b.w	800ac44 <__malloc_unlock>
 800aa84:	42a3      	cmp	r3, r4
 800aa86:	d908      	bls.n	800aa9a <_free_r+0x42>
 800aa88:	6820      	ldr	r0, [r4, #0]
 800aa8a:	1821      	adds	r1, r4, r0
 800aa8c:	428b      	cmp	r3, r1
 800aa8e:	bf01      	itttt	eq
 800aa90:	6819      	ldreq	r1, [r3, #0]
 800aa92:	685b      	ldreq	r3, [r3, #4]
 800aa94:	1809      	addeq	r1, r1, r0
 800aa96:	6021      	streq	r1, [r4, #0]
 800aa98:	e7ed      	b.n	800aa76 <_free_r+0x1e>
 800aa9a:	461a      	mov	r2, r3
 800aa9c:	685b      	ldr	r3, [r3, #4]
 800aa9e:	b10b      	cbz	r3, 800aaa4 <_free_r+0x4c>
 800aaa0:	42a3      	cmp	r3, r4
 800aaa2:	d9fa      	bls.n	800aa9a <_free_r+0x42>
 800aaa4:	6811      	ldr	r1, [r2, #0]
 800aaa6:	1850      	adds	r0, r2, r1
 800aaa8:	42a0      	cmp	r0, r4
 800aaaa:	d10b      	bne.n	800aac4 <_free_r+0x6c>
 800aaac:	6820      	ldr	r0, [r4, #0]
 800aaae:	4401      	add	r1, r0
 800aab0:	1850      	adds	r0, r2, r1
 800aab2:	4283      	cmp	r3, r0
 800aab4:	6011      	str	r1, [r2, #0]
 800aab6:	d1e0      	bne.n	800aa7a <_free_r+0x22>
 800aab8:	6818      	ldr	r0, [r3, #0]
 800aaba:	685b      	ldr	r3, [r3, #4]
 800aabc:	4408      	add	r0, r1
 800aabe:	6010      	str	r0, [r2, #0]
 800aac0:	6053      	str	r3, [r2, #4]
 800aac2:	e7da      	b.n	800aa7a <_free_r+0x22>
 800aac4:	d902      	bls.n	800aacc <_free_r+0x74>
 800aac6:	230c      	movs	r3, #12
 800aac8:	602b      	str	r3, [r5, #0]
 800aaca:	e7d6      	b.n	800aa7a <_free_r+0x22>
 800aacc:	6820      	ldr	r0, [r4, #0]
 800aace:	1821      	adds	r1, r4, r0
 800aad0:	428b      	cmp	r3, r1
 800aad2:	bf01      	itttt	eq
 800aad4:	6819      	ldreq	r1, [r3, #0]
 800aad6:	685b      	ldreq	r3, [r3, #4]
 800aad8:	1809      	addeq	r1, r1, r0
 800aada:	6021      	streq	r1, [r4, #0]
 800aadc:	6063      	str	r3, [r4, #4]
 800aade:	6054      	str	r4, [r2, #4]
 800aae0:	e7cb      	b.n	800aa7a <_free_r+0x22>
 800aae2:	bd38      	pop	{r3, r4, r5, pc}
 800aae4:	20000478 	.word	0x20000478

0800aae8 <malloc>:
 800aae8:	4b02      	ldr	r3, [pc, #8]	; (800aaf4 <malloc+0xc>)
 800aaea:	4601      	mov	r1, r0
 800aaec:	6818      	ldr	r0, [r3, #0]
 800aaee:	f000 b823 	b.w	800ab38 <_malloc_r>
 800aaf2:	bf00      	nop
 800aaf4:	2000009c 	.word	0x2000009c

0800aaf8 <sbrk_aligned>:
 800aaf8:	b570      	push	{r4, r5, r6, lr}
 800aafa:	4e0e      	ldr	r6, [pc, #56]	; (800ab34 <sbrk_aligned+0x3c>)
 800aafc:	460c      	mov	r4, r1
 800aafe:	6831      	ldr	r1, [r6, #0]
 800ab00:	4605      	mov	r5, r0
 800ab02:	b911      	cbnz	r1, 800ab0a <sbrk_aligned+0x12>
 800ab04:	f000 fffe 	bl	800bb04 <_sbrk_r>
 800ab08:	6030      	str	r0, [r6, #0]
 800ab0a:	4621      	mov	r1, r4
 800ab0c:	4628      	mov	r0, r5
 800ab0e:	f000 fff9 	bl	800bb04 <_sbrk_r>
 800ab12:	1c43      	adds	r3, r0, #1
 800ab14:	d00a      	beq.n	800ab2c <sbrk_aligned+0x34>
 800ab16:	1cc4      	adds	r4, r0, #3
 800ab18:	f024 0403 	bic.w	r4, r4, #3
 800ab1c:	42a0      	cmp	r0, r4
 800ab1e:	d007      	beq.n	800ab30 <sbrk_aligned+0x38>
 800ab20:	1a21      	subs	r1, r4, r0
 800ab22:	4628      	mov	r0, r5
 800ab24:	f000 ffee 	bl	800bb04 <_sbrk_r>
 800ab28:	3001      	adds	r0, #1
 800ab2a:	d101      	bne.n	800ab30 <sbrk_aligned+0x38>
 800ab2c:	f04f 34ff 	mov.w	r4, #4294967295
 800ab30:	4620      	mov	r0, r4
 800ab32:	bd70      	pop	{r4, r5, r6, pc}
 800ab34:	2000047c 	.word	0x2000047c

0800ab38 <_malloc_r>:
 800ab38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab3c:	1ccd      	adds	r5, r1, #3
 800ab3e:	f025 0503 	bic.w	r5, r5, #3
 800ab42:	3508      	adds	r5, #8
 800ab44:	2d0c      	cmp	r5, #12
 800ab46:	bf38      	it	cc
 800ab48:	250c      	movcc	r5, #12
 800ab4a:	2d00      	cmp	r5, #0
 800ab4c:	4607      	mov	r7, r0
 800ab4e:	db01      	blt.n	800ab54 <_malloc_r+0x1c>
 800ab50:	42a9      	cmp	r1, r5
 800ab52:	d905      	bls.n	800ab60 <_malloc_r+0x28>
 800ab54:	230c      	movs	r3, #12
 800ab56:	2600      	movs	r6, #0
 800ab58:	603b      	str	r3, [r7, #0]
 800ab5a:	4630      	mov	r0, r6
 800ab5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab60:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ac34 <_malloc_r+0xfc>
 800ab64:	f000 f868 	bl	800ac38 <__malloc_lock>
 800ab68:	f8d8 3000 	ldr.w	r3, [r8]
 800ab6c:	461c      	mov	r4, r3
 800ab6e:	bb5c      	cbnz	r4, 800abc8 <_malloc_r+0x90>
 800ab70:	4629      	mov	r1, r5
 800ab72:	4638      	mov	r0, r7
 800ab74:	f7ff ffc0 	bl	800aaf8 <sbrk_aligned>
 800ab78:	1c43      	adds	r3, r0, #1
 800ab7a:	4604      	mov	r4, r0
 800ab7c:	d155      	bne.n	800ac2a <_malloc_r+0xf2>
 800ab7e:	f8d8 4000 	ldr.w	r4, [r8]
 800ab82:	4626      	mov	r6, r4
 800ab84:	2e00      	cmp	r6, #0
 800ab86:	d145      	bne.n	800ac14 <_malloc_r+0xdc>
 800ab88:	2c00      	cmp	r4, #0
 800ab8a:	d048      	beq.n	800ac1e <_malloc_r+0xe6>
 800ab8c:	6823      	ldr	r3, [r4, #0]
 800ab8e:	4631      	mov	r1, r6
 800ab90:	4638      	mov	r0, r7
 800ab92:	eb04 0903 	add.w	r9, r4, r3
 800ab96:	f000 ffb5 	bl	800bb04 <_sbrk_r>
 800ab9a:	4581      	cmp	r9, r0
 800ab9c:	d13f      	bne.n	800ac1e <_malloc_r+0xe6>
 800ab9e:	6821      	ldr	r1, [r4, #0]
 800aba0:	4638      	mov	r0, r7
 800aba2:	1a6d      	subs	r5, r5, r1
 800aba4:	4629      	mov	r1, r5
 800aba6:	f7ff ffa7 	bl	800aaf8 <sbrk_aligned>
 800abaa:	3001      	adds	r0, #1
 800abac:	d037      	beq.n	800ac1e <_malloc_r+0xe6>
 800abae:	6823      	ldr	r3, [r4, #0]
 800abb0:	442b      	add	r3, r5
 800abb2:	6023      	str	r3, [r4, #0]
 800abb4:	f8d8 3000 	ldr.w	r3, [r8]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d038      	beq.n	800ac2e <_malloc_r+0xf6>
 800abbc:	685a      	ldr	r2, [r3, #4]
 800abbe:	42a2      	cmp	r2, r4
 800abc0:	d12b      	bne.n	800ac1a <_malloc_r+0xe2>
 800abc2:	2200      	movs	r2, #0
 800abc4:	605a      	str	r2, [r3, #4]
 800abc6:	e00f      	b.n	800abe8 <_malloc_r+0xb0>
 800abc8:	6822      	ldr	r2, [r4, #0]
 800abca:	1b52      	subs	r2, r2, r5
 800abcc:	d41f      	bmi.n	800ac0e <_malloc_r+0xd6>
 800abce:	2a0b      	cmp	r2, #11
 800abd0:	d917      	bls.n	800ac02 <_malloc_r+0xca>
 800abd2:	1961      	adds	r1, r4, r5
 800abd4:	42a3      	cmp	r3, r4
 800abd6:	6025      	str	r5, [r4, #0]
 800abd8:	bf18      	it	ne
 800abda:	6059      	strne	r1, [r3, #4]
 800abdc:	6863      	ldr	r3, [r4, #4]
 800abde:	bf08      	it	eq
 800abe0:	f8c8 1000 	streq.w	r1, [r8]
 800abe4:	5162      	str	r2, [r4, r5]
 800abe6:	604b      	str	r3, [r1, #4]
 800abe8:	4638      	mov	r0, r7
 800abea:	f104 060b 	add.w	r6, r4, #11
 800abee:	f000 f829 	bl	800ac44 <__malloc_unlock>
 800abf2:	f026 0607 	bic.w	r6, r6, #7
 800abf6:	1d23      	adds	r3, r4, #4
 800abf8:	1af2      	subs	r2, r6, r3
 800abfa:	d0ae      	beq.n	800ab5a <_malloc_r+0x22>
 800abfc:	1b9b      	subs	r3, r3, r6
 800abfe:	50a3      	str	r3, [r4, r2]
 800ac00:	e7ab      	b.n	800ab5a <_malloc_r+0x22>
 800ac02:	42a3      	cmp	r3, r4
 800ac04:	6862      	ldr	r2, [r4, #4]
 800ac06:	d1dd      	bne.n	800abc4 <_malloc_r+0x8c>
 800ac08:	f8c8 2000 	str.w	r2, [r8]
 800ac0c:	e7ec      	b.n	800abe8 <_malloc_r+0xb0>
 800ac0e:	4623      	mov	r3, r4
 800ac10:	6864      	ldr	r4, [r4, #4]
 800ac12:	e7ac      	b.n	800ab6e <_malloc_r+0x36>
 800ac14:	4634      	mov	r4, r6
 800ac16:	6876      	ldr	r6, [r6, #4]
 800ac18:	e7b4      	b.n	800ab84 <_malloc_r+0x4c>
 800ac1a:	4613      	mov	r3, r2
 800ac1c:	e7cc      	b.n	800abb8 <_malloc_r+0x80>
 800ac1e:	230c      	movs	r3, #12
 800ac20:	4638      	mov	r0, r7
 800ac22:	603b      	str	r3, [r7, #0]
 800ac24:	f000 f80e 	bl	800ac44 <__malloc_unlock>
 800ac28:	e797      	b.n	800ab5a <_malloc_r+0x22>
 800ac2a:	6025      	str	r5, [r4, #0]
 800ac2c:	e7dc      	b.n	800abe8 <_malloc_r+0xb0>
 800ac2e:	605b      	str	r3, [r3, #4]
 800ac30:	deff      	udf	#255	; 0xff
 800ac32:	bf00      	nop
 800ac34:	20000478 	.word	0x20000478

0800ac38 <__malloc_lock>:
 800ac38:	4801      	ldr	r0, [pc, #4]	; (800ac40 <__malloc_lock+0x8>)
 800ac3a:	f7ff b88e 	b.w	8009d5a <__retarget_lock_acquire_recursive>
 800ac3e:	bf00      	nop
 800ac40:	20000474 	.word	0x20000474

0800ac44 <__malloc_unlock>:
 800ac44:	4801      	ldr	r0, [pc, #4]	; (800ac4c <__malloc_unlock+0x8>)
 800ac46:	f7ff b889 	b.w	8009d5c <__retarget_lock_release_recursive>
 800ac4a:	bf00      	nop
 800ac4c:	20000474 	.word	0x20000474

0800ac50 <_Balloc>:
 800ac50:	b570      	push	{r4, r5, r6, lr}
 800ac52:	69c6      	ldr	r6, [r0, #28]
 800ac54:	4604      	mov	r4, r0
 800ac56:	460d      	mov	r5, r1
 800ac58:	b976      	cbnz	r6, 800ac78 <_Balloc+0x28>
 800ac5a:	2010      	movs	r0, #16
 800ac5c:	f7ff ff44 	bl	800aae8 <malloc>
 800ac60:	4602      	mov	r2, r0
 800ac62:	61e0      	str	r0, [r4, #28]
 800ac64:	b920      	cbnz	r0, 800ac70 <_Balloc+0x20>
 800ac66:	216b      	movs	r1, #107	; 0x6b
 800ac68:	4b17      	ldr	r3, [pc, #92]	; (800acc8 <_Balloc+0x78>)
 800ac6a:	4818      	ldr	r0, [pc, #96]	; (800accc <_Balloc+0x7c>)
 800ac6c:	f000 ff68 	bl	800bb40 <__assert_func>
 800ac70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ac74:	6006      	str	r6, [r0, #0]
 800ac76:	60c6      	str	r6, [r0, #12]
 800ac78:	69e6      	ldr	r6, [r4, #28]
 800ac7a:	68f3      	ldr	r3, [r6, #12]
 800ac7c:	b183      	cbz	r3, 800aca0 <_Balloc+0x50>
 800ac7e:	69e3      	ldr	r3, [r4, #28]
 800ac80:	68db      	ldr	r3, [r3, #12]
 800ac82:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ac86:	b9b8      	cbnz	r0, 800acb8 <_Balloc+0x68>
 800ac88:	2101      	movs	r1, #1
 800ac8a:	fa01 f605 	lsl.w	r6, r1, r5
 800ac8e:	1d72      	adds	r2, r6, #5
 800ac90:	4620      	mov	r0, r4
 800ac92:	0092      	lsls	r2, r2, #2
 800ac94:	f000 ff72 	bl	800bb7c <_calloc_r>
 800ac98:	b160      	cbz	r0, 800acb4 <_Balloc+0x64>
 800ac9a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ac9e:	e00e      	b.n	800acbe <_Balloc+0x6e>
 800aca0:	2221      	movs	r2, #33	; 0x21
 800aca2:	2104      	movs	r1, #4
 800aca4:	4620      	mov	r0, r4
 800aca6:	f000 ff69 	bl	800bb7c <_calloc_r>
 800acaa:	69e3      	ldr	r3, [r4, #28]
 800acac:	60f0      	str	r0, [r6, #12]
 800acae:	68db      	ldr	r3, [r3, #12]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d1e4      	bne.n	800ac7e <_Balloc+0x2e>
 800acb4:	2000      	movs	r0, #0
 800acb6:	bd70      	pop	{r4, r5, r6, pc}
 800acb8:	6802      	ldr	r2, [r0, #0]
 800acba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800acbe:	2300      	movs	r3, #0
 800acc0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800acc4:	e7f7      	b.n	800acb6 <_Balloc+0x66>
 800acc6:	bf00      	nop
 800acc8:	0800d657 	.word	0x0800d657
 800accc:	0800d6d7 	.word	0x0800d6d7

0800acd0 <_Bfree>:
 800acd0:	b570      	push	{r4, r5, r6, lr}
 800acd2:	69c6      	ldr	r6, [r0, #28]
 800acd4:	4605      	mov	r5, r0
 800acd6:	460c      	mov	r4, r1
 800acd8:	b976      	cbnz	r6, 800acf8 <_Bfree+0x28>
 800acda:	2010      	movs	r0, #16
 800acdc:	f7ff ff04 	bl	800aae8 <malloc>
 800ace0:	4602      	mov	r2, r0
 800ace2:	61e8      	str	r0, [r5, #28]
 800ace4:	b920      	cbnz	r0, 800acf0 <_Bfree+0x20>
 800ace6:	218f      	movs	r1, #143	; 0x8f
 800ace8:	4b08      	ldr	r3, [pc, #32]	; (800ad0c <_Bfree+0x3c>)
 800acea:	4809      	ldr	r0, [pc, #36]	; (800ad10 <_Bfree+0x40>)
 800acec:	f000 ff28 	bl	800bb40 <__assert_func>
 800acf0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800acf4:	6006      	str	r6, [r0, #0]
 800acf6:	60c6      	str	r6, [r0, #12]
 800acf8:	b13c      	cbz	r4, 800ad0a <_Bfree+0x3a>
 800acfa:	69eb      	ldr	r3, [r5, #28]
 800acfc:	6862      	ldr	r2, [r4, #4]
 800acfe:	68db      	ldr	r3, [r3, #12]
 800ad00:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ad04:	6021      	str	r1, [r4, #0]
 800ad06:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ad0a:	bd70      	pop	{r4, r5, r6, pc}
 800ad0c:	0800d657 	.word	0x0800d657
 800ad10:	0800d6d7 	.word	0x0800d6d7

0800ad14 <__multadd>:
 800ad14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad18:	4607      	mov	r7, r0
 800ad1a:	460c      	mov	r4, r1
 800ad1c:	461e      	mov	r6, r3
 800ad1e:	2000      	movs	r0, #0
 800ad20:	690d      	ldr	r5, [r1, #16]
 800ad22:	f101 0c14 	add.w	ip, r1, #20
 800ad26:	f8dc 3000 	ldr.w	r3, [ip]
 800ad2a:	3001      	adds	r0, #1
 800ad2c:	b299      	uxth	r1, r3
 800ad2e:	fb02 6101 	mla	r1, r2, r1, r6
 800ad32:	0c1e      	lsrs	r6, r3, #16
 800ad34:	0c0b      	lsrs	r3, r1, #16
 800ad36:	fb02 3306 	mla	r3, r2, r6, r3
 800ad3a:	b289      	uxth	r1, r1
 800ad3c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ad40:	4285      	cmp	r5, r0
 800ad42:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ad46:	f84c 1b04 	str.w	r1, [ip], #4
 800ad4a:	dcec      	bgt.n	800ad26 <__multadd+0x12>
 800ad4c:	b30e      	cbz	r6, 800ad92 <__multadd+0x7e>
 800ad4e:	68a3      	ldr	r3, [r4, #8]
 800ad50:	42ab      	cmp	r3, r5
 800ad52:	dc19      	bgt.n	800ad88 <__multadd+0x74>
 800ad54:	6861      	ldr	r1, [r4, #4]
 800ad56:	4638      	mov	r0, r7
 800ad58:	3101      	adds	r1, #1
 800ad5a:	f7ff ff79 	bl	800ac50 <_Balloc>
 800ad5e:	4680      	mov	r8, r0
 800ad60:	b928      	cbnz	r0, 800ad6e <__multadd+0x5a>
 800ad62:	4602      	mov	r2, r0
 800ad64:	21ba      	movs	r1, #186	; 0xba
 800ad66:	4b0c      	ldr	r3, [pc, #48]	; (800ad98 <__multadd+0x84>)
 800ad68:	480c      	ldr	r0, [pc, #48]	; (800ad9c <__multadd+0x88>)
 800ad6a:	f000 fee9 	bl	800bb40 <__assert_func>
 800ad6e:	6922      	ldr	r2, [r4, #16]
 800ad70:	f104 010c 	add.w	r1, r4, #12
 800ad74:	3202      	adds	r2, #2
 800ad76:	0092      	lsls	r2, r2, #2
 800ad78:	300c      	adds	r0, #12
 800ad7a:	f000 fed3 	bl	800bb24 <memcpy>
 800ad7e:	4621      	mov	r1, r4
 800ad80:	4638      	mov	r0, r7
 800ad82:	f7ff ffa5 	bl	800acd0 <_Bfree>
 800ad86:	4644      	mov	r4, r8
 800ad88:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ad8c:	3501      	adds	r5, #1
 800ad8e:	615e      	str	r6, [r3, #20]
 800ad90:	6125      	str	r5, [r4, #16]
 800ad92:	4620      	mov	r0, r4
 800ad94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad98:	0800d6c6 	.word	0x0800d6c6
 800ad9c:	0800d6d7 	.word	0x0800d6d7

0800ada0 <__hi0bits>:
 800ada0:	0c02      	lsrs	r2, r0, #16
 800ada2:	0412      	lsls	r2, r2, #16
 800ada4:	4603      	mov	r3, r0
 800ada6:	b9ca      	cbnz	r2, 800addc <__hi0bits+0x3c>
 800ada8:	0403      	lsls	r3, r0, #16
 800adaa:	2010      	movs	r0, #16
 800adac:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800adb0:	bf04      	itt	eq
 800adb2:	021b      	lsleq	r3, r3, #8
 800adb4:	3008      	addeq	r0, #8
 800adb6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800adba:	bf04      	itt	eq
 800adbc:	011b      	lsleq	r3, r3, #4
 800adbe:	3004      	addeq	r0, #4
 800adc0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800adc4:	bf04      	itt	eq
 800adc6:	009b      	lsleq	r3, r3, #2
 800adc8:	3002      	addeq	r0, #2
 800adca:	2b00      	cmp	r3, #0
 800adcc:	db05      	blt.n	800adda <__hi0bits+0x3a>
 800adce:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800add2:	f100 0001 	add.w	r0, r0, #1
 800add6:	bf08      	it	eq
 800add8:	2020      	moveq	r0, #32
 800adda:	4770      	bx	lr
 800addc:	2000      	movs	r0, #0
 800adde:	e7e5      	b.n	800adac <__hi0bits+0xc>

0800ade0 <__lo0bits>:
 800ade0:	6803      	ldr	r3, [r0, #0]
 800ade2:	4602      	mov	r2, r0
 800ade4:	f013 0007 	ands.w	r0, r3, #7
 800ade8:	d00b      	beq.n	800ae02 <__lo0bits+0x22>
 800adea:	07d9      	lsls	r1, r3, #31
 800adec:	d421      	bmi.n	800ae32 <__lo0bits+0x52>
 800adee:	0798      	lsls	r0, r3, #30
 800adf0:	bf49      	itett	mi
 800adf2:	085b      	lsrmi	r3, r3, #1
 800adf4:	089b      	lsrpl	r3, r3, #2
 800adf6:	2001      	movmi	r0, #1
 800adf8:	6013      	strmi	r3, [r2, #0]
 800adfa:	bf5c      	itt	pl
 800adfc:	2002      	movpl	r0, #2
 800adfe:	6013      	strpl	r3, [r2, #0]
 800ae00:	4770      	bx	lr
 800ae02:	b299      	uxth	r1, r3
 800ae04:	b909      	cbnz	r1, 800ae0a <__lo0bits+0x2a>
 800ae06:	2010      	movs	r0, #16
 800ae08:	0c1b      	lsrs	r3, r3, #16
 800ae0a:	b2d9      	uxtb	r1, r3
 800ae0c:	b909      	cbnz	r1, 800ae12 <__lo0bits+0x32>
 800ae0e:	3008      	adds	r0, #8
 800ae10:	0a1b      	lsrs	r3, r3, #8
 800ae12:	0719      	lsls	r1, r3, #28
 800ae14:	bf04      	itt	eq
 800ae16:	091b      	lsreq	r3, r3, #4
 800ae18:	3004      	addeq	r0, #4
 800ae1a:	0799      	lsls	r1, r3, #30
 800ae1c:	bf04      	itt	eq
 800ae1e:	089b      	lsreq	r3, r3, #2
 800ae20:	3002      	addeq	r0, #2
 800ae22:	07d9      	lsls	r1, r3, #31
 800ae24:	d403      	bmi.n	800ae2e <__lo0bits+0x4e>
 800ae26:	085b      	lsrs	r3, r3, #1
 800ae28:	f100 0001 	add.w	r0, r0, #1
 800ae2c:	d003      	beq.n	800ae36 <__lo0bits+0x56>
 800ae2e:	6013      	str	r3, [r2, #0]
 800ae30:	4770      	bx	lr
 800ae32:	2000      	movs	r0, #0
 800ae34:	4770      	bx	lr
 800ae36:	2020      	movs	r0, #32
 800ae38:	4770      	bx	lr
	...

0800ae3c <__i2b>:
 800ae3c:	b510      	push	{r4, lr}
 800ae3e:	460c      	mov	r4, r1
 800ae40:	2101      	movs	r1, #1
 800ae42:	f7ff ff05 	bl	800ac50 <_Balloc>
 800ae46:	4602      	mov	r2, r0
 800ae48:	b928      	cbnz	r0, 800ae56 <__i2b+0x1a>
 800ae4a:	f240 1145 	movw	r1, #325	; 0x145
 800ae4e:	4b04      	ldr	r3, [pc, #16]	; (800ae60 <__i2b+0x24>)
 800ae50:	4804      	ldr	r0, [pc, #16]	; (800ae64 <__i2b+0x28>)
 800ae52:	f000 fe75 	bl	800bb40 <__assert_func>
 800ae56:	2301      	movs	r3, #1
 800ae58:	6144      	str	r4, [r0, #20]
 800ae5a:	6103      	str	r3, [r0, #16]
 800ae5c:	bd10      	pop	{r4, pc}
 800ae5e:	bf00      	nop
 800ae60:	0800d6c6 	.word	0x0800d6c6
 800ae64:	0800d6d7 	.word	0x0800d6d7

0800ae68 <__multiply>:
 800ae68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae6c:	4691      	mov	r9, r2
 800ae6e:	690a      	ldr	r2, [r1, #16]
 800ae70:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ae74:	460c      	mov	r4, r1
 800ae76:	429a      	cmp	r2, r3
 800ae78:	bfbe      	ittt	lt
 800ae7a:	460b      	movlt	r3, r1
 800ae7c:	464c      	movlt	r4, r9
 800ae7e:	4699      	movlt	r9, r3
 800ae80:	6927      	ldr	r7, [r4, #16]
 800ae82:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ae86:	68a3      	ldr	r3, [r4, #8]
 800ae88:	6861      	ldr	r1, [r4, #4]
 800ae8a:	eb07 060a 	add.w	r6, r7, sl
 800ae8e:	42b3      	cmp	r3, r6
 800ae90:	b085      	sub	sp, #20
 800ae92:	bfb8      	it	lt
 800ae94:	3101      	addlt	r1, #1
 800ae96:	f7ff fedb 	bl	800ac50 <_Balloc>
 800ae9a:	b930      	cbnz	r0, 800aeaa <__multiply+0x42>
 800ae9c:	4602      	mov	r2, r0
 800ae9e:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800aea2:	4b43      	ldr	r3, [pc, #268]	; (800afb0 <__multiply+0x148>)
 800aea4:	4843      	ldr	r0, [pc, #268]	; (800afb4 <__multiply+0x14c>)
 800aea6:	f000 fe4b 	bl	800bb40 <__assert_func>
 800aeaa:	f100 0514 	add.w	r5, r0, #20
 800aeae:	462b      	mov	r3, r5
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800aeb6:	4543      	cmp	r3, r8
 800aeb8:	d321      	bcc.n	800aefe <__multiply+0x96>
 800aeba:	f104 0314 	add.w	r3, r4, #20
 800aebe:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800aec2:	f109 0314 	add.w	r3, r9, #20
 800aec6:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800aeca:	9202      	str	r2, [sp, #8]
 800aecc:	1b3a      	subs	r2, r7, r4
 800aece:	3a15      	subs	r2, #21
 800aed0:	f022 0203 	bic.w	r2, r2, #3
 800aed4:	3204      	adds	r2, #4
 800aed6:	f104 0115 	add.w	r1, r4, #21
 800aeda:	428f      	cmp	r7, r1
 800aedc:	bf38      	it	cc
 800aede:	2204      	movcc	r2, #4
 800aee0:	9201      	str	r2, [sp, #4]
 800aee2:	9a02      	ldr	r2, [sp, #8]
 800aee4:	9303      	str	r3, [sp, #12]
 800aee6:	429a      	cmp	r2, r3
 800aee8:	d80c      	bhi.n	800af04 <__multiply+0x9c>
 800aeea:	2e00      	cmp	r6, #0
 800aeec:	dd03      	ble.n	800aef6 <__multiply+0x8e>
 800aeee:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d05a      	beq.n	800afac <__multiply+0x144>
 800aef6:	6106      	str	r6, [r0, #16]
 800aef8:	b005      	add	sp, #20
 800aefa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aefe:	f843 2b04 	str.w	r2, [r3], #4
 800af02:	e7d8      	b.n	800aeb6 <__multiply+0x4e>
 800af04:	f8b3 a000 	ldrh.w	sl, [r3]
 800af08:	f1ba 0f00 	cmp.w	sl, #0
 800af0c:	d023      	beq.n	800af56 <__multiply+0xee>
 800af0e:	46a9      	mov	r9, r5
 800af10:	f04f 0c00 	mov.w	ip, #0
 800af14:	f104 0e14 	add.w	lr, r4, #20
 800af18:	f85e 2b04 	ldr.w	r2, [lr], #4
 800af1c:	f8d9 1000 	ldr.w	r1, [r9]
 800af20:	fa1f fb82 	uxth.w	fp, r2
 800af24:	b289      	uxth	r1, r1
 800af26:	fb0a 110b 	mla	r1, sl, fp, r1
 800af2a:	4461      	add	r1, ip
 800af2c:	f8d9 c000 	ldr.w	ip, [r9]
 800af30:	0c12      	lsrs	r2, r2, #16
 800af32:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800af36:	fb0a c202 	mla	r2, sl, r2, ip
 800af3a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800af3e:	b289      	uxth	r1, r1
 800af40:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800af44:	4577      	cmp	r7, lr
 800af46:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800af4a:	f849 1b04 	str.w	r1, [r9], #4
 800af4e:	d8e3      	bhi.n	800af18 <__multiply+0xb0>
 800af50:	9a01      	ldr	r2, [sp, #4]
 800af52:	f845 c002 	str.w	ip, [r5, r2]
 800af56:	9a03      	ldr	r2, [sp, #12]
 800af58:	3304      	adds	r3, #4
 800af5a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800af5e:	f1b9 0f00 	cmp.w	r9, #0
 800af62:	d021      	beq.n	800afa8 <__multiply+0x140>
 800af64:	46ae      	mov	lr, r5
 800af66:	f04f 0a00 	mov.w	sl, #0
 800af6a:	6829      	ldr	r1, [r5, #0]
 800af6c:	f104 0c14 	add.w	ip, r4, #20
 800af70:	f8bc b000 	ldrh.w	fp, [ip]
 800af74:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800af78:	b289      	uxth	r1, r1
 800af7a:	fb09 220b 	mla	r2, r9, fp, r2
 800af7e:	4452      	add	r2, sl
 800af80:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800af84:	f84e 1b04 	str.w	r1, [lr], #4
 800af88:	f85c 1b04 	ldr.w	r1, [ip], #4
 800af8c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800af90:	f8be 1000 	ldrh.w	r1, [lr]
 800af94:	4567      	cmp	r7, ip
 800af96:	fb09 110a 	mla	r1, r9, sl, r1
 800af9a:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800af9e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800afa2:	d8e5      	bhi.n	800af70 <__multiply+0x108>
 800afa4:	9a01      	ldr	r2, [sp, #4]
 800afa6:	50a9      	str	r1, [r5, r2]
 800afa8:	3504      	adds	r5, #4
 800afaa:	e79a      	b.n	800aee2 <__multiply+0x7a>
 800afac:	3e01      	subs	r6, #1
 800afae:	e79c      	b.n	800aeea <__multiply+0x82>
 800afb0:	0800d6c6 	.word	0x0800d6c6
 800afb4:	0800d6d7 	.word	0x0800d6d7

0800afb8 <__pow5mult>:
 800afb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afbc:	4615      	mov	r5, r2
 800afbe:	f012 0203 	ands.w	r2, r2, #3
 800afc2:	4606      	mov	r6, r0
 800afc4:	460f      	mov	r7, r1
 800afc6:	d007      	beq.n	800afd8 <__pow5mult+0x20>
 800afc8:	4c25      	ldr	r4, [pc, #148]	; (800b060 <__pow5mult+0xa8>)
 800afca:	3a01      	subs	r2, #1
 800afcc:	2300      	movs	r3, #0
 800afce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800afd2:	f7ff fe9f 	bl	800ad14 <__multadd>
 800afd6:	4607      	mov	r7, r0
 800afd8:	10ad      	asrs	r5, r5, #2
 800afda:	d03d      	beq.n	800b058 <__pow5mult+0xa0>
 800afdc:	69f4      	ldr	r4, [r6, #28]
 800afde:	b97c      	cbnz	r4, 800b000 <__pow5mult+0x48>
 800afe0:	2010      	movs	r0, #16
 800afe2:	f7ff fd81 	bl	800aae8 <malloc>
 800afe6:	4602      	mov	r2, r0
 800afe8:	61f0      	str	r0, [r6, #28]
 800afea:	b928      	cbnz	r0, 800aff8 <__pow5mult+0x40>
 800afec:	f240 11b3 	movw	r1, #435	; 0x1b3
 800aff0:	4b1c      	ldr	r3, [pc, #112]	; (800b064 <__pow5mult+0xac>)
 800aff2:	481d      	ldr	r0, [pc, #116]	; (800b068 <__pow5mult+0xb0>)
 800aff4:	f000 fda4 	bl	800bb40 <__assert_func>
 800aff8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800affc:	6004      	str	r4, [r0, #0]
 800affe:	60c4      	str	r4, [r0, #12]
 800b000:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b004:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b008:	b94c      	cbnz	r4, 800b01e <__pow5mult+0x66>
 800b00a:	f240 2171 	movw	r1, #625	; 0x271
 800b00e:	4630      	mov	r0, r6
 800b010:	f7ff ff14 	bl	800ae3c <__i2b>
 800b014:	2300      	movs	r3, #0
 800b016:	4604      	mov	r4, r0
 800b018:	f8c8 0008 	str.w	r0, [r8, #8]
 800b01c:	6003      	str	r3, [r0, #0]
 800b01e:	f04f 0900 	mov.w	r9, #0
 800b022:	07eb      	lsls	r3, r5, #31
 800b024:	d50a      	bpl.n	800b03c <__pow5mult+0x84>
 800b026:	4639      	mov	r1, r7
 800b028:	4622      	mov	r2, r4
 800b02a:	4630      	mov	r0, r6
 800b02c:	f7ff ff1c 	bl	800ae68 <__multiply>
 800b030:	4680      	mov	r8, r0
 800b032:	4639      	mov	r1, r7
 800b034:	4630      	mov	r0, r6
 800b036:	f7ff fe4b 	bl	800acd0 <_Bfree>
 800b03a:	4647      	mov	r7, r8
 800b03c:	106d      	asrs	r5, r5, #1
 800b03e:	d00b      	beq.n	800b058 <__pow5mult+0xa0>
 800b040:	6820      	ldr	r0, [r4, #0]
 800b042:	b938      	cbnz	r0, 800b054 <__pow5mult+0x9c>
 800b044:	4622      	mov	r2, r4
 800b046:	4621      	mov	r1, r4
 800b048:	4630      	mov	r0, r6
 800b04a:	f7ff ff0d 	bl	800ae68 <__multiply>
 800b04e:	6020      	str	r0, [r4, #0]
 800b050:	f8c0 9000 	str.w	r9, [r0]
 800b054:	4604      	mov	r4, r0
 800b056:	e7e4      	b.n	800b022 <__pow5mult+0x6a>
 800b058:	4638      	mov	r0, r7
 800b05a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b05e:	bf00      	nop
 800b060:	0800d820 	.word	0x0800d820
 800b064:	0800d657 	.word	0x0800d657
 800b068:	0800d6d7 	.word	0x0800d6d7

0800b06c <__lshift>:
 800b06c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b070:	460c      	mov	r4, r1
 800b072:	4607      	mov	r7, r0
 800b074:	4691      	mov	r9, r2
 800b076:	6923      	ldr	r3, [r4, #16]
 800b078:	6849      	ldr	r1, [r1, #4]
 800b07a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b07e:	68a3      	ldr	r3, [r4, #8]
 800b080:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b084:	f108 0601 	add.w	r6, r8, #1
 800b088:	42b3      	cmp	r3, r6
 800b08a:	db0b      	blt.n	800b0a4 <__lshift+0x38>
 800b08c:	4638      	mov	r0, r7
 800b08e:	f7ff fddf 	bl	800ac50 <_Balloc>
 800b092:	4605      	mov	r5, r0
 800b094:	b948      	cbnz	r0, 800b0aa <__lshift+0x3e>
 800b096:	4602      	mov	r2, r0
 800b098:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b09c:	4b27      	ldr	r3, [pc, #156]	; (800b13c <__lshift+0xd0>)
 800b09e:	4828      	ldr	r0, [pc, #160]	; (800b140 <__lshift+0xd4>)
 800b0a0:	f000 fd4e 	bl	800bb40 <__assert_func>
 800b0a4:	3101      	adds	r1, #1
 800b0a6:	005b      	lsls	r3, r3, #1
 800b0a8:	e7ee      	b.n	800b088 <__lshift+0x1c>
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	f100 0114 	add.w	r1, r0, #20
 800b0b0:	f100 0210 	add.w	r2, r0, #16
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	4553      	cmp	r3, sl
 800b0b8:	db33      	blt.n	800b122 <__lshift+0xb6>
 800b0ba:	6920      	ldr	r0, [r4, #16]
 800b0bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b0c0:	f104 0314 	add.w	r3, r4, #20
 800b0c4:	f019 091f 	ands.w	r9, r9, #31
 800b0c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b0cc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b0d0:	d02b      	beq.n	800b12a <__lshift+0xbe>
 800b0d2:	468a      	mov	sl, r1
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	f1c9 0e20 	rsb	lr, r9, #32
 800b0da:	6818      	ldr	r0, [r3, #0]
 800b0dc:	fa00 f009 	lsl.w	r0, r0, r9
 800b0e0:	4310      	orrs	r0, r2
 800b0e2:	f84a 0b04 	str.w	r0, [sl], #4
 800b0e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0ea:	459c      	cmp	ip, r3
 800b0ec:	fa22 f20e 	lsr.w	r2, r2, lr
 800b0f0:	d8f3      	bhi.n	800b0da <__lshift+0x6e>
 800b0f2:	ebac 0304 	sub.w	r3, ip, r4
 800b0f6:	3b15      	subs	r3, #21
 800b0f8:	f023 0303 	bic.w	r3, r3, #3
 800b0fc:	3304      	adds	r3, #4
 800b0fe:	f104 0015 	add.w	r0, r4, #21
 800b102:	4584      	cmp	ip, r0
 800b104:	bf38      	it	cc
 800b106:	2304      	movcc	r3, #4
 800b108:	50ca      	str	r2, [r1, r3]
 800b10a:	b10a      	cbz	r2, 800b110 <__lshift+0xa4>
 800b10c:	f108 0602 	add.w	r6, r8, #2
 800b110:	3e01      	subs	r6, #1
 800b112:	4638      	mov	r0, r7
 800b114:	4621      	mov	r1, r4
 800b116:	612e      	str	r6, [r5, #16]
 800b118:	f7ff fdda 	bl	800acd0 <_Bfree>
 800b11c:	4628      	mov	r0, r5
 800b11e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b122:	f842 0f04 	str.w	r0, [r2, #4]!
 800b126:	3301      	adds	r3, #1
 800b128:	e7c5      	b.n	800b0b6 <__lshift+0x4a>
 800b12a:	3904      	subs	r1, #4
 800b12c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b130:	459c      	cmp	ip, r3
 800b132:	f841 2f04 	str.w	r2, [r1, #4]!
 800b136:	d8f9      	bhi.n	800b12c <__lshift+0xc0>
 800b138:	e7ea      	b.n	800b110 <__lshift+0xa4>
 800b13a:	bf00      	nop
 800b13c:	0800d6c6 	.word	0x0800d6c6
 800b140:	0800d6d7 	.word	0x0800d6d7

0800b144 <__mcmp>:
 800b144:	4603      	mov	r3, r0
 800b146:	690a      	ldr	r2, [r1, #16]
 800b148:	6900      	ldr	r0, [r0, #16]
 800b14a:	b530      	push	{r4, r5, lr}
 800b14c:	1a80      	subs	r0, r0, r2
 800b14e:	d10d      	bne.n	800b16c <__mcmp+0x28>
 800b150:	3314      	adds	r3, #20
 800b152:	3114      	adds	r1, #20
 800b154:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b158:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b15c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b160:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b164:	4295      	cmp	r5, r2
 800b166:	d002      	beq.n	800b16e <__mcmp+0x2a>
 800b168:	d304      	bcc.n	800b174 <__mcmp+0x30>
 800b16a:	2001      	movs	r0, #1
 800b16c:	bd30      	pop	{r4, r5, pc}
 800b16e:	42a3      	cmp	r3, r4
 800b170:	d3f4      	bcc.n	800b15c <__mcmp+0x18>
 800b172:	e7fb      	b.n	800b16c <__mcmp+0x28>
 800b174:	f04f 30ff 	mov.w	r0, #4294967295
 800b178:	e7f8      	b.n	800b16c <__mcmp+0x28>
	...

0800b17c <__mdiff>:
 800b17c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b180:	460d      	mov	r5, r1
 800b182:	4607      	mov	r7, r0
 800b184:	4611      	mov	r1, r2
 800b186:	4628      	mov	r0, r5
 800b188:	4614      	mov	r4, r2
 800b18a:	f7ff ffdb 	bl	800b144 <__mcmp>
 800b18e:	1e06      	subs	r6, r0, #0
 800b190:	d111      	bne.n	800b1b6 <__mdiff+0x3a>
 800b192:	4631      	mov	r1, r6
 800b194:	4638      	mov	r0, r7
 800b196:	f7ff fd5b 	bl	800ac50 <_Balloc>
 800b19a:	4602      	mov	r2, r0
 800b19c:	b928      	cbnz	r0, 800b1aa <__mdiff+0x2e>
 800b19e:	f240 2137 	movw	r1, #567	; 0x237
 800b1a2:	4b3a      	ldr	r3, [pc, #232]	; (800b28c <__mdiff+0x110>)
 800b1a4:	483a      	ldr	r0, [pc, #232]	; (800b290 <__mdiff+0x114>)
 800b1a6:	f000 fccb 	bl	800bb40 <__assert_func>
 800b1aa:	2301      	movs	r3, #1
 800b1ac:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b1b0:	4610      	mov	r0, r2
 800b1b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1b6:	bfa4      	itt	ge
 800b1b8:	4623      	movge	r3, r4
 800b1ba:	462c      	movge	r4, r5
 800b1bc:	4638      	mov	r0, r7
 800b1be:	6861      	ldr	r1, [r4, #4]
 800b1c0:	bfa6      	itte	ge
 800b1c2:	461d      	movge	r5, r3
 800b1c4:	2600      	movge	r6, #0
 800b1c6:	2601      	movlt	r6, #1
 800b1c8:	f7ff fd42 	bl	800ac50 <_Balloc>
 800b1cc:	4602      	mov	r2, r0
 800b1ce:	b918      	cbnz	r0, 800b1d8 <__mdiff+0x5c>
 800b1d0:	f240 2145 	movw	r1, #581	; 0x245
 800b1d4:	4b2d      	ldr	r3, [pc, #180]	; (800b28c <__mdiff+0x110>)
 800b1d6:	e7e5      	b.n	800b1a4 <__mdiff+0x28>
 800b1d8:	f102 0814 	add.w	r8, r2, #20
 800b1dc:	46c2      	mov	sl, r8
 800b1de:	f04f 0c00 	mov.w	ip, #0
 800b1e2:	6927      	ldr	r7, [r4, #16]
 800b1e4:	60c6      	str	r6, [r0, #12]
 800b1e6:	692e      	ldr	r6, [r5, #16]
 800b1e8:	f104 0014 	add.w	r0, r4, #20
 800b1ec:	f105 0914 	add.w	r9, r5, #20
 800b1f0:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800b1f4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b1f8:	3410      	adds	r4, #16
 800b1fa:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800b1fe:	f859 3b04 	ldr.w	r3, [r9], #4
 800b202:	fa1f f18b 	uxth.w	r1, fp
 800b206:	4461      	add	r1, ip
 800b208:	fa1f fc83 	uxth.w	ip, r3
 800b20c:	0c1b      	lsrs	r3, r3, #16
 800b20e:	eba1 010c 	sub.w	r1, r1, ip
 800b212:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b216:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b21a:	b289      	uxth	r1, r1
 800b21c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800b220:	454e      	cmp	r6, r9
 800b222:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800b226:	f84a 1b04 	str.w	r1, [sl], #4
 800b22a:	d8e6      	bhi.n	800b1fa <__mdiff+0x7e>
 800b22c:	1b73      	subs	r3, r6, r5
 800b22e:	3b15      	subs	r3, #21
 800b230:	f023 0303 	bic.w	r3, r3, #3
 800b234:	3515      	adds	r5, #21
 800b236:	3304      	adds	r3, #4
 800b238:	42ae      	cmp	r6, r5
 800b23a:	bf38      	it	cc
 800b23c:	2304      	movcc	r3, #4
 800b23e:	4418      	add	r0, r3
 800b240:	4443      	add	r3, r8
 800b242:	461e      	mov	r6, r3
 800b244:	4605      	mov	r5, r0
 800b246:	4575      	cmp	r5, lr
 800b248:	d30e      	bcc.n	800b268 <__mdiff+0xec>
 800b24a:	f10e 0103 	add.w	r1, lr, #3
 800b24e:	1a09      	subs	r1, r1, r0
 800b250:	f021 0103 	bic.w	r1, r1, #3
 800b254:	3803      	subs	r0, #3
 800b256:	4586      	cmp	lr, r0
 800b258:	bf38      	it	cc
 800b25a:	2100      	movcc	r1, #0
 800b25c:	440b      	add	r3, r1
 800b25e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b262:	b189      	cbz	r1, 800b288 <__mdiff+0x10c>
 800b264:	6117      	str	r7, [r2, #16]
 800b266:	e7a3      	b.n	800b1b0 <__mdiff+0x34>
 800b268:	f855 8b04 	ldr.w	r8, [r5], #4
 800b26c:	fa1f f188 	uxth.w	r1, r8
 800b270:	4461      	add	r1, ip
 800b272:	140c      	asrs	r4, r1, #16
 800b274:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b278:	b289      	uxth	r1, r1
 800b27a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b27e:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800b282:	f846 1b04 	str.w	r1, [r6], #4
 800b286:	e7de      	b.n	800b246 <__mdiff+0xca>
 800b288:	3f01      	subs	r7, #1
 800b28a:	e7e8      	b.n	800b25e <__mdiff+0xe2>
 800b28c:	0800d6c6 	.word	0x0800d6c6
 800b290:	0800d6d7 	.word	0x0800d6d7

0800b294 <__d2b>:
 800b294:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b296:	2101      	movs	r1, #1
 800b298:	4617      	mov	r7, r2
 800b29a:	461c      	mov	r4, r3
 800b29c:	9e08      	ldr	r6, [sp, #32]
 800b29e:	f7ff fcd7 	bl	800ac50 <_Balloc>
 800b2a2:	4605      	mov	r5, r0
 800b2a4:	b930      	cbnz	r0, 800b2b4 <__d2b+0x20>
 800b2a6:	4602      	mov	r2, r0
 800b2a8:	f240 310f 	movw	r1, #783	; 0x30f
 800b2ac:	4b22      	ldr	r3, [pc, #136]	; (800b338 <__d2b+0xa4>)
 800b2ae:	4823      	ldr	r0, [pc, #140]	; (800b33c <__d2b+0xa8>)
 800b2b0:	f000 fc46 	bl	800bb40 <__assert_func>
 800b2b4:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800b2b8:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800b2bc:	bb24      	cbnz	r4, 800b308 <__d2b+0x74>
 800b2be:	2f00      	cmp	r7, #0
 800b2c0:	9301      	str	r3, [sp, #4]
 800b2c2:	d026      	beq.n	800b312 <__d2b+0x7e>
 800b2c4:	4668      	mov	r0, sp
 800b2c6:	9700      	str	r7, [sp, #0]
 800b2c8:	f7ff fd8a 	bl	800ade0 <__lo0bits>
 800b2cc:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b2d0:	b1e8      	cbz	r0, 800b30e <__d2b+0x7a>
 800b2d2:	f1c0 0320 	rsb	r3, r0, #32
 800b2d6:	fa02 f303 	lsl.w	r3, r2, r3
 800b2da:	430b      	orrs	r3, r1
 800b2dc:	40c2      	lsrs	r2, r0
 800b2de:	616b      	str	r3, [r5, #20]
 800b2e0:	9201      	str	r2, [sp, #4]
 800b2e2:	9b01      	ldr	r3, [sp, #4]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	bf14      	ite	ne
 800b2e8:	2102      	movne	r1, #2
 800b2ea:	2101      	moveq	r1, #1
 800b2ec:	61ab      	str	r3, [r5, #24]
 800b2ee:	6129      	str	r1, [r5, #16]
 800b2f0:	b1bc      	cbz	r4, 800b322 <__d2b+0x8e>
 800b2f2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b2f6:	4404      	add	r4, r0
 800b2f8:	6034      	str	r4, [r6, #0]
 800b2fa:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b2fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b300:	6018      	str	r0, [r3, #0]
 800b302:	4628      	mov	r0, r5
 800b304:	b003      	add	sp, #12
 800b306:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b308:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b30c:	e7d7      	b.n	800b2be <__d2b+0x2a>
 800b30e:	6169      	str	r1, [r5, #20]
 800b310:	e7e7      	b.n	800b2e2 <__d2b+0x4e>
 800b312:	a801      	add	r0, sp, #4
 800b314:	f7ff fd64 	bl	800ade0 <__lo0bits>
 800b318:	9b01      	ldr	r3, [sp, #4]
 800b31a:	2101      	movs	r1, #1
 800b31c:	616b      	str	r3, [r5, #20]
 800b31e:	3020      	adds	r0, #32
 800b320:	e7e5      	b.n	800b2ee <__d2b+0x5a>
 800b322:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b326:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800b32a:	6030      	str	r0, [r6, #0]
 800b32c:	6918      	ldr	r0, [r3, #16]
 800b32e:	f7ff fd37 	bl	800ada0 <__hi0bits>
 800b332:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b336:	e7e2      	b.n	800b2fe <__d2b+0x6a>
 800b338:	0800d6c6 	.word	0x0800d6c6
 800b33c:	0800d6d7 	.word	0x0800d6d7

0800b340 <__ssputs_r>:
 800b340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b344:	461f      	mov	r7, r3
 800b346:	688e      	ldr	r6, [r1, #8]
 800b348:	4682      	mov	sl, r0
 800b34a:	42be      	cmp	r6, r7
 800b34c:	460c      	mov	r4, r1
 800b34e:	4690      	mov	r8, r2
 800b350:	680b      	ldr	r3, [r1, #0]
 800b352:	d82c      	bhi.n	800b3ae <__ssputs_r+0x6e>
 800b354:	898a      	ldrh	r2, [r1, #12]
 800b356:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b35a:	d026      	beq.n	800b3aa <__ssputs_r+0x6a>
 800b35c:	6965      	ldr	r5, [r4, #20]
 800b35e:	6909      	ldr	r1, [r1, #16]
 800b360:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b364:	eba3 0901 	sub.w	r9, r3, r1
 800b368:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b36c:	1c7b      	adds	r3, r7, #1
 800b36e:	444b      	add	r3, r9
 800b370:	106d      	asrs	r5, r5, #1
 800b372:	429d      	cmp	r5, r3
 800b374:	bf38      	it	cc
 800b376:	461d      	movcc	r5, r3
 800b378:	0553      	lsls	r3, r2, #21
 800b37a:	d527      	bpl.n	800b3cc <__ssputs_r+0x8c>
 800b37c:	4629      	mov	r1, r5
 800b37e:	f7ff fbdb 	bl	800ab38 <_malloc_r>
 800b382:	4606      	mov	r6, r0
 800b384:	b360      	cbz	r0, 800b3e0 <__ssputs_r+0xa0>
 800b386:	464a      	mov	r2, r9
 800b388:	6921      	ldr	r1, [r4, #16]
 800b38a:	f000 fbcb 	bl	800bb24 <memcpy>
 800b38e:	89a3      	ldrh	r3, [r4, #12]
 800b390:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b394:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b398:	81a3      	strh	r3, [r4, #12]
 800b39a:	6126      	str	r6, [r4, #16]
 800b39c:	444e      	add	r6, r9
 800b39e:	6026      	str	r6, [r4, #0]
 800b3a0:	463e      	mov	r6, r7
 800b3a2:	6165      	str	r5, [r4, #20]
 800b3a4:	eba5 0509 	sub.w	r5, r5, r9
 800b3a8:	60a5      	str	r5, [r4, #8]
 800b3aa:	42be      	cmp	r6, r7
 800b3ac:	d900      	bls.n	800b3b0 <__ssputs_r+0x70>
 800b3ae:	463e      	mov	r6, r7
 800b3b0:	4632      	mov	r2, r6
 800b3b2:	4641      	mov	r1, r8
 800b3b4:	6820      	ldr	r0, [r4, #0]
 800b3b6:	f000 fb68 	bl	800ba8a <memmove>
 800b3ba:	2000      	movs	r0, #0
 800b3bc:	68a3      	ldr	r3, [r4, #8]
 800b3be:	1b9b      	subs	r3, r3, r6
 800b3c0:	60a3      	str	r3, [r4, #8]
 800b3c2:	6823      	ldr	r3, [r4, #0]
 800b3c4:	4433      	add	r3, r6
 800b3c6:	6023      	str	r3, [r4, #0]
 800b3c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3cc:	462a      	mov	r2, r5
 800b3ce:	f000 fbfb 	bl	800bbc8 <_realloc_r>
 800b3d2:	4606      	mov	r6, r0
 800b3d4:	2800      	cmp	r0, #0
 800b3d6:	d1e0      	bne.n	800b39a <__ssputs_r+0x5a>
 800b3d8:	4650      	mov	r0, sl
 800b3da:	6921      	ldr	r1, [r4, #16]
 800b3dc:	f7ff fb3c 	bl	800aa58 <_free_r>
 800b3e0:	230c      	movs	r3, #12
 800b3e2:	f8ca 3000 	str.w	r3, [sl]
 800b3e6:	89a3      	ldrh	r3, [r4, #12]
 800b3e8:	f04f 30ff 	mov.w	r0, #4294967295
 800b3ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3f0:	81a3      	strh	r3, [r4, #12]
 800b3f2:	e7e9      	b.n	800b3c8 <__ssputs_r+0x88>

0800b3f4 <_svfiprintf_r>:
 800b3f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3f8:	4698      	mov	r8, r3
 800b3fa:	898b      	ldrh	r3, [r1, #12]
 800b3fc:	4607      	mov	r7, r0
 800b3fe:	061b      	lsls	r3, r3, #24
 800b400:	460d      	mov	r5, r1
 800b402:	4614      	mov	r4, r2
 800b404:	b09d      	sub	sp, #116	; 0x74
 800b406:	d50e      	bpl.n	800b426 <_svfiprintf_r+0x32>
 800b408:	690b      	ldr	r3, [r1, #16]
 800b40a:	b963      	cbnz	r3, 800b426 <_svfiprintf_r+0x32>
 800b40c:	2140      	movs	r1, #64	; 0x40
 800b40e:	f7ff fb93 	bl	800ab38 <_malloc_r>
 800b412:	6028      	str	r0, [r5, #0]
 800b414:	6128      	str	r0, [r5, #16]
 800b416:	b920      	cbnz	r0, 800b422 <_svfiprintf_r+0x2e>
 800b418:	230c      	movs	r3, #12
 800b41a:	603b      	str	r3, [r7, #0]
 800b41c:	f04f 30ff 	mov.w	r0, #4294967295
 800b420:	e0d0      	b.n	800b5c4 <_svfiprintf_r+0x1d0>
 800b422:	2340      	movs	r3, #64	; 0x40
 800b424:	616b      	str	r3, [r5, #20]
 800b426:	2300      	movs	r3, #0
 800b428:	9309      	str	r3, [sp, #36]	; 0x24
 800b42a:	2320      	movs	r3, #32
 800b42c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b430:	2330      	movs	r3, #48	; 0x30
 800b432:	f04f 0901 	mov.w	r9, #1
 800b436:	f8cd 800c 	str.w	r8, [sp, #12]
 800b43a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800b5dc <_svfiprintf_r+0x1e8>
 800b43e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b442:	4623      	mov	r3, r4
 800b444:	469a      	mov	sl, r3
 800b446:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b44a:	b10a      	cbz	r2, 800b450 <_svfiprintf_r+0x5c>
 800b44c:	2a25      	cmp	r2, #37	; 0x25
 800b44e:	d1f9      	bne.n	800b444 <_svfiprintf_r+0x50>
 800b450:	ebba 0b04 	subs.w	fp, sl, r4
 800b454:	d00b      	beq.n	800b46e <_svfiprintf_r+0x7a>
 800b456:	465b      	mov	r3, fp
 800b458:	4622      	mov	r2, r4
 800b45a:	4629      	mov	r1, r5
 800b45c:	4638      	mov	r0, r7
 800b45e:	f7ff ff6f 	bl	800b340 <__ssputs_r>
 800b462:	3001      	adds	r0, #1
 800b464:	f000 80a9 	beq.w	800b5ba <_svfiprintf_r+0x1c6>
 800b468:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b46a:	445a      	add	r2, fp
 800b46c:	9209      	str	r2, [sp, #36]	; 0x24
 800b46e:	f89a 3000 	ldrb.w	r3, [sl]
 800b472:	2b00      	cmp	r3, #0
 800b474:	f000 80a1 	beq.w	800b5ba <_svfiprintf_r+0x1c6>
 800b478:	2300      	movs	r3, #0
 800b47a:	f04f 32ff 	mov.w	r2, #4294967295
 800b47e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b482:	f10a 0a01 	add.w	sl, sl, #1
 800b486:	9304      	str	r3, [sp, #16]
 800b488:	9307      	str	r3, [sp, #28]
 800b48a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b48e:	931a      	str	r3, [sp, #104]	; 0x68
 800b490:	4654      	mov	r4, sl
 800b492:	2205      	movs	r2, #5
 800b494:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b498:	4850      	ldr	r0, [pc, #320]	; (800b5dc <_svfiprintf_r+0x1e8>)
 800b49a:	f7fe fc60 	bl	8009d5e <memchr>
 800b49e:	9a04      	ldr	r2, [sp, #16]
 800b4a0:	b9d8      	cbnz	r0, 800b4da <_svfiprintf_r+0xe6>
 800b4a2:	06d0      	lsls	r0, r2, #27
 800b4a4:	bf44      	itt	mi
 800b4a6:	2320      	movmi	r3, #32
 800b4a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4ac:	0711      	lsls	r1, r2, #28
 800b4ae:	bf44      	itt	mi
 800b4b0:	232b      	movmi	r3, #43	; 0x2b
 800b4b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4b6:	f89a 3000 	ldrb.w	r3, [sl]
 800b4ba:	2b2a      	cmp	r3, #42	; 0x2a
 800b4bc:	d015      	beq.n	800b4ea <_svfiprintf_r+0xf6>
 800b4be:	4654      	mov	r4, sl
 800b4c0:	2000      	movs	r0, #0
 800b4c2:	f04f 0c0a 	mov.w	ip, #10
 800b4c6:	9a07      	ldr	r2, [sp, #28]
 800b4c8:	4621      	mov	r1, r4
 800b4ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b4ce:	3b30      	subs	r3, #48	; 0x30
 800b4d0:	2b09      	cmp	r3, #9
 800b4d2:	d94d      	bls.n	800b570 <_svfiprintf_r+0x17c>
 800b4d4:	b1b0      	cbz	r0, 800b504 <_svfiprintf_r+0x110>
 800b4d6:	9207      	str	r2, [sp, #28]
 800b4d8:	e014      	b.n	800b504 <_svfiprintf_r+0x110>
 800b4da:	eba0 0308 	sub.w	r3, r0, r8
 800b4de:	fa09 f303 	lsl.w	r3, r9, r3
 800b4e2:	4313      	orrs	r3, r2
 800b4e4:	46a2      	mov	sl, r4
 800b4e6:	9304      	str	r3, [sp, #16]
 800b4e8:	e7d2      	b.n	800b490 <_svfiprintf_r+0x9c>
 800b4ea:	9b03      	ldr	r3, [sp, #12]
 800b4ec:	1d19      	adds	r1, r3, #4
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	9103      	str	r1, [sp, #12]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	bfbb      	ittet	lt
 800b4f6:	425b      	neglt	r3, r3
 800b4f8:	f042 0202 	orrlt.w	r2, r2, #2
 800b4fc:	9307      	strge	r3, [sp, #28]
 800b4fe:	9307      	strlt	r3, [sp, #28]
 800b500:	bfb8      	it	lt
 800b502:	9204      	strlt	r2, [sp, #16]
 800b504:	7823      	ldrb	r3, [r4, #0]
 800b506:	2b2e      	cmp	r3, #46	; 0x2e
 800b508:	d10c      	bne.n	800b524 <_svfiprintf_r+0x130>
 800b50a:	7863      	ldrb	r3, [r4, #1]
 800b50c:	2b2a      	cmp	r3, #42	; 0x2a
 800b50e:	d134      	bne.n	800b57a <_svfiprintf_r+0x186>
 800b510:	9b03      	ldr	r3, [sp, #12]
 800b512:	3402      	adds	r4, #2
 800b514:	1d1a      	adds	r2, r3, #4
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	9203      	str	r2, [sp, #12]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	bfb8      	it	lt
 800b51e:	f04f 33ff 	movlt.w	r3, #4294967295
 800b522:	9305      	str	r3, [sp, #20]
 800b524:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800b5e0 <_svfiprintf_r+0x1ec>
 800b528:	2203      	movs	r2, #3
 800b52a:	4650      	mov	r0, sl
 800b52c:	7821      	ldrb	r1, [r4, #0]
 800b52e:	f7fe fc16 	bl	8009d5e <memchr>
 800b532:	b138      	cbz	r0, 800b544 <_svfiprintf_r+0x150>
 800b534:	2240      	movs	r2, #64	; 0x40
 800b536:	9b04      	ldr	r3, [sp, #16]
 800b538:	eba0 000a 	sub.w	r0, r0, sl
 800b53c:	4082      	lsls	r2, r0
 800b53e:	4313      	orrs	r3, r2
 800b540:	3401      	adds	r4, #1
 800b542:	9304      	str	r3, [sp, #16]
 800b544:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b548:	2206      	movs	r2, #6
 800b54a:	4826      	ldr	r0, [pc, #152]	; (800b5e4 <_svfiprintf_r+0x1f0>)
 800b54c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b550:	f7fe fc05 	bl	8009d5e <memchr>
 800b554:	2800      	cmp	r0, #0
 800b556:	d038      	beq.n	800b5ca <_svfiprintf_r+0x1d6>
 800b558:	4b23      	ldr	r3, [pc, #140]	; (800b5e8 <_svfiprintf_r+0x1f4>)
 800b55a:	bb1b      	cbnz	r3, 800b5a4 <_svfiprintf_r+0x1b0>
 800b55c:	9b03      	ldr	r3, [sp, #12]
 800b55e:	3307      	adds	r3, #7
 800b560:	f023 0307 	bic.w	r3, r3, #7
 800b564:	3308      	adds	r3, #8
 800b566:	9303      	str	r3, [sp, #12]
 800b568:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b56a:	4433      	add	r3, r6
 800b56c:	9309      	str	r3, [sp, #36]	; 0x24
 800b56e:	e768      	b.n	800b442 <_svfiprintf_r+0x4e>
 800b570:	460c      	mov	r4, r1
 800b572:	2001      	movs	r0, #1
 800b574:	fb0c 3202 	mla	r2, ip, r2, r3
 800b578:	e7a6      	b.n	800b4c8 <_svfiprintf_r+0xd4>
 800b57a:	2300      	movs	r3, #0
 800b57c:	f04f 0c0a 	mov.w	ip, #10
 800b580:	4619      	mov	r1, r3
 800b582:	3401      	adds	r4, #1
 800b584:	9305      	str	r3, [sp, #20]
 800b586:	4620      	mov	r0, r4
 800b588:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b58c:	3a30      	subs	r2, #48	; 0x30
 800b58e:	2a09      	cmp	r2, #9
 800b590:	d903      	bls.n	800b59a <_svfiprintf_r+0x1a6>
 800b592:	2b00      	cmp	r3, #0
 800b594:	d0c6      	beq.n	800b524 <_svfiprintf_r+0x130>
 800b596:	9105      	str	r1, [sp, #20]
 800b598:	e7c4      	b.n	800b524 <_svfiprintf_r+0x130>
 800b59a:	4604      	mov	r4, r0
 800b59c:	2301      	movs	r3, #1
 800b59e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b5a2:	e7f0      	b.n	800b586 <_svfiprintf_r+0x192>
 800b5a4:	ab03      	add	r3, sp, #12
 800b5a6:	9300      	str	r3, [sp, #0]
 800b5a8:	462a      	mov	r2, r5
 800b5aa:	4638      	mov	r0, r7
 800b5ac:	4b0f      	ldr	r3, [pc, #60]	; (800b5ec <_svfiprintf_r+0x1f8>)
 800b5ae:	a904      	add	r1, sp, #16
 800b5b0:	f7fd fd5c 	bl	800906c <_printf_float>
 800b5b4:	1c42      	adds	r2, r0, #1
 800b5b6:	4606      	mov	r6, r0
 800b5b8:	d1d6      	bne.n	800b568 <_svfiprintf_r+0x174>
 800b5ba:	89ab      	ldrh	r3, [r5, #12]
 800b5bc:	065b      	lsls	r3, r3, #25
 800b5be:	f53f af2d 	bmi.w	800b41c <_svfiprintf_r+0x28>
 800b5c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b5c4:	b01d      	add	sp, #116	; 0x74
 800b5c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5ca:	ab03      	add	r3, sp, #12
 800b5cc:	9300      	str	r3, [sp, #0]
 800b5ce:	462a      	mov	r2, r5
 800b5d0:	4638      	mov	r0, r7
 800b5d2:	4b06      	ldr	r3, [pc, #24]	; (800b5ec <_svfiprintf_r+0x1f8>)
 800b5d4:	a904      	add	r1, sp, #16
 800b5d6:	f7fd ffe9 	bl	80095ac <_printf_i>
 800b5da:	e7eb      	b.n	800b5b4 <_svfiprintf_r+0x1c0>
 800b5dc:	0800d82c 	.word	0x0800d82c
 800b5e0:	0800d832 	.word	0x0800d832
 800b5e4:	0800d836 	.word	0x0800d836
 800b5e8:	0800906d 	.word	0x0800906d
 800b5ec:	0800b341 	.word	0x0800b341

0800b5f0 <__sfputc_r>:
 800b5f0:	6893      	ldr	r3, [r2, #8]
 800b5f2:	b410      	push	{r4}
 800b5f4:	3b01      	subs	r3, #1
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	6093      	str	r3, [r2, #8]
 800b5fa:	da07      	bge.n	800b60c <__sfputc_r+0x1c>
 800b5fc:	6994      	ldr	r4, [r2, #24]
 800b5fe:	42a3      	cmp	r3, r4
 800b600:	db01      	blt.n	800b606 <__sfputc_r+0x16>
 800b602:	290a      	cmp	r1, #10
 800b604:	d102      	bne.n	800b60c <__sfputc_r+0x1c>
 800b606:	bc10      	pop	{r4}
 800b608:	f7fe ba85 	b.w	8009b16 <__swbuf_r>
 800b60c:	6813      	ldr	r3, [r2, #0]
 800b60e:	1c58      	adds	r0, r3, #1
 800b610:	6010      	str	r0, [r2, #0]
 800b612:	7019      	strb	r1, [r3, #0]
 800b614:	4608      	mov	r0, r1
 800b616:	bc10      	pop	{r4}
 800b618:	4770      	bx	lr

0800b61a <__sfputs_r>:
 800b61a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b61c:	4606      	mov	r6, r0
 800b61e:	460f      	mov	r7, r1
 800b620:	4614      	mov	r4, r2
 800b622:	18d5      	adds	r5, r2, r3
 800b624:	42ac      	cmp	r4, r5
 800b626:	d101      	bne.n	800b62c <__sfputs_r+0x12>
 800b628:	2000      	movs	r0, #0
 800b62a:	e007      	b.n	800b63c <__sfputs_r+0x22>
 800b62c:	463a      	mov	r2, r7
 800b62e:	4630      	mov	r0, r6
 800b630:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b634:	f7ff ffdc 	bl	800b5f0 <__sfputc_r>
 800b638:	1c43      	adds	r3, r0, #1
 800b63a:	d1f3      	bne.n	800b624 <__sfputs_r+0xa>
 800b63c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b640 <_vfiprintf_r>:
 800b640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b644:	460d      	mov	r5, r1
 800b646:	4614      	mov	r4, r2
 800b648:	4698      	mov	r8, r3
 800b64a:	4606      	mov	r6, r0
 800b64c:	b09d      	sub	sp, #116	; 0x74
 800b64e:	b118      	cbz	r0, 800b658 <_vfiprintf_r+0x18>
 800b650:	6a03      	ldr	r3, [r0, #32]
 800b652:	b90b      	cbnz	r3, 800b658 <_vfiprintf_r+0x18>
 800b654:	f7fe f958 	bl	8009908 <__sinit>
 800b658:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b65a:	07d9      	lsls	r1, r3, #31
 800b65c:	d405      	bmi.n	800b66a <_vfiprintf_r+0x2a>
 800b65e:	89ab      	ldrh	r3, [r5, #12]
 800b660:	059a      	lsls	r2, r3, #22
 800b662:	d402      	bmi.n	800b66a <_vfiprintf_r+0x2a>
 800b664:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b666:	f7fe fb78 	bl	8009d5a <__retarget_lock_acquire_recursive>
 800b66a:	89ab      	ldrh	r3, [r5, #12]
 800b66c:	071b      	lsls	r3, r3, #28
 800b66e:	d501      	bpl.n	800b674 <_vfiprintf_r+0x34>
 800b670:	692b      	ldr	r3, [r5, #16]
 800b672:	b99b      	cbnz	r3, 800b69c <_vfiprintf_r+0x5c>
 800b674:	4629      	mov	r1, r5
 800b676:	4630      	mov	r0, r6
 800b678:	f7fe fa8a 	bl	8009b90 <__swsetup_r>
 800b67c:	b170      	cbz	r0, 800b69c <_vfiprintf_r+0x5c>
 800b67e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b680:	07dc      	lsls	r4, r3, #31
 800b682:	d504      	bpl.n	800b68e <_vfiprintf_r+0x4e>
 800b684:	f04f 30ff 	mov.w	r0, #4294967295
 800b688:	b01d      	add	sp, #116	; 0x74
 800b68a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b68e:	89ab      	ldrh	r3, [r5, #12]
 800b690:	0598      	lsls	r0, r3, #22
 800b692:	d4f7      	bmi.n	800b684 <_vfiprintf_r+0x44>
 800b694:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b696:	f7fe fb61 	bl	8009d5c <__retarget_lock_release_recursive>
 800b69a:	e7f3      	b.n	800b684 <_vfiprintf_r+0x44>
 800b69c:	2300      	movs	r3, #0
 800b69e:	9309      	str	r3, [sp, #36]	; 0x24
 800b6a0:	2320      	movs	r3, #32
 800b6a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b6a6:	2330      	movs	r3, #48	; 0x30
 800b6a8:	f04f 0901 	mov.w	r9, #1
 800b6ac:	f8cd 800c 	str.w	r8, [sp, #12]
 800b6b0:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800b860 <_vfiprintf_r+0x220>
 800b6b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b6b8:	4623      	mov	r3, r4
 800b6ba:	469a      	mov	sl, r3
 800b6bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b6c0:	b10a      	cbz	r2, 800b6c6 <_vfiprintf_r+0x86>
 800b6c2:	2a25      	cmp	r2, #37	; 0x25
 800b6c4:	d1f9      	bne.n	800b6ba <_vfiprintf_r+0x7a>
 800b6c6:	ebba 0b04 	subs.w	fp, sl, r4
 800b6ca:	d00b      	beq.n	800b6e4 <_vfiprintf_r+0xa4>
 800b6cc:	465b      	mov	r3, fp
 800b6ce:	4622      	mov	r2, r4
 800b6d0:	4629      	mov	r1, r5
 800b6d2:	4630      	mov	r0, r6
 800b6d4:	f7ff ffa1 	bl	800b61a <__sfputs_r>
 800b6d8:	3001      	adds	r0, #1
 800b6da:	f000 80a9 	beq.w	800b830 <_vfiprintf_r+0x1f0>
 800b6de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b6e0:	445a      	add	r2, fp
 800b6e2:	9209      	str	r2, [sp, #36]	; 0x24
 800b6e4:	f89a 3000 	ldrb.w	r3, [sl]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	f000 80a1 	beq.w	800b830 <_vfiprintf_r+0x1f0>
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	f04f 32ff 	mov.w	r2, #4294967295
 800b6f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b6f8:	f10a 0a01 	add.w	sl, sl, #1
 800b6fc:	9304      	str	r3, [sp, #16]
 800b6fe:	9307      	str	r3, [sp, #28]
 800b700:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b704:	931a      	str	r3, [sp, #104]	; 0x68
 800b706:	4654      	mov	r4, sl
 800b708:	2205      	movs	r2, #5
 800b70a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b70e:	4854      	ldr	r0, [pc, #336]	; (800b860 <_vfiprintf_r+0x220>)
 800b710:	f7fe fb25 	bl	8009d5e <memchr>
 800b714:	9a04      	ldr	r2, [sp, #16]
 800b716:	b9d8      	cbnz	r0, 800b750 <_vfiprintf_r+0x110>
 800b718:	06d1      	lsls	r1, r2, #27
 800b71a:	bf44      	itt	mi
 800b71c:	2320      	movmi	r3, #32
 800b71e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b722:	0713      	lsls	r3, r2, #28
 800b724:	bf44      	itt	mi
 800b726:	232b      	movmi	r3, #43	; 0x2b
 800b728:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b72c:	f89a 3000 	ldrb.w	r3, [sl]
 800b730:	2b2a      	cmp	r3, #42	; 0x2a
 800b732:	d015      	beq.n	800b760 <_vfiprintf_r+0x120>
 800b734:	4654      	mov	r4, sl
 800b736:	2000      	movs	r0, #0
 800b738:	f04f 0c0a 	mov.w	ip, #10
 800b73c:	9a07      	ldr	r2, [sp, #28]
 800b73e:	4621      	mov	r1, r4
 800b740:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b744:	3b30      	subs	r3, #48	; 0x30
 800b746:	2b09      	cmp	r3, #9
 800b748:	d94d      	bls.n	800b7e6 <_vfiprintf_r+0x1a6>
 800b74a:	b1b0      	cbz	r0, 800b77a <_vfiprintf_r+0x13a>
 800b74c:	9207      	str	r2, [sp, #28]
 800b74e:	e014      	b.n	800b77a <_vfiprintf_r+0x13a>
 800b750:	eba0 0308 	sub.w	r3, r0, r8
 800b754:	fa09 f303 	lsl.w	r3, r9, r3
 800b758:	4313      	orrs	r3, r2
 800b75a:	46a2      	mov	sl, r4
 800b75c:	9304      	str	r3, [sp, #16]
 800b75e:	e7d2      	b.n	800b706 <_vfiprintf_r+0xc6>
 800b760:	9b03      	ldr	r3, [sp, #12]
 800b762:	1d19      	adds	r1, r3, #4
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	9103      	str	r1, [sp, #12]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	bfbb      	ittet	lt
 800b76c:	425b      	neglt	r3, r3
 800b76e:	f042 0202 	orrlt.w	r2, r2, #2
 800b772:	9307      	strge	r3, [sp, #28]
 800b774:	9307      	strlt	r3, [sp, #28]
 800b776:	bfb8      	it	lt
 800b778:	9204      	strlt	r2, [sp, #16]
 800b77a:	7823      	ldrb	r3, [r4, #0]
 800b77c:	2b2e      	cmp	r3, #46	; 0x2e
 800b77e:	d10c      	bne.n	800b79a <_vfiprintf_r+0x15a>
 800b780:	7863      	ldrb	r3, [r4, #1]
 800b782:	2b2a      	cmp	r3, #42	; 0x2a
 800b784:	d134      	bne.n	800b7f0 <_vfiprintf_r+0x1b0>
 800b786:	9b03      	ldr	r3, [sp, #12]
 800b788:	3402      	adds	r4, #2
 800b78a:	1d1a      	adds	r2, r3, #4
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	9203      	str	r2, [sp, #12]
 800b790:	2b00      	cmp	r3, #0
 800b792:	bfb8      	it	lt
 800b794:	f04f 33ff 	movlt.w	r3, #4294967295
 800b798:	9305      	str	r3, [sp, #20]
 800b79a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b864 <_vfiprintf_r+0x224>
 800b79e:	2203      	movs	r2, #3
 800b7a0:	4650      	mov	r0, sl
 800b7a2:	7821      	ldrb	r1, [r4, #0]
 800b7a4:	f7fe fadb 	bl	8009d5e <memchr>
 800b7a8:	b138      	cbz	r0, 800b7ba <_vfiprintf_r+0x17a>
 800b7aa:	2240      	movs	r2, #64	; 0x40
 800b7ac:	9b04      	ldr	r3, [sp, #16]
 800b7ae:	eba0 000a 	sub.w	r0, r0, sl
 800b7b2:	4082      	lsls	r2, r0
 800b7b4:	4313      	orrs	r3, r2
 800b7b6:	3401      	adds	r4, #1
 800b7b8:	9304      	str	r3, [sp, #16]
 800b7ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7be:	2206      	movs	r2, #6
 800b7c0:	4829      	ldr	r0, [pc, #164]	; (800b868 <_vfiprintf_r+0x228>)
 800b7c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b7c6:	f7fe faca 	bl	8009d5e <memchr>
 800b7ca:	2800      	cmp	r0, #0
 800b7cc:	d03f      	beq.n	800b84e <_vfiprintf_r+0x20e>
 800b7ce:	4b27      	ldr	r3, [pc, #156]	; (800b86c <_vfiprintf_r+0x22c>)
 800b7d0:	bb1b      	cbnz	r3, 800b81a <_vfiprintf_r+0x1da>
 800b7d2:	9b03      	ldr	r3, [sp, #12]
 800b7d4:	3307      	adds	r3, #7
 800b7d6:	f023 0307 	bic.w	r3, r3, #7
 800b7da:	3308      	adds	r3, #8
 800b7dc:	9303      	str	r3, [sp, #12]
 800b7de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7e0:	443b      	add	r3, r7
 800b7e2:	9309      	str	r3, [sp, #36]	; 0x24
 800b7e4:	e768      	b.n	800b6b8 <_vfiprintf_r+0x78>
 800b7e6:	460c      	mov	r4, r1
 800b7e8:	2001      	movs	r0, #1
 800b7ea:	fb0c 3202 	mla	r2, ip, r2, r3
 800b7ee:	e7a6      	b.n	800b73e <_vfiprintf_r+0xfe>
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	f04f 0c0a 	mov.w	ip, #10
 800b7f6:	4619      	mov	r1, r3
 800b7f8:	3401      	adds	r4, #1
 800b7fa:	9305      	str	r3, [sp, #20]
 800b7fc:	4620      	mov	r0, r4
 800b7fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b802:	3a30      	subs	r2, #48	; 0x30
 800b804:	2a09      	cmp	r2, #9
 800b806:	d903      	bls.n	800b810 <_vfiprintf_r+0x1d0>
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d0c6      	beq.n	800b79a <_vfiprintf_r+0x15a>
 800b80c:	9105      	str	r1, [sp, #20]
 800b80e:	e7c4      	b.n	800b79a <_vfiprintf_r+0x15a>
 800b810:	4604      	mov	r4, r0
 800b812:	2301      	movs	r3, #1
 800b814:	fb0c 2101 	mla	r1, ip, r1, r2
 800b818:	e7f0      	b.n	800b7fc <_vfiprintf_r+0x1bc>
 800b81a:	ab03      	add	r3, sp, #12
 800b81c:	9300      	str	r3, [sp, #0]
 800b81e:	462a      	mov	r2, r5
 800b820:	4630      	mov	r0, r6
 800b822:	4b13      	ldr	r3, [pc, #76]	; (800b870 <_vfiprintf_r+0x230>)
 800b824:	a904      	add	r1, sp, #16
 800b826:	f7fd fc21 	bl	800906c <_printf_float>
 800b82a:	4607      	mov	r7, r0
 800b82c:	1c78      	adds	r0, r7, #1
 800b82e:	d1d6      	bne.n	800b7de <_vfiprintf_r+0x19e>
 800b830:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b832:	07d9      	lsls	r1, r3, #31
 800b834:	d405      	bmi.n	800b842 <_vfiprintf_r+0x202>
 800b836:	89ab      	ldrh	r3, [r5, #12]
 800b838:	059a      	lsls	r2, r3, #22
 800b83a:	d402      	bmi.n	800b842 <_vfiprintf_r+0x202>
 800b83c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b83e:	f7fe fa8d 	bl	8009d5c <__retarget_lock_release_recursive>
 800b842:	89ab      	ldrh	r3, [r5, #12]
 800b844:	065b      	lsls	r3, r3, #25
 800b846:	f53f af1d 	bmi.w	800b684 <_vfiprintf_r+0x44>
 800b84a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b84c:	e71c      	b.n	800b688 <_vfiprintf_r+0x48>
 800b84e:	ab03      	add	r3, sp, #12
 800b850:	9300      	str	r3, [sp, #0]
 800b852:	462a      	mov	r2, r5
 800b854:	4630      	mov	r0, r6
 800b856:	4b06      	ldr	r3, [pc, #24]	; (800b870 <_vfiprintf_r+0x230>)
 800b858:	a904      	add	r1, sp, #16
 800b85a:	f7fd fea7 	bl	80095ac <_printf_i>
 800b85e:	e7e4      	b.n	800b82a <_vfiprintf_r+0x1ea>
 800b860:	0800d82c 	.word	0x0800d82c
 800b864:	0800d832 	.word	0x0800d832
 800b868:	0800d836 	.word	0x0800d836
 800b86c:	0800906d 	.word	0x0800906d
 800b870:	0800b61b 	.word	0x0800b61b

0800b874 <__sflush_r>:
 800b874:	898a      	ldrh	r2, [r1, #12]
 800b876:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b878:	4605      	mov	r5, r0
 800b87a:	0710      	lsls	r0, r2, #28
 800b87c:	460c      	mov	r4, r1
 800b87e:	d457      	bmi.n	800b930 <__sflush_r+0xbc>
 800b880:	684b      	ldr	r3, [r1, #4]
 800b882:	2b00      	cmp	r3, #0
 800b884:	dc04      	bgt.n	800b890 <__sflush_r+0x1c>
 800b886:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b888:	2b00      	cmp	r3, #0
 800b88a:	dc01      	bgt.n	800b890 <__sflush_r+0x1c>
 800b88c:	2000      	movs	r0, #0
 800b88e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b890:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b892:	2e00      	cmp	r6, #0
 800b894:	d0fa      	beq.n	800b88c <__sflush_r+0x18>
 800b896:	2300      	movs	r3, #0
 800b898:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b89c:	682f      	ldr	r7, [r5, #0]
 800b89e:	6a21      	ldr	r1, [r4, #32]
 800b8a0:	602b      	str	r3, [r5, #0]
 800b8a2:	d032      	beq.n	800b90a <__sflush_r+0x96>
 800b8a4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b8a6:	89a3      	ldrh	r3, [r4, #12]
 800b8a8:	075a      	lsls	r2, r3, #29
 800b8aa:	d505      	bpl.n	800b8b8 <__sflush_r+0x44>
 800b8ac:	6863      	ldr	r3, [r4, #4]
 800b8ae:	1ac0      	subs	r0, r0, r3
 800b8b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b8b2:	b10b      	cbz	r3, 800b8b8 <__sflush_r+0x44>
 800b8b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b8b6:	1ac0      	subs	r0, r0, r3
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	4602      	mov	r2, r0
 800b8bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b8be:	4628      	mov	r0, r5
 800b8c0:	6a21      	ldr	r1, [r4, #32]
 800b8c2:	47b0      	blx	r6
 800b8c4:	1c43      	adds	r3, r0, #1
 800b8c6:	89a3      	ldrh	r3, [r4, #12]
 800b8c8:	d106      	bne.n	800b8d8 <__sflush_r+0x64>
 800b8ca:	6829      	ldr	r1, [r5, #0]
 800b8cc:	291d      	cmp	r1, #29
 800b8ce:	d82b      	bhi.n	800b928 <__sflush_r+0xb4>
 800b8d0:	4a28      	ldr	r2, [pc, #160]	; (800b974 <__sflush_r+0x100>)
 800b8d2:	410a      	asrs	r2, r1
 800b8d4:	07d6      	lsls	r6, r2, #31
 800b8d6:	d427      	bmi.n	800b928 <__sflush_r+0xb4>
 800b8d8:	2200      	movs	r2, #0
 800b8da:	6062      	str	r2, [r4, #4]
 800b8dc:	6922      	ldr	r2, [r4, #16]
 800b8de:	04d9      	lsls	r1, r3, #19
 800b8e0:	6022      	str	r2, [r4, #0]
 800b8e2:	d504      	bpl.n	800b8ee <__sflush_r+0x7a>
 800b8e4:	1c42      	adds	r2, r0, #1
 800b8e6:	d101      	bne.n	800b8ec <__sflush_r+0x78>
 800b8e8:	682b      	ldr	r3, [r5, #0]
 800b8ea:	b903      	cbnz	r3, 800b8ee <__sflush_r+0x7a>
 800b8ec:	6560      	str	r0, [r4, #84]	; 0x54
 800b8ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b8f0:	602f      	str	r7, [r5, #0]
 800b8f2:	2900      	cmp	r1, #0
 800b8f4:	d0ca      	beq.n	800b88c <__sflush_r+0x18>
 800b8f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b8fa:	4299      	cmp	r1, r3
 800b8fc:	d002      	beq.n	800b904 <__sflush_r+0x90>
 800b8fe:	4628      	mov	r0, r5
 800b900:	f7ff f8aa 	bl	800aa58 <_free_r>
 800b904:	2000      	movs	r0, #0
 800b906:	6360      	str	r0, [r4, #52]	; 0x34
 800b908:	e7c1      	b.n	800b88e <__sflush_r+0x1a>
 800b90a:	2301      	movs	r3, #1
 800b90c:	4628      	mov	r0, r5
 800b90e:	47b0      	blx	r6
 800b910:	1c41      	adds	r1, r0, #1
 800b912:	d1c8      	bne.n	800b8a6 <__sflush_r+0x32>
 800b914:	682b      	ldr	r3, [r5, #0]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d0c5      	beq.n	800b8a6 <__sflush_r+0x32>
 800b91a:	2b1d      	cmp	r3, #29
 800b91c:	d001      	beq.n	800b922 <__sflush_r+0xae>
 800b91e:	2b16      	cmp	r3, #22
 800b920:	d101      	bne.n	800b926 <__sflush_r+0xb2>
 800b922:	602f      	str	r7, [r5, #0]
 800b924:	e7b2      	b.n	800b88c <__sflush_r+0x18>
 800b926:	89a3      	ldrh	r3, [r4, #12]
 800b928:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b92c:	81a3      	strh	r3, [r4, #12]
 800b92e:	e7ae      	b.n	800b88e <__sflush_r+0x1a>
 800b930:	690f      	ldr	r7, [r1, #16]
 800b932:	2f00      	cmp	r7, #0
 800b934:	d0aa      	beq.n	800b88c <__sflush_r+0x18>
 800b936:	0793      	lsls	r3, r2, #30
 800b938:	bf18      	it	ne
 800b93a:	2300      	movne	r3, #0
 800b93c:	680e      	ldr	r6, [r1, #0]
 800b93e:	bf08      	it	eq
 800b940:	694b      	ldreq	r3, [r1, #20]
 800b942:	1bf6      	subs	r6, r6, r7
 800b944:	600f      	str	r7, [r1, #0]
 800b946:	608b      	str	r3, [r1, #8]
 800b948:	2e00      	cmp	r6, #0
 800b94a:	dd9f      	ble.n	800b88c <__sflush_r+0x18>
 800b94c:	4633      	mov	r3, r6
 800b94e:	463a      	mov	r2, r7
 800b950:	4628      	mov	r0, r5
 800b952:	6a21      	ldr	r1, [r4, #32]
 800b954:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800b958:	47e0      	blx	ip
 800b95a:	2800      	cmp	r0, #0
 800b95c:	dc06      	bgt.n	800b96c <__sflush_r+0xf8>
 800b95e:	89a3      	ldrh	r3, [r4, #12]
 800b960:	f04f 30ff 	mov.w	r0, #4294967295
 800b964:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b968:	81a3      	strh	r3, [r4, #12]
 800b96a:	e790      	b.n	800b88e <__sflush_r+0x1a>
 800b96c:	4407      	add	r7, r0
 800b96e:	1a36      	subs	r6, r6, r0
 800b970:	e7ea      	b.n	800b948 <__sflush_r+0xd4>
 800b972:	bf00      	nop
 800b974:	dfbffffe 	.word	0xdfbffffe

0800b978 <_fflush_r>:
 800b978:	b538      	push	{r3, r4, r5, lr}
 800b97a:	690b      	ldr	r3, [r1, #16]
 800b97c:	4605      	mov	r5, r0
 800b97e:	460c      	mov	r4, r1
 800b980:	b913      	cbnz	r3, 800b988 <_fflush_r+0x10>
 800b982:	2500      	movs	r5, #0
 800b984:	4628      	mov	r0, r5
 800b986:	bd38      	pop	{r3, r4, r5, pc}
 800b988:	b118      	cbz	r0, 800b992 <_fflush_r+0x1a>
 800b98a:	6a03      	ldr	r3, [r0, #32]
 800b98c:	b90b      	cbnz	r3, 800b992 <_fflush_r+0x1a>
 800b98e:	f7fd ffbb 	bl	8009908 <__sinit>
 800b992:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d0f3      	beq.n	800b982 <_fflush_r+0xa>
 800b99a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b99c:	07d0      	lsls	r0, r2, #31
 800b99e:	d404      	bmi.n	800b9aa <_fflush_r+0x32>
 800b9a0:	0599      	lsls	r1, r3, #22
 800b9a2:	d402      	bmi.n	800b9aa <_fflush_r+0x32>
 800b9a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b9a6:	f7fe f9d8 	bl	8009d5a <__retarget_lock_acquire_recursive>
 800b9aa:	4628      	mov	r0, r5
 800b9ac:	4621      	mov	r1, r4
 800b9ae:	f7ff ff61 	bl	800b874 <__sflush_r>
 800b9b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b9b4:	4605      	mov	r5, r0
 800b9b6:	07da      	lsls	r2, r3, #31
 800b9b8:	d4e4      	bmi.n	800b984 <_fflush_r+0xc>
 800b9ba:	89a3      	ldrh	r3, [r4, #12]
 800b9bc:	059b      	lsls	r3, r3, #22
 800b9be:	d4e1      	bmi.n	800b984 <_fflush_r+0xc>
 800b9c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b9c2:	f7fe f9cb 	bl	8009d5c <__retarget_lock_release_recursive>
 800b9c6:	e7dd      	b.n	800b984 <_fflush_r+0xc>

0800b9c8 <__swhatbuf_r>:
 800b9c8:	b570      	push	{r4, r5, r6, lr}
 800b9ca:	460c      	mov	r4, r1
 800b9cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9d0:	4615      	mov	r5, r2
 800b9d2:	2900      	cmp	r1, #0
 800b9d4:	461e      	mov	r6, r3
 800b9d6:	b096      	sub	sp, #88	; 0x58
 800b9d8:	da0c      	bge.n	800b9f4 <__swhatbuf_r+0x2c>
 800b9da:	89a3      	ldrh	r3, [r4, #12]
 800b9dc:	2100      	movs	r1, #0
 800b9de:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b9e2:	bf0c      	ite	eq
 800b9e4:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b9e8:	2340      	movne	r3, #64	; 0x40
 800b9ea:	2000      	movs	r0, #0
 800b9ec:	6031      	str	r1, [r6, #0]
 800b9ee:	602b      	str	r3, [r5, #0]
 800b9f0:	b016      	add	sp, #88	; 0x58
 800b9f2:	bd70      	pop	{r4, r5, r6, pc}
 800b9f4:	466a      	mov	r2, sp
 800b9f6:	f000 f863 	bl	800bac0 <_fstat_r>
 800b9fa:	2800      	cmp	r0, #0
 800b9fc:	dbed      	blt.n	800b9da <__swhatbuf_r+0x12>
 800b9fe:	9901      	ldr	r1, [sp, #4]
 800ba00:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ba04:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ba08:	4259      	negs	r1, r3
 800ba0a:	4159      	adcs	r1, r3
 800ba0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba10:	e7eb      	b.n	800b9ea <__swhatbuf_r+0x22>

0800ba12 <__smakebuf_r>:
 800ba12:	898b      	ldrh	r3, [r1, #12]
 800ba14:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ba16:	079d      	lsls	r5, r3, #30
 800ba18:	4606      	mov	r6, r0
 800ba1a:	460c      	mov	r4, r1
 800ba1c:	d507      	bpl.n	800ba2e <__smakebuf_r+0x1c>
 800ba1e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ba22:	6023      	str	r3, [r4, #0]
 800ba24:	6123      	str	r3, [r4, #16]
 800ba26:	2301      	movs	r3, #1
 800ba28:	6163      	str	r3, [r4, #20]
 800ba2a:	b002      	add	sp, #8
 800ba2c:	bd70      	pop	{r4, r5, r6, pc}
 800ba2e:	466a      	mov	r2, sp
 800ba30:	ab01      	add	r3, sp, #4
 800ba32:	f7ff ffc9 	bl	800b9c8 <__swhatbuf_r>
 800ba36:	9900      	ldr	r1, [sp, #0]
 800ba38:	4605      	mov	r5, r0
 800ba3a:	4630      	mov	r0, r6
 800ba3c:	f7ff f87c 	bl	800ab38 <_malloc_r>
 800ba40:	b948      	cbnz	r0, 800ba56 <__smakebuf_r+0x44>
 800ba42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba46:	059a      	lsls	r2, r3, #22
 800ba48:	d4ef      	bmi.n	800ba2a <__smakebuf_r+0x18>
 800ba4a:	f023 0303 	bic.w	r3, r3, #3
 800ba4e:	f043 0302 	orr.w	r3, r3, #2
 800ba52:	81a3      	strh	r3, [r4, #12]
 800ba54:	e7e3      	b.n	800ba1e <__smakebuf_r+0xc>
 800ba56:	89a3      	ldrh	r3, [r4, #12]
 800ba58:	6020      	str	r0, [r4, #0]
 800ba5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba5e:	81a3      	strh	r3, [r4, #12]
 800ba60:	9b00      	ldr	r3, [sp, #0]
 800ba62:	6120      	str	r0, [r4, #16]
 800ba64:	6163      	str	r3, [r4, #20]
 800ba66:	9b01      	ldr	r3, [sp, #4]
 800ba68:	b15b      	cbz	r3, 800ba82 <__smakebuf_r+0x70>
 800ba6a:	4630      	mov	r0, r6
 800ba6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba70:	f000 f838 	bl	800bae4 <_isatty_r>
 800ba74:	b128      	cbz	r0, 800ba82 <__smakebuf_r+0x70>
 800ba76:	89a3      	ldrh	r3, [r4, #12]
 800ba78:	f023 0303 	bic.w	r3, r3, #3
 800ba7c:	f043 0301 	orr.w	r3, r3, #1
 800ba80:	81a3      	strh	r3, [r4, #12]
 800ba82:	89a3      	ldrh	r3, [r4, #12]
 800ba84:	431d      	orrs	r5, r3
 800ba86:	81a5      	strh	r5, [r4, #12]
 800ba88:	e7cf      	b.n	800ba2a <__smakebuf_r+0x18>

0800ba8a <memmove>:
 800ba8a:	4288      	cmp	r0, r1
 800ba8c:	b510      	push	{r4, lr}
 800ba8e:	eb01 0402 	add.w	r4, r1, r2
 800ba92:	d902      	bls.n	800ba9a <memmove+0x10>
 800ba94:	4284      	cmp	r4, r0
 800ba96:	4623      	mov	r3, r4
 800ba98:	d807      	bhi.n	800baaa <memmove+0x20>
 800ba9a:	1e43      	subs	r3, r0, #1
 800ba9c:	42a1      	cmp	r1, r4
 800ba9e:	d008      	beq.n	800bab2 <memmove+0x28>
 800baa0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800baa4:	f803 2f01 	strb.w	r2, [r3, #1]!
 800baa8:	e7f8      	b.n	800ba9c <memmove+0x12>
 800baaa:	4601      	mov	r1, r0
 800baac:	4402      	add	r2, r0
 800baae:	428a      	cmp	r2, r1
 800bab0:	d100      	bne.n	800bab4 <memmove+0x2a>
 800bab2:	bd10      	pop	{r4, pc}
 800bab4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bab8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800babc:	e7f7      	b.n	800baae <memmove+0x24>
	...

0800bac0 <_fstat_r>:
 800bac0:	b538      	push	{r3, r4, r5, lr}
 800bac2:	2300      	movs	r3, #0
 800bac4:	4d06      	ldr	r5, [pc, #24]	; (800bae0 <_fstat_r+0x20>)
 800bac6:	4604      	mov	r4, r0
 800bac8:	4608      	mov	r0, r1
 800baca:	4611      	mov	r1, r2
 800bacc:	602b      	str	r3, [r5, #0]
 800bace:	f7f6 fbe6 	bl	800229e <_fstat>
 800bad2:	1c43      	adds	r3, r0, #1
 800bad4:	d102      	bne.n	800badc <_fstat_r+0x1c>
 800bad6:	682b      	ldr	r3, [r5, #0]
 800bad8:	b103      	cbz	r3, 800badc <_fstat_r+0x1c>
 800bada:	6023      	str	r3, [r4, #0]
 800badc:	bd38      	pop	{r3, r4, r5, pc}
 800bade:	bf00      	nop
 800bae0:	20000470 	.word	0x20000470

0800bae4 <_isatty_r>:
 800bae4:	b538      	push	{r3, r4, r5, lr}
 800bae6:	2300      	movs	r3, #0
 800bae8:	4d05      	ldr	r5, [pc, #20]	; (800bb00 <_isatty_r+0x1c>)
 800baea:	4604      	mov	r4, r0
 800baec:	4608      	mov	r0, r1
 800baee:	602b      	str	r3, [r5, #0]
 800baf0:	f7f6 fbe4 	bl	80022bc <_isatty>
 800baf4:	1c43      	adds	r3, r0, #1
 800baf6:	d102      	bne.n	800bafe <_isatty_r+0x1a>
 800baf8:	682b      	ldr	r3, [r5, #0]
 800bafa:	b103      	cbz	r3, 800bafe <_isatty_r+0x1a>
 800bafc:	6023      	str	r3, [r4, #0]
 800bafe:	bd38      	pop	{r3, r4, r5, pc}
 800bb00:	20000470 	.word	0x20000470

0800bb04 <_sbrk_r>:
 800bb04:	b538      	push	{r3, r4, r5, lr}
 800bb06:	2300      	movs	r3, #0
 800bb08:	4d05      	ldr	r5, [pc, #20]	; (800bb20 <_sbrk_r+0x1c>)
 800bb0a:	4604      	mov	r4, r0
 800bb0c:	4608      	mov	r0, r1
 800bb0e:	602b      	str	r3, [r5, #0]
 800bb10:	f7f6 fbea 	bl	80022e8 <_sbrk>
 800bb14:	1c43      	adds	r3, r0, #1
 800bb16:	d102      	bne.n	800bb1e <_sbrk_r+0x1a>
 800bb18:	682b      	ldr	r3, [r5, #0]
 800bb1a:	b103      	cbz	r3, 800bb1e <_sbrk_r+0x1a>
 800bb1c:	6023      	str	r3, [r4, #0]
 800bb1e:	bd38      	pop	{r3, r4, r5, pc}
 800bb20:	20000470 	.word	0x20000470

0800bb24 <memcpy>:
 800bb24:	440a      	add	r2, r1
 800bb26:	4291      	cmp	r1, r2
 800bb28:	f100 33ff 	add.w	r3, r0, #4294967295
 800bb2c:	d100      	bne.n	800bb30 <memcpy+0xc>
 800bb2e:	4770      	bx	lr
 800bb30:	b510      	push	{r4, lr}
 800bb32:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb36:	4291      	cmp	r1, r2
 800bb38:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bb3c:	d1f9      	bne.n	800bb32 <memcpy+0xe>
 800bb3e:	bd10      	pop	{r4, pc}

0800bb40 <__assert_func>:
 800bb40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bb42:	4614      	mov	r4, r2
 800bb44:	461a      	mov	r2, r3
 800bb46:	4b09      	ldr	r3, [pc, #36]	; (800bb6c <__assert_func+0x2c>)
 800bb48:	4605      	mov	r5, r0
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	68d8      	ldr	r0, [r3, #12]
 800bb4e:	b14c      	cbz	r4, 800bb64 <__assert_func+0x24>
 800bb50:	4b07      	ldr	r3, [pc, #28]	; (800bb70 <__assert_func+0x30>)
 800bb52:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bb56:	9100      	str	r1, [sp, #0]
 800bb58:	462b      	mov	r3, r5
 800bb5a:	4906      	ldr	r1, [pc, #24]	; (800bb74 <__assert_func+0x34>)
 800bb5c:	f000 f870 	bl	800bc40 <fiprintf>
 800bb60:	f000 f880 	bl	800bc64 <abort>
 800bb64:	4b04      	ldr	r3, [pc, #16]	; (800bb78 <__assert_func+0x38>)
 800bb66:	461c      	mov	r4, r3
 800bb68:	e7f3      	b.n	800bb52 <__assert_func+0x12>
 800bb6a:	bf00      	nop
 800bb6c:	2000009c 	.word	0x2000009c
 800bb70:	0800d847 	.word	0x0800d847
 800bb74:	0800d854 	.word	0x0800d854
 800bb78:	0800d882 	.word	0x0800d882

0800bb7c <_calloc_r>:
 800bb7c:	b570      	push	{r4, r5, r6, lr}
 800bb7e:	fba1 5402 	umull	r5, r4, r1, r2
 800bb82:	b934      	cbnz	r4, 800bb92 <_calloc_r+0x16>
 800bb84:	4629      	mov	r1, r5
 800bb86:	f7fe ffd7 	bl	800ab38 <_malloc_r>
 800bb8a:	4606      	mov	r6, r0
 800bb8c:	b928      	cbnz	r0, 800bb9a <_calloc_r+0x1e>
 800bb8e:	4630      	mov	r0, r6
 800bb90:	bd70      	pop	{r4, r5, r6, pc}
 800bb92:	220c      	movs	r2, #12
 800bb94:	2600      	movs	r6, #0
 800bb96:	6002      	str	r2, [r0, #0]
 800bb98:	e7f9      	b.n	800bb8e <_calloc_r+0x12>
 800bb9a:	462a      	mov	r2, r5
 800bb9c:	4621      	mov	r1, r4
 800bb9e:	f7fe f85f 	bl	8009c60 <memset>
 800bba2:	e7f4      	b.n	800bb8e <_calloc_r+0x12>

0800bba4 <__ascii_mbtowc>:
 800bba4:	b082      	sub	sp, #8
 800bba6:	b901      	cbnz	r1, 800bbaa <__ascii_mbtowc+0x6>
 800bba8:	a901      	add	r1, sp, #4
 800bbaa:	b142      	cbz	r2, 800bbbe <__ascii_mbtowc+0x1a>
 800bbac:	b14b      	cbz	r3, 800bbc2 <__ascii_mbtowc+0x1e>
 800bbae:	7813      	ldrb	r3, [r2, #0]
 800bbb0:	600b      	str	r3, [r1, #0]
 800bbb2:	7812      	ldrb	r2, [r2, #0]
 800bbb4:	1e10      	subs	r0, r2, #0
 800bbb6:	bf18      	it	ne
 800bbb8:	2001      	movne	r0, #1
 800bbba:	b002      	add	sp, #8
 800bbbc:	4770      	bx	lr
 800bbbe:	4610      	mov	r0, r2
 800bbc0:	e7fb      	b.n	800bbba <__ascii_mbtowc+0x16>
 800bbc2:	f06f 0001 	mvn.w	r0, #1
 800bbc6:	e7f8      	b.n	800bbba <__ascii_mbtowc+0x16>

0800bbc8 <_realloc_r>:
 800bbc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbcc:	4680      	mov	r8, r0
 800bbce:	4614      	mov	r4, r2
 800bbd0:	460e      	mov	r6, r1
 800bbd2:	b921      	cbnz	r1, 800bbde <_realloc_r+0x16>
 800bbd4:	4611      	mov	r1, r2
 800bbd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bbda:	f7fe bfad 	b.w	800ab38 <_malloc_r>
 800bbde:	b92a      	cbnz	r2, 800bbec <_realloc_r+0x24>
 800bbe0:	f7fe ff3a 	bl	800aa58 <_free_r>
 800bbe4:	4625      	mov	r5, r4
 800bbe6:	4628      	mov	r0, r5
 800bbe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbec:	f000 f841 	bl	800bc72 <_malloc_usable_size_r>
 800bbf0:	4284      	cmp	r4, r0
 800bbf2:	4607      	mov	r7, r0
 800bbf4:	d802      	bhi.n	800bbfc <_realloc_r+0x34>
 800bbf6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bbfa:	d812      	bhi.n	800bc22 <_realloc_r+0x5a>
 800bbfc:	4621      	mov	r1, r4
 800bbfe:	4640      	mov	r0, r8
 800bc00:	f7fe ff9a 	bl	800ab38 <_malloc_r>
 800bc04:	4605      	mov	r5, r0
 800bc06:	2800      	cmp	r0, #0
 800bc08:	d0ed      	beq.n	800bbe6 <_realloc_r+0x1e>
 800bc0a:	42bc      	cmp	r4, r7
 800bc0c:	4622      	mov	r2, r4
 800bc0e:	4631      	mov	r1, r6
 800bc10:	bf28      	it	cs
 800bc12:	463a      	movcs	r2, r7
 800bc14:	f7ff ff86 	bl	800bb24 <memcpy>
 800bc18:	4631      	mov	r1, r6
 800bc1a:	4640      	mov	r0, r8
 800bc1c:	f7fe ff1c 	bl	800aa58 <_free_r>
 800bc20:	e7e1      	b.n	800bbe6 <_realloc_r+0x1e>
 800bc22:	4635      	mov	r5, r6
 800bc24:	e7df      	b.n	800bbe6 <_realloc_r+0x1e>

0800bc26 <__ascii_wctomb>:
 800bc26:	4603      	mov	r3, r0
 800bc28:	4608      	mov	r0, r1
 800bc2a:	b141      	cbz	r1, 800bc3e <__ascii_wctomb+0x18>
 800bc2c:	2aff      	cmp	r2, #255	; 0xff
 800bc2e:	d904      	bls.n	800bc3a <__ascii_wctomb+0x14>
 800bc30:	228a      	movs	r2, #138	; 0x8a
 800bc32:	f04f 30ff 	mov.w	r0, #4294967295
 800bc36:	601a      	str	r2, [r3, #0]
 800bc38:	4770      	bx	lr
 800bc3a:	2001      	movs	r0, #1
 800bc3c:	700a      	strb	r2, [r1, #0]
 800bc3e:	4770      	bx	lr

0800bc40 <fiprintf>:
 800bc40:	b40e      	push	{r1, r2, r3}
 800bc42:	b503      	push	{r0, r1, lr}
 800bc44:	4601      	mov	r1, r0
 800bc46:	ab03      	add	r3, sp, #12
 800bc48:	4805      	ldr	r0, [pc, #20]	; (800bc60 <fiprintf+0x20>)
 800bc4a:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc4e:	6800      	ldr	r0, [r0, #0]
 800bc50:	9301      	str	r3, [sp, #4]
 800bc52:	f7ff fcf5 	bl	800b640 <_vfiprintf_r>
 800bc56:	b002      	add	sp, #8
 800bc58:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc5c:	b003      	add	sp, #12
 800bc5e:	4770      	bx	lr
 800bc60:	2000009c 	.word	0x2000009c

0800bc64 <abort>:
 800bc64:	2006      	movs	r0, #6
 800bc66:	b508      	push	{r3, lr}
 800bc68:	f000 f834 	bl	800bcd4 <raise>
 800bc6c:	2001      	movs	r0, #1
 800bc6e:	f7f6 fac8 	bl	8002202 <_exit>

0800bc72 <_malloc_usable_size_r>:
 800bc72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc76:	1f18      	subs	r0, r3, #4
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	bfbc      	itt	lt
 800bc7c:	580b      	ldrlt	r3, [r1, r0]
 800bc7e:	18c0      	addlt	r0, r0, r3
 800bc80:	4770      	bx	lr

0800bc82 <_raise_r>:
 800bc82:	291f      	cmp	r1, #31
 800bc84:	b538      	push	{r3, r4, r5, lr}
 800bc86:	4604      	mov	r4, r0
 800bc88:	460d      	mov	r5, r1
 800bc8a:	d904      	bls.n	800bc96 <_raise_r+0x14>
 800bc8c:	2316      	movs	r3, #22
 800bc8e:	6003      	str	r3, [r0, #0]
 800bc90:	f04f 30ff 	mov.w	r0, #4294967295
 800bc94:	bd38      	pop	{r3, r4, r5, pc}
 800bc96:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800bc98:	b112      	cbz	r2, 800bca0 <_raise_r+0x1e>
 800bc9a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bc9e:	b94b      	cbnz	r3, 800bcb4 <_raise_r+0x32>
 800bca0:	4620      	mov	r0, r4
 800bca2:	f000 f831 	bl	800bd08 <_getpid_r>
 800bca6:	462a      	mov	r2, r5
 800bca8:	4601      	mov	r1, r0
 800bcaa:	4620      	mov	r0, r4
 800bcac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bcb0:	f000 b818 	b.w	800bce4 <_kill_r>
 800bcb4:	2b01      	cmp	r3, #1
 800bcb6:	d00a      	beq.n	800bcce <_raise_r+0x4c>
 800bcb8:	1c59      	adds	r1, r3, #1
 800bcba:	d103      	bne.n	800bcc4 <_raise_r+0x42>
 800bcbc:	2316      	movs	r3, #22
 800bcbe:	6003      	str	r3, [r0, #0]
 800bcc0:	2001      	movs	r0, #1
 800bcc2:	e7e7      	b.n	800bc94 <_raise_r+0x12>
 800bcc4:	2400      	movs	r4, #0
 800bcc6:	4628      	mov	r0, r5
 800bcc8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bccc:	4798      	blx	r3
 800bcce:	2000      	movs	r0, #0
 800bcd0:	e7e0      	b.n	800bc94 <_raise_r+0x12>
	...

0800bcd4 <raise>:
 800bcd4:	4b02      	ldr	r3, [pc, #8]	; (800bce0 <raise+0xc>)
 800bcd6:	4601      	mov	r1, r0
 800bcd8:	6818      	ldr	r0, [r3, #0]
 800bcda:	f7ff bfd2 	b.w	800bc82 <_raise_r>
 800bcde:	bf00      	nop
 800bce0:	2000009c 	.word	0x2000009c

0800bce4 <_kill_r>:
 800bce4:	b538      	push	{r3, r4, r5, lr}
 800bce6:	2300      	movs	r3, #0
 800bce8:	4d06      	ldr	r5, [pc, #24]	; (800bd04 <_kill_r+0x20>)
 800bcea:	4604      	mov	r4, r0
 800bcec:	4608      	mov	r0, r1
 800bcee:	4611      	mov	r1, r2
 800bcf0:	602b      	str	r3, [r5, #0]
 800bcf2:	f7f6 fa76 	bl	80021e2 <_kill>
 800bcf6:	1c43      	adds	r3, r0, #1
 800bcf8:	d102      	bne.n	800bd00 <_kill_r+0x1c>
 800bcfa:	682b      	ldr	r3, [r5, #0]
 800bcfc:	b103      	cbz	r3, 800bd00 <_kill_r+0x1c>
 800bcfe:	6023      	str	r3, [r4, #0]
 800bd00:	bd38      	pop	{r3, r4, r5, pc}
 800bd02:	bf00      	nop
 800bd04:	20000470 	.word	0x20000470

0800bd08 <_getpid_r>:
 800bd08:	f7f6 ba64 	b.w	80021d4 <_getpid>

0800bd0c <asin>:
 800bd0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd0e:	4604      	mov	r4, r0
 800bd10:	460d      	mov	r5, r1
 800bd12:	f000 f831 	bl	800bd78 <__ieee754_asin>
 800bd16:	4622      	mov	r2, r4
 800bd18:	4606      	mov	r6, r0
 800bd1a:	460f      	mov	r7, r1
 800bd1c:	462b      	mov	r3, r5
 800bd1e:	4620      	mov	r0, r4
 800bd20:	4629      	mov	r1, r5
 800bd22:	f7f4 fe73 	bl	8000a0c <__aeabi_dcmpun>
 800bd26:	b988      	cbnz	r0, 800bd4c <asin+0x40>
 800bd28:	4620      	mov	r0, r4
 800bd2a:	4629      	mov	r1, r5
 800bd2c:	f000 f818 	bl	800bd60 <fabs>
 800bd30:	2200      	movs	r2, #0
 800bd32:	4b08      	ldr	r3, [pc, #32]	; (800bd54 <asin+0x48>)
 800bd34:	f7f4 fe60 	bl	80009f8 <__aeabi_dcmpgt>
 800bd38:	b140      	cbz	r0, 800bd4c <asin+0x40>
 800bd3a:	f7fd ffe3 	bl	8009d04 <__errno>
 800bd3e:	2321      	movs	r3, #33	; 0x21
 800bd40:	6003      	str	r3, [r0, #0]
 800bd42:	4805      	ldr	r0, [pc, #20]	; (800bd58 <asin+0x4c>)
 800bd44:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bd48:	f000 b80e 	b.w	800bd68 <nan>
 800bd4c:	4630      	mov	r0, r6
 800bd4e:	4639      	mov	r1, r7
 800bd50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd52:	bf00      	nop
 800bd54:	3ff00000 	.word	0x3ff00000
 800bd58:	0800d882 	.word	0x0800d882

0800bd5c <atan2>:
 800bd5c:	f000 ba08 	b.w	800c170 <__ieee754_atan2>

0800bd60 <fabs>:
 800bd60:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bd64:	4619      	mov	r1, r3
 800bd66:	4770      	bx	lr

0800bd68 <nan>:
 800bd68:	2000      	movs	r0, #0
 800bd6a:	4901      	ldr	r1, [pc, #4]	; (800bd70 <nan+0x8>)
 800bd6c:	4770      	bx	lr
 800bd6e:	bf00      	nop
 800bd70:	7ff80000 	.word	0x7ff80000
 800bd74:	00000000 	.word	0x00000000

0800bd78 <__ieee754_asin>:
 800bd78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd7c:	4bc4      	ldr	r3, [pc, #784]	; (800c090 <__ieee754_asin+0x318>)
 800bd7e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800bd82:	b087      	sub	sp, #28
 800bd84:	429e      	cmp	r6, r3
 800bd86:	4602      	mov	r2, r0
 800bd88:	4604      	mov	r4, r0
 800bd8a:	460d      	mov	r5, r1
 800bd8c:	9105      	str	r1, [sp, #20]
 800bd8e:	dd28      	ble.n	800bde2 <__ieee754_asin+0x6a>
 800bd90:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
 800bd94:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 800bd98:	4306      	orrs	r6, r0
 800bd9a:	d114      	bne.n	800bdc6 <__ieee754_asin+0x4e>
 800bd9c:	a3a2      	add	r3, pc, #648	; (adr r3, 800c028 <__ieee754_asin+0x2b0>)
 800bd9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bda2:	f7f4 fb99 	bl	80004d8 <__aeabi_dmul>
 800bda6:	a3a2      	add	r3, pc, #648	; (adr r3, 800c030 <__ieee754_asin+0x2b8>)
 800bda8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdac:	4606      	mov	r6, r0
 800bdae:	460f      	mov	r7, r1
 800bdb0:	4620      	mov	r0, r4
 800bdb2:	4629      	mov	r1, r5
 800bdb4:	f7f4 fb90 	bl	80004d8 <__aeabi_dmul>
 800bdb8:	4602      	mov	r2, r0
 800bdba:	460b      	mov	r3, r1
 800bdbc:	4630      	mov	r0, r6
 800bdbe:	4639      	mov	r1, r7
 800bdc0:	f7f4 f9d4 	bl	800016c <__adddf3>
 800bdc4:	e006      	b.n	800bdd4 <__ieee754_asin+0x5c>
 800bdc6:	460b      	mov	r3, r1
 800bdc8:	f7f4 f9ce 	bl	8000168 <__aeabi_dsub>
 800bdcc:	4602      	mov	r2, r0
 800bdce:	460b      	mov	r3, r1
 800bdd0:	f7f4 fcac 	bl	800072c <__aeabi_ddiv>
 800bdd4:	4604      	mov	r4, r0
 800bdd6:	460d      	mov	r5, r1
 800bdd8:	4620      	mov	r0, r4
 800bdda:	4629      	mov	r1, r5
 800bddc:	b007      	add	sp, #28
 800bdde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bde2:	4bac      	ldr	r3, [pc, #688]	; (800c094 <__ieee754_asin+0x31c>)
 800bde4:	429e      	cmp	r6, r3
 800bde6:	dc0e      	bgt.n	800be06 <__ieee754_asin+0x8e>
 800bde8:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800bdec:	f280 80ab 	bge.w	800bf46 <__ieee754_asin+0x1ce>
 800bdf0:	a391      	add	r3, pc, #580	; (adr r3, 800c038 <__ieee754_asin+0x2c0>)
 800bdf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdf6:	f7f4 f9b9 	bl	800016c <__adddf3>
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	4ba6      	ldr	r3, [pc, #664]	; (800c098 <__ieee754_asin+0x320>)
 800bdfe:	f7f4 fdfb 	bl	80009f8 <__aeabi_dcmpgt>
 800be02:	2800      	cmp	r0, #0
 800be04:	d1e8      	bne.n	800bdd8 <__ieee754_asin+0x60>
 800be06:	4620      	mov	r0, r4
 800be08:	4629      	mov	r1, r5
 800be0a:	f7ff ffa9 	bl	800bd60 <fabs>
 800be0e:	4602      	mov	r2, r0
 800be10:	460b      	mov	r3, r1
 800be12:	2000      	movs	r0, #0
 800be14:	49a0      	ldr	r1, [pc, #640]	; (800c098 <__ieee754_asin+0x320>)
 800be16:	f7f4 f9a7 	bl	8000168 <__aeabi_dsub>
 800be1a:	2200      	movs	r2, #0
 800be1c:	4b9f      	ldr	r3, [pc, #636]	; (800c09c <__ieee754_asin+0x324>)
 800be1e:	f7f4 fb5b 	bl	80004d8 <__aeabi_dmul>
 800be22:	a387      	add	r3, pc, #540	; (adr r3, 800c040 <__ieee754_asin+0x2c8>)
 800be24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be28:	4604      	mov	r4, r0
 800be2a:	460d      	mov	r5, r1
 800be2c:	f7f4 fb54 	bl	80004d8 <__aeabi_dmul>
 800be30:	a385      	add	r3, pc, #532	; (adr r3, 800c048 <__ieee754_asin+0x2d0>)
 800be32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be36:	f7f4 f999 	bl	800016c <__adddf3>
 800be3a:	4622      	mov	r2, r4
 800be3c:	462b      	mov	r3, r5
 800be3e:	f7f4 fb4b 	bl	80004d8 <__aeabi_dmul>
 800be42:	a383      	add	r3, pc, #524	; (adr r3, 800c050 <__ieee754_asin+0x2d8>)
 800be44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be48:	f7f4 f98e 	bl	8000168 <__aeabi_dsub>
 800be4c:	4622      	mov	r2, r4
 800be4e:	462b      	mov	r3, r5
 800be50:	f7f4 fb42 	bl	80004d8 <__aeabi_dmul>
 800be54:	a380      	add	r3, pc, #512	; (adr r3, 800c058 <__ieee754_asin+0x2e0>)
 800be56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be5a:	f7f4 f987 	bl	800016c <__adddf3>
 800be5e:	4622      	mov	r2, r4
 800be60:	462b      	mov	r3, r5
 800be62:	f7f4 fb39 	bl	80004d8 <__aeabi_dmul>
 800be66:	a37e      	add	r3, pc, #504	; (adr r3, 800c060 <__ieee754_asin+0x2e8>)
 800be68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be6c:	f7f4 f97c 	bl	8000168 <__aeabi_dsub>
 800be70:	4622      	mov	r2, r4
 800be72:	462b      	mov	r3, r5
 800be74:	f7f4 fb30 	bl	80004d8 <__aeabi_dmul>
 800be78:	a37b      	add	r3, pc, #492	; (adr r3, 800c068 <__ieee754_asin+0x2f0>)
 800be7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be7e:	f7f4 f975 	bl	800016c <__adddf3>
 800be82:	4622      	mov	r2, r4
 800be84:	462b      	mov	r3, r5
 800be86:	f7f4 fb27 	bl	80004d8 <__aeabi_dmul>
 800be8a:	a379      	add	r3, pc, #484	; (adr r3, 800c070 <__ieee754_asin+0x2f8>)
 800be8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be90:	e9cd 0100 	strd	r0, r1, [sp]
 800be94:	4620      	mov	r0, r4
 800be96:	4629      	mov	r1, r5
 800be98:	f7f4 fb1e 	bl	80004d8 <__aeabi_dmul>
 800be9c:	a376      	add	r3, pc, #472	; (adr r3, 800c078 <__ieee754_asin+0x300>)
 800be9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bea2:	f7f4 f961 	bl	8000168 <__aeabi_dsub>
 800bea6:	4622      	mov	r2, r4
 800bea8:	462b      	mov	r3, r5
 800beaa:	f7f4 fb15 	bl	80004d8 <__aeabi_dmul>
 800beae:	a374      	add	r3, pc, #464	; (adr r3, 800c080 <__ieee754_asin+0x308>)
 800beb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beb4:	f7f4 f95a 	bl	800016c <__adddf3>
 800beb8:	4622      	mov	r2, r4
 800beba:	462b      	mov	r3, r5
 800bebc:	f7f4 fb0c 	bl	80004d8 <__aeabi_dmul>
 800bec0:	a371      	add	r3, pc, #452	; (adr r3, 800c088 <__ieee754_asin+0x310>)
 800bec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bec6:	f7f4 f94f 	bl	8000168 <__aeabi_dsub>
 800beca:	4622      	mov	r2, r4
 800becc:	462b      	mov	r3, r5
 800bece:	f7f4 fb03 	bl	80004d8 <__aeabi_dmul>
 800bed2:	4b71      	ldr	r3, [pc, #452]	; (800c098 <__ieee754_asin+0x320>)
 800bed4:	2200      	movs	r2, #0
 800bed6:	f7f4 f949 	bl	800016c <__adddf3>
 800beda:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bede:	4620      	mov	r0, r4
 800bee0:	4629      	mov	r1, r5
 800bee2:	f000 fb9f 	bl	800c624 <__ieee754_sqrt>
 800bee6:	4b6e      	ldr	r3, [pc, #440]	; (800c0a0 <__ieee754_asin+0x328>)
 800bee8:	4682      	mov	sl, r0
 800beea:	429e      	cmp	r6, r3
 800beec:	468b      	mov	fp, r1
 800beee:	f340 80d9 	ble.w	800c0a4 <__ieee754_asin+0x32c>
 800bef2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bef6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800befa:	f7f4 fc17 	bl	800072c <__aeabi_ddiv>
 800befe:	4652      	mov	r2, sl
 800bf00:	465b      	mov	r3, fp
 800bf02:	f7f4 fae9 	bl	80004d8 <__aeabi_dmul>
 800bf06:	4652      	mov	r2, sl
 800bf08:	465b      	mov	r3, fp
 800bf0a:	f7f4 f92f 	bl	800016c <__adddf3>
 800bf0e:	4602      	mov	r2, r0
 800bf10:	460b      	mov	r3, r1
 800bf12:	f7f4 f92b 	bl	800016c <__adddf3>
 800bf16:	a346      	add	r3, pc, #280	; (adr r3, 800c030 <__ieee754_asin+0x2b8>)
 800bf18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf1c:	f7f4 f924 	bl	8000168 <__aeabi_dsub>
 800bf20:	4602      	mov	r2, r0
 800bf22:	460b      	mov	r3, r1
 800bf24:	a140      	add	r1, pc, #256	; (adr r1, 800c028 <__ieee754_asin+0x2b0>)
 800bf26:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf2a:	f7f4 f91d 	bl	8000168 <__aeabi_dsub>
 800bf2e:	9b05      	ldr	r3, [sp, #20]
 800bf30:	4604      	mov	r4, r0
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	bfdc      	itt	le
 800bf36:	4602      	movle	r2, r0
 800bf38:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 800bf3c:	460d      	mov	r5, r1
 800bf3e:	bfdc      	itt	le
 800bf40:	4614      	movle	r4, r2
 800bf42:	461d      	movle	r5, r3
 800bf44:	e748      	b.n	800bdd8 <__ieee754_asin+0x60>
 800bf46:	460b      	mov	r3, r1
 800bf48:	f7f4 fac6 	bl	80004d8 <__aeabi_dmul>
 800bf4c:	a33c      	add	r3, pc, #240	; (adr r3, 800c040 <__ieee754_asin+0x2c8>)
 800bf4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf52:	4606      	mov	r6, r0
 800bf54:	460f      	mov	r7, r1
 800bf56:	f7f4 fabf 	bl	80004d8 <__aeabi_dmul>
 800bf5a:	a33b      	add	r3, pc, #236	; (adr r3, 800c048 <__ieee754_asin+0x2d0>)
 800bf5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf60:	f7f4 f904 	bl	800016c <__adddf3>
 800bf64:	4632      	mov	r2, r6
 800bf66:	463b      	mov	r3, r7
 800bf68:	f7f4 fab6 	bl	80004d8 <__aeabi_dmul>
 800bf6c:	a338      	add	r3, pc, #224	; (adr r3, 800c050 <__ieee754_asin+0x2d8>)
 800bf6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf72:	f7f4 f8f9 	bl	8000168 <__aeabi_dsub>
 800bf76:	4632      	mov	r2, r6
 800bf78:	463b      	mov	r3, r7
 800bf7a:	f7f4 faad 	bl	80004d8 <__aeabi_dmul>
 800bf7e:	a336      	add	r3, pc, #216	; (adr r3, 800c058 <__ieee754_asin+0x2e0>)
 800bf80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf84:	f7f4 f8f2 	bl	800016c <__adddf3>
 800bf88:	4632      	mov	r2, r6
 800bf8a:	463b      	mov	r3, r7
 800bf8c:	f7f4 faa4 	bl	80004d8 <__aeabi_dmul>
 800bf90:	a333      	add	r3, pc, #204	; (adr r3, 800c060 <__ieee754_asin+0x2e8>)
 800bf92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf96:	f7f4 f8e7 	bl	8000168 <__aeabi_dsub>
 800bf9a:	4632      	mov	r2, r6
 800bf9c:	463b      	mov	r3, r7
 800bf9e:	f7f4 fa9b 	bl	80004d8 <__aeabi_dmul>
 800bfa2:	a331      	add	r3, pc, #196	; (adr r3, 800c068 <__ieee754_asin+0x2f0>)
 800bfa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfa8:	f7f4 f8e0 	bl	800016c <__adddf3>
 800bfac:	4632      	mov	r2, r6
 800bfae:	463b      	mov	r3, r7
 800bfb0:	f7f4 fa92 	bl	80004d8 <__aeabi_dmul>
 800bfb4:	a32e      	add	r3, pc, #184	; (adr r3, 800c070 <__ieee754_asin+0x2f8>)
 800bfb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfba:	4680      	mov	r8, r0
 800bfbc:	4689      	mov	r9, r1
 800bfbe:	4630      	mov	r0, r6
 800bfc0:	4639      	mov	r1, r7
 800bfc2:	f7f4 fa89 	bl	80004d8 <__aeabi_dmul>
 800bfc6:	a32c      	add	r3, pc, #176	; (adr r3, 800c078 <__ieee754_asin+0x300>)
 800bfc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfcc:	f7f4 f8cc 	bl	8000168 <__aeabi_dsub>
 800bfd0:	4632      	mov	r2, r6
 800bfd2:	463b      	mov	r3, r7
 800bfd4:	f7f4 fa80 	bl	80004d8 <__aeabi_dmul>
 800bfd8:	a329      	add	r3, pc, #164	; (adr r3, 800c080 <__ieee754_asin+0x308>)
 800bfda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfde:	f7f4 f8c5 	bl	800016c <__adddf3>
 800bfe2:	4632      	mov	r2, r6
 800bfe4:	463b      	mov	r3, r7
 800bfe6:	f7f4 fa77 	bl	80004d8 <__aeabi_dmul>
 800bfea:	a327      	add	r3, pc, #156	; (adr r3, 800c088 <__ieee754_asin+0x310>)
 800bfec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bff0:	f7f4 f8ba 	bl	8000168 <__aeabi_dsub>
 800bff4:	4632      	mov	r2, r6
 800bff6:	463b      	mov	r3, r7
 800bff8:	f7f4 fa6e 	bl	80004d8 <__aeabi_dmul>
 800bffc:	2200      	movs	r2, #0
 800bffe:	4b26      	ldr	r3, [pc, #152]	; (800c098 <__ieee754_asin+0x320>)
 800c000:	f7f4 f8b4 	bl	800016c <__adddf3>
 800c004:	4602      	mov	r2, r0
 800c006:	460b      	mov	r3, r1
 800c008:	4640      	mov	r0, r8
 800c00a:	4649      	mov	r1, r9
 800c00c:	f7f4 fb8e 	bl	800072c <__aeabi_ddiv>
 800c010:	4622      	mov	r2, r4
 800c012:	462b      	mov	r3, r5
 800c014:	f7f4 fa60 	bl	80004d8 <__aeabi_dmul>
 800c018:	4602      	mov	r2, r0
 800c01a:	460b      	mov	r3, r1
 800c01c:	4620      	mov	r0, r4
 800c01e:	4629      	mov	r1, r5
 800c020:	e6ce      	b.n	800bdc0 <__ieee754_asin+0x48>
 800c022:	bf00      	nop
 800c024:	f3af 8000 	nop.w
 800c028:	54442d18 	.word	0x54442d18
 800c02c:	3ff921fb 	.word	0x3ff921fb
 800c030:	33145c07 	.word	0x33145c07
 800c034:	3c91a626 	.word	0x3c91a626
 800c038:	8800759c 	.word	0x8800759c
 800c03c:	7e37e43c 	.word	0x7e37e43c
 800c040:	0dfdf709 	.word	0x0dfdf709
 800c044:	3f023de1 	.word	0x3f023de1
 800c048:	7501b288 	.word	0x7501b288
 800c04c:	3f49efe0 	.word	0x3f49efe0
 800c050:	b5688f3b 	.word	0xb5688f3b
 800c054:	3fa48228 	.word	0x3fa48228
 800c058:	0e884455 	.word	0x0e884455
 800c05c:	3fc9c155 	.word	0x3fc9c155
 800c060:	03eb6f7d 	.word	0x03eb6f7d
 800c064:	3fd4d612 	.word	0x3fd4d612
 800c068:	55555555 	.word	0x55555555
 800c06c:	3fc55555 	.word	0x3fc55555
 800c070:	b12e9282 	.word	0xb12e9282
 800c074:	3fb3b8c5 	.word	0x3fb3b8c5
 800c078:	1b8d0159 	.word	0x1b8d0159
 800c07c:	3fe6066c 	.word	0x3fe6066c
 800c080:	9c598ac8 	.word	0x9c598ac8
 800c084:	40002ae5 	.word	0x40002ae5
 800c088:	1c8a2d4b 	.word	0x1c8a2d4b
 800c08c:	40033a27 	.word	0x40033a27
 800c090:	3fefffff 	.word	0x3fefffff
 800c094:	3fdfffff 	.word	0x3fdfffff
 800c098:	3ff00000 	.word	0x3ff00000
 800c09c:	3fe00000 	.word	0x3fe00000
 800c0a0:	3fef3332 	.word	0x3fef3332
 800c0a4:	4602      	mov	r2, r0
 800c0a6:	460b      	mov	r3, r1
 800c0a8:	f7f4 f860 	bl	800016c <__adddf3>
 800c0ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c0b0:	4606      	mov	r6, r0
 800c0b2:	460f      	mov	r7, r1
 800c0b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c0b8:	f7f4 fb38 	bl	800072c <__aeabi_ddiv>
 800c0bc:	4602      	mov	r2, r0
 800c0be:	460b      	mov	r3, r1
 800c0c0:	4630      	mov	r0, r6
 800c0c2:	4639      	mov	r1, r7
 800c0c4:	f7f4 fa08 	bl	80004d8 <__aeabi_dmul>
 800c0c8:	f04f 0800 	mov.w	r8, #0
 800c0cc:	4606      	mov	r6, r0
 800c0ce:	460f      	mov	r7, r1
 800c0d0:	4642      	mov	r2, r8
 800c0d2:	465b      	mov	r3, fp
 800c0d4:	4640      	mov	r0, r8
 800c0d6:	4659      	mov	r1, fp
 800c0d8:	f7f4 f9fe 	bl	80004d8 <__aeabi_dmul>
 800c0dc:	4602      	mov	r2, r0
 800c0de:	460b      	mov	r3, r1
 800c0e0:	4620      	mov	r0, r4
 800c0e2:	4629      	mov	r1, r5
 800c0e4:	f7f4 f840 	bl	8000168 <__aeabi_dsub>
 800c0e8:	4642      	mov	r2, r8
 800c0ea:	4604      	mov	r4, r0
 800c0ec:	460d      	mov	r5, r1
 800c0ee:	465b      	mov	r3, fp
 800c0f0:	4650      	mov	r0, sl
 800c0f2:	4659      	mov	r1, fp
 800c0f4:	f7f4 f83a 	bl	800016c <__adddf3>
 800c0f8:	4602      	mov	r2, r0
 800c0fa:	460b      	mov	r3, r1
 800c0fc:	4620      	mov	r0, r4
 800c0fe:	4629      	mov	r1, r5
 800c100:	f7f4 fb14 	bl	800072c <__aeabi_ddiv>
 800c104:	4602      	mov	r2, r0
 800c106:	460b      	mov	r3, r1
 800c108:	f7f4 f830 	bl	800016c <__adddf3>
 800c10c:	4602      	mov	r2, r0
 800c10e:	460b      	mov	r3, r1
 800c110:	a113      	add	r1, pc, #76	; (adr r1, 800c160 <__ieee754_asin+0x3e8>)
 800c112:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c116:	f7f4 f827 	bl	8000168 <__aeabi_dsub>
 800c11a:	4602      	mov	r2, r0
 800c11c:	460b      	mov	r3, r1
 800c11e:	4630      	mov	r0, r6
 800c120:	4639      	mov	r1, r7
 800c122:	f7f4 f821 	bl	8000168 <__aeabi_dsub>
 800c126:	4642      	mov	r2, r8
 800c128:	4604      	mov	r4, r0
 800c12a:	460d      	mov	r5, r1
 800c12c:	465b      	mov	r3, fp
 800c12e:	4640      	mov	r0, r8
 800c130:	4659      	mov	r1, fp
 800c132:	f7f4 f81b 	bl	800016c <__adddf3>
 800c136:	4602      	mov	r2, r0
 800c138:	460b      	mov	r3, r1
 800c13a:	a10b      	add	r1, pc, #44	; (adr r1, 800c168 <__ieee754_asin+0x3f0>)
 800c13c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c140:	f7f4 f812 	bl	8000168 <__aeabi_dsub>
 800c144:	4602      	mov	r2, r0
 800c146:	460b      	mov	r3, r1
 800c148:	4620      	mov	r0, r4
 800c14a:	4629      	mov	r1, r5
 800c14c:	f7f4 f80c 	bl	8000168 <__aeabi_dsub>
 800c150:	4602      	mov	r2, r0
 800c152:	460b      	mov	r3, r1
 800c154:	a104      	add	r1, pc, #16	; (adr r1, 800c168 <__ieee754_asin+0x3f0>)
 800c156:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c15a:	e6e6      	b.n	800bf2a <__ieee754_asin+0x1b2>
 800c15c:	f3af 8000 	nop.w
 800c160:	33145c07 	.word	0x33145c07
 800c164:	3c91a626 	.word	0x3c91a626
 800c168:	54442d18 	.word	0x54442d18
 800c16c:	3fe921fb 	.word	0x3fe921fb

0800c170 <__ieee754_atan2>:
 800c170:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c174:	4617      	mov	r7, r2
 800c176:	4692      	mov	sl, r2
 800c178:	4699      	mov	r9, r3
 800c17a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800c17e:	427b      	negs	r3, r7
 800c180:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800c300 <__ieee754_atan2+0x190>
 800c184:	433b      	orrs	r3, r7
 800c186:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800c18a:	4543      	cmp	r3, r8
 800c18c:	4604      	mov	r4, r0
 800c18e:	460d      	mov	r5, r1
 800c190:	d809      	bhi.n	800c1a6 <__ieee754_atan2+0x36>
 800c192:	4246      	negs	r6, r0
 800c194:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c198:	4306      	orrs	r6, r0
 800c19a:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 800c19e:	4546      	cmp	r6, r8
 800c1a0:	468e      	mov	lr, r1
 800c1a2:	4683      	mov	fp, r0
 800c1a4:	d908      	bls.n	800c1b8 <__ieee754_atan2+0x48>
 800c1a6:	4652      	mov	r2, sl
 800c1a8:	464b      	mov	r3, r9
 800c1aa:	4620      	mov	r0, r4
 800c1ac:	4629      	mov	r1, r5
 800c1ae:	f7f3 ffdd 	bl	800016c <__adddf3>
 800c1b2:	4604      	mov	r4, r0
 800c1b4:	460d      	mov	r5, r1
 800c1b6:	e019      	b.n	800c1ec <__ieee754_atan2+0x7c>
 800c1b8:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 800c1bc:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 800c1c0:	433e      	orrs	r6, r7
 800c1c2:	d103      	bne.n	800c1cc <__ieee754_atan2+0x5c>
 800c1c4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1c8:	f000 b8a2 	b.w	800c310 <atan>
 800c1cc:	ea4f 76a9 	mov.w	r6, r9, asr #30
 800c1d0:	f006 0602 	and.w	r6, r6, #2
 800c1d4:	ea53 0b0b 	orrs.w	fp, r3, fp
 800c1d8:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800c1dc:	d10a      	bne.n	800c1f4 <__ieee754_atan2+0x84>
 800c1de:	2e02      	cmp	r6, #2
 800c1e0:	d067      	beq.n	800c2b2 <__ieee754_atan2+0x142>
 800c1e2:	2e03      	cmp	r6, #3
 800c1e4:	d102      	bne.n	800c1ec <__ieee754_atan2+0x7c>
 800c1e6:	a53a      	add	r5, pc, #232	; (adr r5, 800c2d0 <__ieee754_atan2+0x160>)
 800c1e8:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c1ec:	4620      	mov	r0, r4
 800c1ee:	4629      	mov	r1, r5
 800c1f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1f4:	4317      	orrs	r7, r2
 800c1f6:	d106      	bne.n	800c206 <__ieee754_atan2+0x96>
 800c1f8:	f1be 0f00 	cmp.w	lr, #0
 800c1fc:	da64      	bge.n	800c2c8 <__ieee754_atan2+0x158>
 800c1fe:	a536      	add	r5, pc, #216	; (adr r5, 800c2d8 <__ieee754_atan2+0x168>)
 800c200:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c204:	e7f2      	b.n	800c1ec <__ieee754_atan2+0x7c>
 800c206:	4542      	cmp	r2, r8
 800c208:	d10f      	bne.n	800c22a <__ieee754_atan2+0xba>
 800c20a:	4293      	cmp	r3, r2
 800c20c:	f106 36ff 	add.w	r6, r6, #4294967295
 800c210:	d107      	bne.n	800c222 <__ieee754_atan2+0xb2>
 800c212:	2e02      	cmp	r6, #2
 800c214:	d851      	bhi.n	800c2ba <__ieee754_atan2+0x14a>
 800c216:	4b3b      	ldr	r3, [pc, #236]	; (800c304 <__ieee754_atan2+0x194>)
 800c218:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c21c:	e9d3 4500 	ldrd	r4, r5, [r3]
 800c220:	e7e4      	b.n	800c1ec <__ieee754_atan2+0x7c>
 800c222:	2e02      	cmp	r6, #2
 800c224:	d84d      	bhi.n	800c2c2 <__ieee754_atan2+0x152>
 800c226:	4b38      	ldr	r3, [pc, #224]	; (800c308 <__ieee754_atan2+0x198>)
 800c228:	e7f6      	b.n	800c218 <__ieee754_atan2+0xa8>
 800c22a:	4543      	cmp	r3, r8
 800c22c:	d0e4      	beq.n	800c1f8 <__ieee754_atan2+0x88>
 800c22e:	1a9b      	subs	r3, r3, r2
 800c230:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800c234:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c238:	da21      	bge.n	800c27e <__ieee754_atan2+0x10e>
 800c23a:	f1b9 0f00 	cmp.w	r9, #0
 800c23e:	da01      	bge.n	800c244 <__ieee754_atan2+0xd4>
 800c240:	323c      	adds	r2, #60	; 0x3c
 800c242:	db20      	blt.n	800c286 <__ieee754_atan2+0x116>
 800c244:	4652      	mov	r2, sl
 800c246:	464b      	mov	r3, r9
 800c248:	4620      	mov	r0, r4
 800c24a:	4629      	mov	r1, r5
 800c24c:	f7f4 fa6e 	bl	800072c <__aeabi_ddiv>
 800c250:	f7ff fd86 	bl	800bd60 <fabs>
 800c254:	f000 f85c 	bl	800c310 <atan>
 800c258:	4604      	mov	r4, r0
 800c25a:	460d      	mov	r5, r1
 800c25c:	2e01      	cmp	r6, #1
 800c25e:	d015      	beq.n	800c28c <__ieee754_atan2+0x11c>
 800c260:	2e02      	cmp	r6, #2
 800c262:	d017      	beq.n	800c294 <__ieee754_atan2+0x124>
 800c264:	2e00      	cmp	r6, #0
 800c266:	d0c1      	beq.n	800c1ec <__ieee754_atan2+0x7c>
 800c268:	a31d      	add	r3, pc, #116	; (adr r3, 800c2e0 <__ieee754_atan2+0x170>)
 800c26a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c26e:	4620      	mov	r0, r4
 800c270:	4629      	mov	r1, r5
 800c272:	f7f3 ff79 	bl	8000168 <__aeabi_dsub>
 800c276:	a31c      	add	r3, pc, #112	; (adr r3, 800c2e8 <__ieee754_atan2+0x178>)
 800c278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c27c:	e016      	b.n	800c2ac <__ieee754_atan2+0x13c>
 800c27e:	a51c      	add	r5, pc, #112	; (adr r5, 800c2f0 <__ieee754_atan2+0x180>)
 800c280:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c284:	e7ea      	b.n	800c25c <__ieee754_atan2+0xec>
 800c286:	2400      	movs	r4, #0
 800c288:	2500      	movs	r5, #0
 800c28a:	e7e7      	b.n	800c25c <__ieee754_atan2+0xec>
 800c28c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800c290:	461d      	mov	r5, r3
 800c292:	e7ab      	b.n	800c1ec <__ieee754_atan2+0x7c>
 800c294:	a312      	add	r3, pc, #72	; (adr r3, 800c2e0 <__ieee754_atan2+0x170>)
 800c296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c29a:	4620      	mov	r0, r4
 800c29c:	4629      	mov	r1, r5
 800c29e:	f7f3 ff63 	bl	8000168 <__aeabi_dsub>
 800c2a2:	4602      	mov	r2, r0
 800c2a4:	460b      	mov	r3, r1
 800c2a6:	a110      	add	r1, pc, #64	; (adr r1, 800c2e8 <__ieee754_atan2+0x178>)
 800c2a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c2ac:	f7f3 ff5c 	bl	8000168 <__aeabi_dsub>
 800c2b0:	e77f      	b.n	800c1b2 <__ieee754_atan2+0x42>
 800c2b2:	a50d      	add	r5, pc, #52	; (adr r5, 800c2e8 <__ieee754_atan2+0x178>)
 800c2b4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c2b8:	e798      	b.n	800c1ec <__ieee754_atan2+0x7c>
 800c2ba:	a50f      	add	r5, pc, #60	; (adr r5, 800c2f8 <__ieee754_atan2+0x188>)
 800c2bc:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c2c0:	e794      	b.n	800c1ec <__ieee754_atan2+0x7c>
 800c2c2:	2400      	movs	r4, #0
 800c2c4:	2500      	movs	r5, #0
 800c2c6:	e791      	b.n	800c1ec <__ieee754_atan2+0x7c>
 800c2c8:	a509      	add	r5, pc, #36	; (adr r5, 800c2f0 <__ieee754_atan2+0x180>)
 800c2ca:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c2ce:	e78d      	b.n	800c1ec <__ieee754_atan2+0x7c>
 800c2d0:	54442d18 	.word	0x54442d18
 800c2d4:	c00921fb 	.word	0xc00921fb
 800c2d8:	54442d18 	.word	0x54442d18
 800c2dc:	bff921fb 	.word	0xbff921fb
 800c2e0:	33145c07 	.word	0x33145c07
 800c2e4:	3ca1a626 	.word	0x3ca1a626
 800c2e8:	54442d18 	.word	0x54442d18
 800c2ec:	400921fb 	.word	0x400921fb
 800c2f0:	54442d18 	.word	0x54442d18
 800c2f4:	3ff921fb 	.word	0x3ff921fb
 800c2f8:	54442d18 	.word	0x54442d18
 800c2fc:	3fe921fb 	.word	0x3fe921fb
 800c300:	7ff00000 	.word	0x7ff00000
 800c304:	0800d988 	.word	0x0800d988
 800c308:	0800d9a0 	.word	0x0800d9a0
 800c30c:	00000000 	.word	0x00000000

0800c310 <atan>:
 800c310:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c314:	4bb6      	ldr	r3, [pc, #728]	; (800c5f0 <atan+0x2e0>)
 800c316:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c31a:	429e      	cmp	r6, r3
 800c31c:	4604      	mov	r4, r0
 800c31e:	460d      	mov	r5, r1
 800c320:	468b      	mov	fp, r1
 800c322:	dd17      	ble.n	800c354 <atan+0x44>
 800c324:	4bb3      	ldr	r3, [pc, #716]	; (800c5f4 <atan+0x2e4>)
 800c326:	429e      	cmp	r6, r3
 800c328:	dc01      	bgt.n	800c32e <atan+0x1e>
 800c32a:	d109      	bne.n	800c340 <atan+0x30>
 800c32c:	b140      	cbz	r0, 800c340 <atan+0x30>
 800c32e:	4622      	mov	r2, r4
 800c330:	462b      	mov	r3, r5
 800c332:	4620      	mov	r0, r4
 800c334:	4629      	mov	r1, r5
 800c336:	f7f3 ff19 	bl	800016c <__adddf3>
 800c33a:	4604      	mov	r4, r0
 800c33c:	460d      	mov	r5, r1
 800c33e:	e005      	b.n	800c34c <atan+0x3c>
 800c340:	f1bb 0f00 	cmp.w	fp, #0
 800c344:	4cac      	ldr	r4, [pc, #688]	; (800c5f8 <atan+0x2e8>)
 800c346:	f300 8121 	bgt.w	800c58c <atan+0x27c>
 800c34a:	4dac      	ldr	r5, [pc, #688]	; (800c5fc <atan+0x2ec>)
 800c34c:	4620      	mov	r0, r4
 800c34e:	4629      	mov	r1, r5
 800c350:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c354:	4baa      	ldr	r3, [pc, #680]	; (800c600 <atan+0x2f0>)
 800c356:	429e      	cmp	r6, r3
 800c358:	dc11      	bgt.n	800c37e <atan+0x6e>
 800c35a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800c35e:	429e      	cmp	r6, r3
 800c360:	dc0a      	bgt.n	800c378 <atan+0x68>
 800c362:	a38b      	add	r3, pc, #556	; (adr r3, 800c590 <atan+0x280>)
 800c364:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c368:	f7f3 ff00 	bl	800016c <__adddf3>
 800c36c:	2200      	movs	r2, #0
 800c36e:	4ba5      	ldr	r3, [pc, #660]	; (800c604 <atan+0x2f4>)
 800c370:	f7f4 fb42 	bl	80009f8 <__aeabi_dcmpgt>
 800c374:	2800      	cmp	r0, #0
 800c376:	d1e9      	bne.n	800c34c <atan+0x3c>
 800c378:	f04f 3aff 	mov.w	sl, #4294967295
 800c37c:	e027      	b.n	800c3ce <atan+0xbe>
 800c37e:	f7ff fcef 	bl	800bd60 <fabs>
 800c382:	4ba1      	ldr	r3, [pc, #644]	; (800c608 <atan+0x2f8>)
 800c384:	4604      	mov	r4, r0
 800c386:	429e      	cmp	r6, r3
 800c388:	460d      	mov	r5, r1
 800c38a:	f300 80b8 	bgt.w	800c4fe <atan+0x1ee>
 800c38e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800c392:	429e      	cmp	r6, r3
 800c394:	f300 809c 	bgt.w	800c4d0 <atan+0x1c0>
 800c398:	4602      	mov	r2, r0
 800c39a:	460b      	mov	r3, r1
 800c39c:	f7f3 fee6 	bl	800016c <__adddf3>
 800c3a0:	2200      	movs	r2, #0
 800c3a2:	4b98      	ldr	r3, [pc, #608]	; (800c604 <atan+0x2f4>)
 800c3a4:	f7f3 fee0 	bl	8000168 <__aeabi_dsub>
 800c3a8:	2200      	movs	r2, #0
 800c3aa:	4606      	mov	r6, r0
 800c3ac:	460f      	mov	r7, r1
 800c3ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c3b2:	4620      	mov	r0, r4
 800c3b4:	4629      	mov	r1, r5
 800c3b6:	f7f3 fed9 	bl	800016c <__adddf3>
 800c3ba:	4602      	mov	r2, r0
 800c3bc:	460b      	mov	r3, r1
 800c3be:	4630      	mov	r0, r6
 800c3c0:	4639      	mov	r1, r7
 800c3c2:	f7f4 f9b3 	bl	800072c <__aeabi_ddiv>
 800c3c6:	f04f 0a00 	mov.w	sl, #0
 800c3ca:	4604      	mov	r4, r0
 800c3cc:	460d      	mov	r5, r1
 800c3ce:	4622      	mov	r2, r4
 800c3d0:	462b      	mov	r3, r5
 800c3d2:	4620      	mov	r0, r4
 800c3d4:	4629      	mov	r1, r5
 800c3d6:	f7f4 f87f 	bl	80004d8 <__aeabi_dmul>
 800c3da:	4602      	mov	r2, r0
 800c3dc:	460b      	mov	r3, r1
 800c3de:	4680      	mov	r8, r0
 800c3e0:	4689      	mov	r9, r1
 800c3e2:	f7f4 f879 	bl	80004d8 <__aeabi_dmul>
 800c3e6:	a36c      	add	r3, pc, #432	; (adr r3, 800c598 <atan+0x288>)
 800c3e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ec:	4606      	mov	r6, r0
 800c3ee:	460f      	mov	r7, r1
 800c3f0:	f7f4 f872 	bl	80004d8 <__aeabi_dmul>
 800c3f4:	a36a      	add	r3, pc, #424	; (adr r3, 800c5a0 <atan+0x290>)
 800c3f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3fa:	f7f3 feb7 	bl	800016c <__adddf3>
 800c3fe:	4632      	mov	r2, r6
 800c400:	463b      	mov	r3, r7
 800c402:	f7f4 f869 	bl	80004d8 <__aeabi_dmul>
 800c406:	a368      	add	r3, pc, #416	; (adr r3, 800c5a8 <atan+0x298>)
 800c408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c40c:	f7f3 feae 	bl	800016c <__adddf3>
 800c410:	4632      	mov	r2, r6
 800c412:	463b      	mov	r3, r7
 800c414:	f7f4 f860 	bl	80004d8 <__aeabi_dmul>
 800c418:	a365      	add	r3, pc, #404	; (adr r3, 800c5b0 <atan+0x2a0>)
 800c41a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c41e:	f7f3 fea5 	bl	800016c <__adddf3>
 800c422:	4632      	mov	r2, r6
 800c424:	463b      	mov	r3, r7
 800c426:	f7f4 f857 	bl	80004d8 <__aeabi_dmul>
 800c42a:	a363      	add	r3, pc, #396	; (adr r3, 800c5b8 <atan+0x2a8>)
 800c42c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c430:	f7f3 fe9c 	bl	800016c <__adddf3>
 800c434:	4632      	mov	r2, r6
 800c436:	463b      	mov	r3, r7
 800c438:	f7f4 f84e 	bl	80004d8 <__aeabi_dmul>
 800c43c:	a360      	add	r3, pc, #384	; (adr r3, 800c5c0 <atan+0x2b0>)
 800c43e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c442:	f7f3 fe93 	bl	800016c <__adddf3>
 800c446:	4642      	mov	r2, r8
 800c448:	464b      	mov	r3, r9
 800c44a:	f7f4 f845 	bl	80004d8 <__aeabi_dmul>
 800c44e:	a35e      	add	r3, pc, #376	; (adr r3, 800c5c8 <atan+0x2b8>)
 800c450:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c454:	4680      	mov	r8, r0
 800c456:	4689      	mov	r9, r1
 800c458:	4630      	mov	r0, r6
 800c45a:	4639      	mov	r1, r7
 800c45c:	f7f4 f83c 	bl	80004d8 <__aeabi_dmul>
 800c460:	a35b      	add	r3, pc, #364	; (adr r3, 800c5d0 <atan+0x2c0>)
 800c462:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c466:	f7f3 fe7f 	bl	8000168 <__aeabi_dsub>
 800c46a:	4632      	mov	r2, r6
 800c46c:	463b      	mov	r3, r7
 800c46e:	f7f4 f833 	bl	80004d8 <__aeabi_dmul>
 800c472:	a359      	add	r3, pc, #356	; (adr r3, 800c5d8 <atan+0x2c8>)
 800c474:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c478:	f7f3 fe76 	bl	8000168 <__aeabi_dsub>
 800c47c:	4632      	mov	r2, r6
 800c47e:	463b      	mov	r3, r7
 800c480:	f7f4 f82a 	bl	80004d8 <__aeabi_dmul>
 800c484:	a356      	add	r3, pc, #344	; (adr r3, 800c5e0 <atan+0x2d0>)
 800c486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c48a:	f7f3 fe6d 	bl	8000168 <__aeabi_dsub>
 800c48e:	4632      	mov	r2, r6
 800c490:	463b      	mov	r3, r7
 800c492:	f7f4 f821 	bl	80004d8 <__aeabi_dmul>
 800c496:	a354      	add	r3, pc, #336	; (adr r3, 800c5e8 <atan+0x2d8>)
 800c498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c49c:	f7f3 fe64 	bl	8000168 <__aeabi_dsub>
 800c4a0:	4632      	mov	r2, r6
 800c4a2:	463b      	mov	r3, r7
 800c4a4:	f7f4 f818 	bl	80004d8 <__aeabi_dmul>
 800c4a8:	4602      	mov	r2, r0
 800c4aa:	460b      	mov	r3, r1
 800c4ac:	4640      	mov	r0, r8
 800c4ae:	4649      	mov	r1, r9
 800c4b0:	f7f3 fe5c 	bl	800016c <__adddf3>
 800c4b4:	4622      	mov	r2, r4
 800c4b6:	462b      	mov	r3, r5
 800c4b8:	f7f4 f80e 	bl	80004d8 <__aeabi_dmul>
 800c4bc:	f1ba 3fff 	cmp.w	sl, #4294967295
 800c4c0:	4602      	mov	r2, r0
 800c4c2:	460b      	mov	r3, r1
 800c4c4:	d144      	bne.n	800c550 <atan+0x240>
 800c4c6:	4620      	mov	r0, r4
 800c4c8:	4629      	mov	r1, r5
 800c4ca:	f7f3 fe4d 	bl	8000168 <__aeabi_dsub>
 800c4ce:	e734      	b.n	800c33a <atan+0x2a>
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	4b4c      	ldr	r3, [pc, #304]	; (800c604 <atan+0x2f4>)
 800c4d4:	f7f3 fe48 	bl	8000168 <__aeabi_dsub>
 800c4d8:	2200      	movs	r2, #0
 800c4da:	4606      	mov	r6, r0
 800c4dc:	460f      	mov	r7, r1
 800c4de:	4620      	mov	r0, r4
 800c4e0:	4629      	mov	r1, r5
 800c4e2:	4b48      	ldr	r3, [pc, #288]	; (800c604 <atan+0x2f4>)
 800c4e4:	f7f3 fe42 	bl	800016c <__adddf3>
 800c4e8:	4602      	mov	r2, r0
 800c4ea:	460b      	mov	r3, r1
 800c4ec:	4630      	mov	r0, r6
 800c4ee:	4639      	mov	r1, r7
 800c4f0:	f7f4 f91c 	bl	800072c <__aeabi_ddiv>
 800c4f4:	f04f 0a01 	mov.w	sl, #1
 800c4f8:	4604      	mov	r4, r0
 800c4fa:	460d      	mov	r5, r1
 800c4fc:	e767      	b.n	800c3ce <atan+0xbe>
 800c4fe:	4b43      	ldr	r3, [pc, #268]	; (800c60c <atan+0x2fc>)
 800c500:	429e      	cmp	r6, r3
 800c502:	da1a      	bge.n	800c53a <atan+0x22a>
 800c504:	2200      	movs	r2, #0
 800c506:	4b42      	ldr	r3, [pc, #264]	; (800c610 <atan+0x300>)
 800c508:	f7f3 fe2e 	bl	8000168 <__aeabi_dsub>
 800c50c:	2200      	movs	r2, #0
 800c50e:	4606      	mov	r6, r0
 800c510:	460f      	mov	r7, r1
 800c512:	4620      	mov	r0, r4
 800c514:	4629      	mov	r1, r5
 800c516:	4b3e      	ldr	r3, [pc, #248]	; (800c610 <atan+0x300>)
 800c518:	f7f3 ffde 	bl	80004d8 <__aeabi_dmul>
 800c51c:	2200      	movs	r2, #0
 800c51e:	4b39      	ldr	r3, [pc, #228]	; (800c604 <atan+0x2f4>)
 800c520:	f7f3 fe24 	bl	800016c <__adddf3>
 800c524:	4602      	mov	r2, r0
 800c526:	460b      	mov	r3, r1
 800c528:	4630      	mov	r0, r6
 800c52a:	4639      	mov	r1, r7
 800c52c:	f7f4 f8fe 	bl	800072c <__aeabi_ddiv>
 800c530:	f04f 0a02 	mov.w	sl, #2
 800c534:	4604      	mov	r4, r0
 800c536:	460d      	mov	r5, r1
 800c538:	e749      	b.n	800c3ce <atan+0xbe>
 800c53a:	4602      	mov	r2, r0
 800c53c:	460b      	mov	r3, r1
 800c53e:	2000      	movs	r0, #0
 800c540:	4934      	ldr	r1, [pc, #208]	; (800c614 <atan+0x304>)
 800c542:	f7f4 f8f3 	bl	800072c <__aeabi_ddiv>
 800c546:	f04f 0a03 	mov.w	sl, #3
 800c54a:	4604      	mov	r4, r0
 800c54c:	460d      	mov	r5, r1
 800c54e:	e73e      	b.n	800c3ce <atan+0xbe>
 800c550:	4b31      	ldr	r3, [pc, #196]	; (800c618 <atan+0x308>)
 800c552:	4e32      	ldr	r6, [pc, #200]	; (800c61c <atan+0x30c>)
 800c554:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c55c:	f7f3 fe04 	bl	8000168 <__aeabi_dsub>
 800c560:	4622      	mov	r2, r4
 800c562:	462b      	mov	r3, r5
 800c564:	f7f3 fe00 	bl	8000168 <__aeabi_dsub>
 800c568:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800c56c:	4602      	mov	r2, r0
 800c56e:	460b      	mov	r3, r1
 800c570:	e9d6 0100 	ldrd	r0, r1, [r6]
 800c574:	f7f3 fdf8 	bl	8000168 <__aeabi_dsub>
 800c578:	f1bb 0f00 	cmp.w	fp, #0
 800c57c:	4604      	mov	r4, r0
 800c57e:	460d      	mov	r5, r1
 800c580:	f6bf aee4 	bge.w	800c34c <atan+0x3c>
 800c584:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c588:	461d      	mov	r5, r3
 800c58a:	e6df      	b.n	800c34c <atan+0x3c>
 800c58c:	4d24      	ldr	r5, [pc, #144]	; (800c620 <atan+0x310>)
 800c58e:	e6dd      	b.n	800c34c <atan+0x3c>
 800c590:	8800759c 	.word	0x8800759c
 800c594:	7e37e43c 	.word	0x7e37e43c
 800c598:	e322da11 	.word	0xe322da11
 800c59c:	3f90ad3a 	.word	0x3f90ad3a
 800c5a0:	24760deb 	.word	0x24760deb
 800c5a4:	3fa97b4b 	.word	0x3fa97b4b
 800c5a8:	a0d03d51 	.word	0xa0d03d51
 800c5ac:	3fb10d66 	.word	0x3fb10d66
 800c5b0:	c54c206e 	.word	0xc54c206e
 800c5b4:	3fb745cd 	.word	0x3fb745cd
 800c5b8:	920083ff 	.word	0x920083ff
 800c5bc:	3fc24924 	.word	0x3fc24924
 800c5c0:	5555550d 	.word	0x5555550d
 800c5c4:	3fd55555 	.word	0x3fd55555
 800c5c8:	2c6a6c2f 	.word	0x2c6a6c2f
 800c5cc:	bfa2b444 	.word	0xbfa2b444
 800c5d0:	52defd9a 	.word	0x52defd9a
 800c5d4:	3fadde2d 	.word	0x3fadde2d
 800c5d8:	af749a6d 	.word	0xaf749a6d
 800c5dc:	3fb3b0f2 	.word	0x3fb3b0f2
 800c5e0:	fe231671 	.word	0xfe231671
 800c5e4:	3fbc71c6 	.word	0x3fbc71c6
 800c5e8:	9998ebc4 	.word	0x9998ebc4
 800c5ec:	3fc99999 	.word	0x3fc99999
 800c5f0:	440fffff 	.word	0x440fffff
 800c5f4:	7ff00000 	.word	0x7ff00000
 800c5f8:	54442d18 	.word	0x54442d18
 800c5fc:	bff921fb 	.word	0xbff921fb
 800c600:	3fdbffff 	.word	0x3fdbffff
 800c604:	3ff00000 	.word	0x3ff00000
 800c608:	3ff2ffff 	.word	0x3ff2ffff
 800c60c:	40038000 	.word	0x40038000
 800c610:	3ff80000 	.word	0x3ff80000
 800c614:	bff00000 	.word	0xbff00000
 800c618:	0800d9d8 	.word	0x0800d9d8
 800c61c:	0800d9b8 	.word	0x0800d9b8
 800c620:	3ff921fb 	.word	0x3ff921fb

0800c624 <__ieee754_sqrt>:
 800c624:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 800c7c8 <__ieee754_sqrt+0x1a4>
 800c628:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c62c:	ea3c 0c01 	bics.w	ip, ip, r1
 800c630:	460b      	mov	r3, r1
 800c632:	4606      	mov	r6, r0
 800c634:	460d      	mov	r5, r1
 800c636:	460a      	mov	r2, r1
 800c638:	4604      	mov	r4, r0
 800c63a:	d10e      	bne.n	800c65a <__ieee754_sqrt+0x36>
 800c63c:	4602      	mov	r2, r0
 800c63e:	f7f3 ff4b 	bl	80004d8 <__aeabi_dmul>
 800c642:	4602      	mov	r2, r0
 800c644:	460b      	mov	r3, r1
 800c646:	4630      	mov	r0, r6
 800c648:	4629      	mov	r1, r5
 800c64a:	f7f3 fd8f 	bl	800016c <__adddf3>
 800c64e:	4606      	mov	r6, r0
 800c650:	460d      	mov	r5, r1
 800c652:	4630      	mov	r0, r6
 800c654:	4629      	mov	r1, r5
 800c656:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c65a:	2900      	cmp	r1, #0
 800c65c:	dc0d      	bgt.n	800c67a <__ieee754_sqrt+0x56>
 800c65e:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800c662:	ea5c 0c00 	orrs.w	ip, ip, r0
 800c666:	d0f4      	beq.n	800c652 <__ieee754_sqrt+0x2e>
 800c668:	b139      	cbz	r1, 800c67a <__ieee754_sqrt+0x56>
 800c66a:	4602      	mov	r2, r0
 800c66c:	f7f3 fd7c 	bl	8000168 <__aeabi_dsub>
 800c670:	4602      	mov	r2, r0
 800c672:	460b      	mov	r3, r1
 800c674:	f7f4 f85a 	bl	800072c <__aeabi_ddiv>
 800c678:	e7e9      	b.n	800c64e <__ieee754_sqrt+0x2a>
 800c67a:	1512      	asrs	r2, r2, #20
 800c67c:	f000 8089 	beq.w	800c792 <__ieee754_sqrt+0x16e>
 800c680:	2500      	movs	r5, #0
 800c682:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c686:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800c68a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c68e:	07d2      	lsls	r2, r2, #31
 800c690:	bf5c      	itt	pl
 800c692:	005b      	lslpl	r3, r3, #1
 800c694:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800c698:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c69c:	bf58      	it	pl
 800c69e:	0064      	lslpl	r4, r4, #1
 800c6a0:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800c6a4:	0062      	lsls	r2, r4, #1
 800c6a6:	2016      	movs	r0, #22
 800c6a8:	4629      	mov	r1, r5
 800c6aa:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 800c6ae:	1076      	asrs	r6, r6, #1
 800c6b0:	190f      	adds	r7, r1, r4
 800c6b2:	429f      	cmp	r7, r3
 800c6b4:	bfde      	ittt	le
 800c6b6:	1bdb      	suble	r3, r3, r7
 800c6b8:	1939      	addle	r1, r7, r4
 800c6ba:	192d      	addle	r5, r5, r4
 800c6bc:	005b      	lsls	r3, r3, #1
 800c6be:	3801      	subs	r0, #1
 800c6c0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800c6c4:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800c6c8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800c6cc:	d1f0      	bne.n	800c6b0 <__ieee754_sqrt+0x8c>
 800c6ce:	4604      	mov	r4, r0
 800c6d0:	2720      	movs	r7, #32
 800c6d2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800c6d6:	428b      	cmp	r3, r1
 800c6d8:	eb0c 0e00 	add.w	lr, ip, r0
 800c6dc:	dc02      	bgt.n	800c6e4 <__ieee754_sqrt+0xc0>
 800c6de:	d113      	bne.n	800c708 <__ieee754_sqrt+0xe4>
 800c6e0:	4596      	cmp	lr, r2
 800c6e2:	d811      	bhi.n	800c708 <__ieee754_sqrt+0xe4>
 800c6e4:	f1be 0f00 	cmp.w	lr, #0
 800c6e8:	eb0e 000c 	add.w	r0, lr, ip
 800c6ec:	da56      	bge.n	800c79c <__ieee754_sqrt+0x178>
 800c6ee:	2800      	cmp	r0, #0
 800c6f0:	db54      	blt.n	800c79c <__ieee754_sqrt+0x178>
 800c6f2:	f101 0801 	add.w	r8, r1, #1
 800c6f6:	1a5b      	subs	r3, r3, r1
 800c6f8:	4641      	mov	r1, r8
 800c6fa:	4596      	cmp	lr, r2
 800c6fc:	bf88      	it	hi
 800c6fe:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800c702:	eba2 020e 	sub.w	r2, r2, lr
 800c706:	4464      	add	r4, ip
 800c708:	005b      	lsls	r3, r3, #1
 800c70a:	3f01      	subs	r7, #1
 800c70c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800c710:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800c714:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800c718:	d1dd      	bne.n	800c6d6 <__ieee754_sqrt+0xb2>
 800c71a:	4313      	orrs	r3, r2
 800c71c:	d01b      	beq.n	800c756 <__ieee754_sqrt+0x132>
 800c71e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800c7cc <__ieee754_sqrt+0x1a8>
 800c722:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800c7d0 <__ieee754_sqrt+0x1ac>
 800c726:	e9da 0100 	ldrd	r0, r1, [sl]
 800c72a:	e9db 2300 	ldrd	r2, r3, [fp]
 800c72e:	f7f3 fd1b 	bl	8000168 <__aeabi_dsub>
 800c732:	e9da 8900 	ldrd	r8, r9, [sl]
 800c736:	4602      	mov	r2, r0
 800c738:	460b      	mov	r3, r1
 800c73a:	4640      	mov	r0, r8
 800c73c:	4649      	mov	r1, r9
 800c73e:	f7f4 f947 	bl	80009d0 <__aeabi_dcmple>
 800c742:	b140      	cbz	r0, 800c756 <__ieee754_sqrt+0x132>
 800c744:	e9da 0100 	ldrd	r0, r1, [sl]
 800c748:	e9db 2300 	ldrd	r2, r3, [fp]
 800c74c:	f1b4 3fff 	cmp.w	r4, #4294967295
 800c750:	d126      	bne.n	800c7a0 <__ieee754_sqrt+0x17c>
 800c752:	463c      	mov	r4, r7
 800c754:	3501      	adds	r5, #1
 800c756:	106b      	asrs	r3, r5, #1
 800c758:	0864      	lsrs	r4, r4, #1
 800c75a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800c75e:	07ea      	lsls	r2, r5, #31
 800c760:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800c764:	bf48      	it	mi
 800c766:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 800c76a:	4620      	mov	r0, r4
 800c76c:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800c770:	e76d      	b.n	800c64e <__ieee754_sqrt+0x2a>
 800c772:	0ae3      	lsrs	r3, r4, #11
 800c774:	3915      	subs	r1, #21
 800c776:	0564      	lsls	r4, r4, #21
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d0fa      	beq.n	800c772 <__ieee754_sqrt+0x14e>
 800c77c:	02d8      	lsls	r0, r3, #11
 800c77e:	d50a      	bpl.n	800c796 <__ieee754_sqrt+0x172>
 800c780:	f1c2 0020 	rsb	r0, r2, #32
 800c784:	fa24 f000 	lsr.w	r0, r4, r0
 800c788:	1e55      	subs	r5, r2, #1
 800c78a:	4094      	lsls	r4, r2
 800c78c:	4303      	orrs	r3, r0
 800c78e:	1b4a      	subs	r2, r1, r5
 800c790:	e776      	b.n	800c680 <__ieee754_sqrt+0x5c>
 800c792:	4611      	mov	r1, r2
 800c794:	e7f0      	b.n	800c778 <__ieee754_sqrt+0x154>
 800c796:	005b      	lsls	r3, r3, #1
 800c798:	3201      	adds	r2, #1
 800c79a:	e7ef      	b.n	800c77c <__ieee754_sqrt+0x158>
 800c79c:	4688      	mov	r8, r1
 800c79e:	e7aa      	b.n	800c6f6 <__ieee754_sqrt+0xd2>
 800c7a0:	f7f3 fce4 	bl	800016c <__adddf3>
 800c7a4:	e9da 8900 	ldrd	r8, r9, [sl]
 800c7a8:	4602      	mov	r2, r0
 800c7aa:	460b      	mov	r3, r1
 800c7ac:	4640      	mov	r0, r8
 800c7ae:	4649      	mov	r1, r9
 800c7b0:	f7f4 f904 	bl	80009bc <__aeabi_dcmplt>
 800c7b4:	b120      	cbz	r0, 800c7c0 <__ieee754_sqrt+0x19c>
 800c7b6:	1ca1      	adds	r1, r4, #2
 800c7b8:	bf08      	it	eq
 800c7ba:	3501      	addeq	r5, #1
 800c7bc:	3402      	adds	r4, #2
 800c7be:	e7ca      	b.n	800c756 <__ieee754_sqrt+0x132>
 800c7c0:	3401      	adds	r4, #1
 800c7c2:	f024 0401 	bic.w	r4, r4, #1
 800c7c6:	e7c6      	b.n	800c756 <__ieee754_sqrt+0x132>
 800c7c8:	7ff00000 	.word	0x7ff00000
 800c7cc:	20000210 	.word	0x20000210
 800c7d0:	20000218 	.word	0x20000218

0800c7d4 <_init>:
 800c7d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7d6:	bf00      	nop
 800c7d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7da:	bc08      	pop	{r3}
 800c7dc:	469e      	mov	lr, r3
 800c7de:	4770      	bx	lr

0800c7e0 <_fini>:
 800c7e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7e2:	bf00      	nop
 800c7e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7e6:	bc08      	pop	{r3}
 800c7e8:	469e      	mov	lr, r3
 800c7ea:	4770      	bx	lr
